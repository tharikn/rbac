import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../../@core/services/data-store.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "primeng/api";
import * as i5 from "primeng/table";
export class GlobalSearchWrapperComponent {
    _storeservice;
    value;
    valueChange = new EventEmitter();
    disabled = false;
    schema;
    table;
    columns;
    responseColumns;
    formioEvent = new EventEmitter();
    searchInput;
    searchResults = [];
    columnHeaders = [];
    cols = [];
    httpService;
    constructor(_storeservice) {
        this._storeservice = _storeservice;
        this._storeservice.currentStore.subscribe((res) => {
            if (res) {
                this.httpService = res['HTTPSERVICE'];
            }
        });
    }
    ngOnInit() {
        console.log('should not be empty');
    }
    searchElement() {
        this.cols = [];
        const search = {
            schema: this.schema,
            table: this.table,
            columns: this.columns,
            value: this.searchInput,
            responseColumns: this.responseColumns
        };
        this.httpService.post('/commonsearch', search).subscribe((res) => {
            this.searchResults = res.data;
            this.columnHeaders = Object.keys(res.data[0]);
            this.columnHeaders.map(h => {
                this.cols.push({ field: h, header: h });
            });
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GlobalSearchWrapperComponent, deps: [{ token: i1.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: GlobalSearchWrapperComponent, selector: "app-global-search-wrapper", inputs: { value: "value", disabled: "disabled", schema: "schema", table: "table", columns: "columns", responseColumns: "responseColumns" }, outputs: { valueChange: "valueChange", formioEvent: "formioEvent" }, ngImport: i0, template: "<div>\r\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchInput\" (change)=\"searchElement()\" />\r\n  <div class=\"card w-100\" *ngIf=\"searchResults.length\">\r\n    <p-table\r\n      responsiveLayout=\"scroll\"\r\n      [value]=\"searchResults\"\r\n      [columns]=\"cols\"\r\n      [reorderableColumns]=\"true\"\r\n      [paginator]=\"true\"\r\n      [rows]=\"5\"\r\n      [showCurrentPageReport]=\"true\"\r\n      currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\">\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <tr>\r\n          <th scope=\"col\" *ngFor=\"let col of columns\" class=\"search-header\">\r\n            {{ col.header }}\r\n          </th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n        <tr>\r\n          <td *ngFor=\"let col of columns\">\r\n            {{ rowData[col.field] }}\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </div>\r\n</div>\r\n", styles: [".search-header{text-transform:uppercase}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i5.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorStyleClass", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "paginatorLocale", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll", "virtualRowHeight"], outputs: ["contextMenuSelectionChange", "selectAllChange", "selectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GlobalSearchWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-global-search-wrapper', template: "<div>\r\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchInput\" (change)=\"searchElement()\" />\r\n  <div class=\"card w-100\" *ngIf=\"searchResults.length\">\r\n    <p-table\r\n      responsiveLayout=\"scroll\"\r\n      [value]=\"searchResults\"\r\n      [columns]=\"cols\"\r\n      [reorderableColumns]=\"true\"\r\n      [paginator]=\"true\"\r\n      [rows]=\"5\"\r\n      [showCurrentPageReport]=\"true\"\r\n      currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\">\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <tr>\r\n          <th scope=\"col\" *ngFor=\"let col of columns\" class=\"search-header\">\r\n            {{ col.header }}\r\n          </th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n        <tr>\r\n          <td *ngFor=\"let col of columns\">\r\n            {{ rowData[col.field] }}\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </div>\r\n</div>\r\n", styles: [".search-header{text-transform:uppercase}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataStoreService }]; }, propDecorators: { value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], disabled: [{
                type: Input
            }], schema: [{
                type: Input
            }], table: [{
                type: Input
            }], columns: [{
                type: Input
            }], responseColumns: [{
                type: Input
            }], formioEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLXNlYXJjaC13cmFwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BpY3MtbW9kdWxlL3BhZ2UtYnVpbGRlci9zcmMvbGliL3BpY3MtcGFnZWJ1aWxkZXIvcGFnZS1idWlsZGVyL3BhZ2UtYnVpbGRlci1hZGQvZ2xvYmFsLXNlYXJjaC13cmFwcGVyL2dsb2JhbC1zZWFyY2gtd3JhcHBlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9waWNzLW1vZHVsZS9wYWdlLWJ1aWxkZXIvc3JjL2xpYi9waWNzLXBhZ2VidWlsZGVyL3BhZ2UtYnVpbGRlci9wYWdlLWJ1aWxkZXItYWRkL2dsb2JhbC1zZWFyY2gtd3JhcHBlci9nbG9iYWwtc2VhcmNoLXdyYXBwZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQWlCL0UsTUFBTSxPQUFPLDRCQUE0QjtJQStCbkI7SUE3QnBCLEtBQUssQ0FBaUI7SUFHdEIsV0FBVyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO0lBR2pELFFBQVEsR0FBRyxLQUFLLENBQUM7SUFHakIsTUFBTSxDQUFNO0lBR1osS0FBSyxDQUFNO0lBR1gsT0FBTyxDQUFNO0lBR2IsZUFBZSxDQUFNO0lBR3JCLFdBQVcsR0FBRyxJQUFJLFlBQVksRUFBZSxDQUFDO0lBRTlDLFdBQVcsQ0FBUztJQUNwQixhQUFhLEdBQVEsRUFBRSxDQUFDO0lBQ3hCLGFBQWEsR0FBUSxFQUFFLENBQUM7SUFDeEIsSUFBSSxHQUFRLEVBQUUsQ0FBQztJQUNmLFdBQVcsQ0FBTTtJQUVqQixZQUFvQixhQUErQjtRQUEvQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDakQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDckQsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7YUFDdEM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixNQUFNLE1BQU0sR0FBbUI7WUFDN0IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ3ZCLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtTQUN0QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ3BFLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7d0dBM0RVLDRCQUE0Qjs0RkFBNUIsNEJBQTRCLGtSQ2pCekMsZ2lDQTZCQTs7NEZEWmEsNEJBQTRCO2tCQUx4QyxTQUFTOytCQUNFLDJCQUEyQjt1R0FNckMsS0FBSztzQkFESixLQUFLO2dCQUlOLFdBQVc7c0JBRFYsTUFBTTtnQkFJUCxRQUFRO3NCQURQLEtBQUs7Z0JBSU4sTUFBTTtzQkFETCxLQUFLO2dCQUlOLEtBQUs7c0JBREosS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUs7Z0JBSU4sZUFBZTtzQkFEZCxLQUFLO2dCQUlOLFdBQVc7c0JBRFYsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybWlvQ3VzdG9tQ29tcG9uZW50LCBGb3JtaW9FdmVudCB9IGZyb20gJ0Bmb3JtaW8vYW5ndWxhcic7XHJcbmltcG9ydCB7IERhdGFTdG9yZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9AY29yZS9zZXJ2aWNlcy9kYXRhLXN0b3JlLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hDcml0ZXJpYSB7XHJcbiAgc2NoZW1hOiBhbnk7XHJcbiAgdGFibGU6IGFueTtcclxuICByZXNwb25zZUNvbHVtbnM6IGFueTtcclxuICBjb2x1bW5zOiBhbnk7XHJcbiAgdmFsdWU6IHN0cmluZztcclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZ2xvYmFsLXNlYXJjaC13cmFwcGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZ2xvYmFsLXNlYXJjaC13cmFwcGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9nbG9iYWwtc2VhcmNoLXdyYXBwZXIuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2xvYmFsU2VhcmNoV3JhcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIEZvcm1pb0N1c3RvbUNvbXBvbmVudDxTZWFyY2hDcml0ZXJpYT4sIE9uSW5pdCB7XHJcbiAgQElucHV0KClcclxuICB2YWx1ZTogU2VhcmNoQ3JpdGVyaWE7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxTZWFyY2hDcml0ZXJpYT4oKTtcclxuXHJcbiAgQElucHV0KClcclxuICBkaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNjaGVtYTogYW55O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHRhYmxlOiBhbnk7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY29sdW1uczogYW55O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHJlc3BvbnNlQ29sdW1uczogYW55O1xyXG5cclxuICBAT3V0cHV0KClcclxuICBmb3JtaW9FdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybWlvRXZlbnQ+KCk7XHJcblxyXG4gIHNlYXJjaElucHV0OiBzdHJpbmc7XHJcbiAgc2VhcmNoUmVzdWx0czogYW55ID0gW107XHJcbiAgY29sdW1uSGVhZGVyczogYW55ID0gW107XHJcbiAgY29sczogYW55ID0gW107XHJcbiAgaHR0cFNlcnZpY2U6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc3RvcmVzZXJ2aWNlOiBEYXRhU3RvcmVTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLl9zdG9yZXNlcnZpY2UuY3VycmVudFN0b3JlLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHRoaXMuaHR0cFNlcnZpY2UgPSByZXNbJ0hUVFBTRVJWSUNFJ11cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgY29uc29sZS5sb2coJ3Nob3VsZCBub3QgYmUgZW1wdHknKTtcclxuICB9XHJcblxyXG4gIHNlYXJjaEVsZW1lbnQoKSB7XHJcbiAgICB0aGlzLmNvbHMgPSBbXTtcclxuICAgIGNvbnN0IHNlYXJjaDogU2VhcmNoQ3JpdGVyaWEgPSB7XHJcbiAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXHJcbiAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxyXG4gICAgICBjb2x1bW5zOiB0aGlzLmNvbHVtbnMsXHJcbiAgICAgIHZhbHVlOiB0aGlzLnNlYXJjaElucHV0LFxyXG4gICAgICByZXNwb25zZUNvbHVtbnM6IHRoaXMucmVzcG9uc2VDb2x1bW5zXHJcbiAgICB9O1xyXG4gICAgdGhpcy5odHRwU2VydmljZS5wb3N0KCcvY29tbW9uc2VhcmNoJywgc2VhcmNoKS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cyA9IHJlcy5kYXRhO1xyXG4gICAgICB0aGlzLmNvbHVtbkhlYWRlcnMgPSBPYmplY3Qua2V5cyhyZXMuZGF0YVswXSk7XHJcbiAgICAgIHRoaXMuY29sdW1uSGVhZGVycy5tYXAoaCA9PiB7XHJcbiAgICAgICAgdGhpcy5jb2xzLnB1c2goeyBmaWVsZDogaCwgaGVhZGVyOiBoIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCI8ZGl2PlxyXG4gIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgWyhuZ01vZGVsKV09XCJzZWFyY2hJbnB1dFwiIChjaGFuZ2UpPVwic2VhcmNoRWxlbWVudCgpXCIgLz5cclxuICA8ZGl2IGNsYXNzPVwiY2FyZCB3LTEwMFwiICpuZ0lmPVwic2VhcmNoUmVzdWx0cy5sZW5ndGhcIj5cclxuICAgIDxwLXRhYmxlXHJcbiAgICAgIHJlc3BvbnNpdmVMYXlvdXQ9XCJzY3JvbGxcIlxyXG4gICAgICBbdmFsdWVdPVwic2VhcmNoUmVzdWx0c1wiXHJcbiAgICAgIFtjb2x1bW5zXT1cImNvbHNcIlxyXG4gICAgICBbcmVvcmRlcmFibGVDb2x1bW5zXT1cInRydWVcIlxyXG4gICAgICBbcGFnaW5hdG9yXT1cInRydWVcIlxyXG4gICAgICBbcm93c109XCI1XCJcclxuICAgICAgW3Nob3dDdXJyZW50UGFnZVJlcG9ydF09XCJ0cnVlXCJcclxuICAgICAgY3VycmVudFBhZ2VSZXBvcnRUZW1wbGF0ZT1cIlNob3dpbmcge2ZpcnN0fSB0byB7bGFzdH0gb2Yge3RvdGFsUmVjb3Jkc30gZW50cmllc1wiPlxyXG4gICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiaGVhZGVyXCIgbGV0LWNvbHVtbnM+XHJcbiAgICAgICAgPHRyPlxyXG4gICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCIgKm5nRm9yPVwibGV0IGNvbCBvZiBjb2x1bW5zXCIgY2xhc3M9XCJzZWFyY2gtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgIHt7IGNvbC5oZWFkZXIgfX1cclxuICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgPC90cj5cclxuICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgPG5nLXRlbXBsYXRlIHBUZW1wbGF0ZT1cImJvZHlcIiBsZXQtcm93RGF0YSBsZXQtY29sdW1ucz1cImNvbHVtbnNcIj5cclxuICAgICAgICA8dHI+XHJcbiAgICAgICAgICA8dGQgKm5nRm9yPVwibGV0IGNvbCBvZiBjb2x1bW5zXCI+XHJcbiAgICAgICAgICAgIHt7IHJvd0RhdGFbY29sLmZpZWxkXSB9fVxyXG4gICAgICAgICAgPC90ZD5cclxuICAgICAgICA8L3RyPlxyXG4gICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgPC9wLXRhYmxlPlxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuIl19