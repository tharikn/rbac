import { Component, ViewChild } from '@angular/core';
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
import { AppConstants } from '../@core/constants/app-constants';
import { AuthService } from '../@core/service/auth.service';
import { PageAccessService } from '../@core/urls/page-access.service';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import { ManageAccessRadioComponent } from '../@shared/common-components/manage-access-radio/manage-access-radio.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../@core/service/data-store.service";
import * as i3 from "@angular/router";
import * as i4 from "../@core/service/alert.service";
import * as i5 from "@angular/common";
import * as i6 from "primeng/api";
import * as i7 from "primeng/tooltip";
import * as i8 from "primeng/dropdown";
import * as i9 from "primeng/accordion";
import * as i10 from "primeng/inputtext";
import * as i11 from "primeng/inputnumber";
import * as i12 from "primeng/multiselect";
import * as i13 from "../@core/directives/permission.directive";
import * as i14 from "../@shared/alert/alert.component";
import * as i15 from "@angular/material/card";
import * as i16 from "@angular/material/radio";
import * as i17 from "../@shared/common-components/manage-access-radio/manage-access-radio.component";
export class PageaccessComponent {
    formBuilder;
    cdRef;
    _storeservice;
    router;
    alert;
    rbacForm;
    userList = [];
    policyGroupData = [];
    roleAddedData = [];
    pageLevelAccess = false;
    multiPageAccess = false;
    fieldLevelAccess = false;
    moduleList = [];
    subModuleList = [];
    pageData = [];
    pagesList = [];
    loadedPagesList = [];
    selectedPageData = [];
    fData = [];
    moduleDropdownSettings = {};
    submoduleDropdownSettings = {};
    pageDropdownSettings = {};
    pageAccessDropdownSettings = {};
    fieldAccessDropdownSettings = {};
    AddComponent;
    fieldLevelClick = false;
    editPage = false;
    selectedFieldData = [];
    organisationid;
    existingSelectedFieldData;
    savedPageAccessPatching;
    savedFieldPagesPatching;
    selectedPageLevelData;
    selectedPageAccessChanges = [];
    isRunCond = true;
    selectedAccess;
    updatePage;
    selectedId;
    selectedName;
    assetList;
    policyGroupPages = [];
    policyGroupRolePages = [];
    selectedRole = '';
    conditions = [];
    permissions = [];
    showFieldValidity;
    pageAccessService;
    orgSubs;
    orgId;
    environment;
    RBACORG = new RBACINFO();
    PERMISSION;
    authService;
    pId;
    fullArray;
    mergedAsset;
    httpService;
    permissionUpdatedPages = [];
    fieldPageLevel;
    fieldLevelCheckCount;
    pagelevelaccesssavedisable = true;
    pagelevelaccesscount;
    selectedPages = [];
    previousSelection = [];
    isPageDeselectSave = false;
    deselectedItemIds = [];
    isRemoveAllFields = false;
    deselectAssetIds = [];
    enablesave = true;
    pagelevelaccesscountdisable = true;
    showFieldGrid = true;
    getPageList = false;
    disabledPages = [];
    oldPageAccessValues = [];
    grantedPages = [];
    viewArray = [];
    constructor(injector, formBuilder, cdRef, _storeservice, router, alert) {
        this.formBuilder = formBuilder;
        this.cdRef = cdRef;
        this._storeservice = _storeservice;
        this.router = router;
        this.alert = alert;
        this.pageAccessService = injector.get(PageAccessService);
        this.authService = injector.get(AuthService);
        this.updatePage = false;
        this.showFieldValidity = false;
        this.conditions = [
            {
                name: 'Days',
                key: 'days'
            },
            {
                name: 'Always',
                key: 'always'
            }
        ];
        this.permissions = [
            {
                name: 'R',
                key: 'r'
            },
            {
                name: 'RW',
                key: 'rw'
            },
            {
                name: 'None',
                key: 'n'
            }
        ];
        this.fieldLevelCheckCount = [];
        this.pagelevelaccesscount = [];
        // this.orgSubs = this.authService.orgInfo.subscribe(org => {
        //   this.orgId = org;
        //   if (this.orgId) {
        //     this.getOrganizationPage();
        //   }
        // });
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                console.log(this.RBACORG, 'RBACORG Event Scheduler');
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                this.httpService = res['HTTPSERVICE'];
                if (this.environment) {
                    this.getOrganizationPage();
                    this.loadRbacForm();
                }
            }
        });
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    loadRbacForm() {
        this.rbacForm = this.formBuilder.group({
            id: new FormControl(null),
            accessBy: new FormControl(null),
            userid: new FormControl(''),
            policyid: new FormControl(null),
            roleid: new FormControl(null),
            provideAccess: new FormControl(null),
            pageAccess: new FormControl('2'),
            validity: new FormControl(null),
            module: new FormControl(null),
            submodule: new FormControl(null),
            pageList: new FormControl(null),
            ppages: new FormControl(null),
            fpages: new FormControl(null),
            fieldLevelData: new FormArray([]),
            pageLevelData: new FormArray([])
        });
    }
    accessBy(evt) {
        this.pagesList = [];
        this.rbacForm.patchValue({ accessBy: evt });
        this.resetForm(evt);
    }
    userDropdown(evt) {
        this.userList = evt;
    }
    roleDropdown(evt) {
        this.roleAddedData = evt;
    }
    policyDropdown(evt) {
        this.policyGroupData = evt;
    }
    dropDownSelectedValues(evt) {
        this.disabledPages = [];
        this.getPageList = true;
        this.enablesave = false;
        this.selectedRole = '';
        this.updatePage = false;
        this.selectedAccess = evt.from;
        this.selectedName = evt.name;
        this.rbacForm.patchValue({ userid: evt.userid });
        this.rbacForm.patchValue({ roleid: evt.roleid });
        this.rbacForm.patchValue({ policyid: evt.policyid });
        if (this.pagesList.length === 0) {
            this.getOrganizationPage();
        }
        this.getSelectedPages();
        if (evt.from === 'role') {
            this.selectedRole = evt.roleid;
        }
    }
    getOrganizationPage() {
        if (this.orgId) {
            this.pageAccessService.getOrganizationPage(this.orgId).subscribe(res => {
                const data = res['data']['data'];
                if (data && data?.length) {
                    this.pageData = data?.filter(a => a.activeVersion);
                    this.loadedPagesList = this.pageData.map(x => {
                        return {
                            id: x.activeVersion.pageid,
                            pagename: x.isEnable ? x.activeVersion.pagename : `${x.activeVersion.pagename} (Inactive)`,
                            isEnable: x.isEnable,
                            activeVersion: x.activeVersion,
                            disabled: false
                        };
                    });
                }
            });
        }
    }
    getFallbackPermission(fAccess) {
        if (fAccess?.value?.pageAccess === '2' || fAccess?.value?.access === '2') {
            return this.permissions.filter(a => a.key !== 'rw');
        }
        else {
            return this.permissions;
        }
    }
    getSelectedPages(_selectedPages, _pageConfig, _assetconfig) {
        this.policyGroupPages = [];
        this.updatePage = false;
        if (this.selectedAccess === 'user') {
            this.selectedId = this.rbacForm.getRawValue().userid;
        }
        else if (this.selectedAccess === 'role') {
            this.selectedId = this.rbacForm.getRawValue().roleid;
        }
        else {
            this.selectedId = this.rbacForm.getRawValue().policyid;
            this.selectedAccess = 'policygroup';
        }
        this.getGrantedPages();
    }
    getGrantedPages() {
        if (this.getPageList) {
            this.pageAccessService.getDynamicPage(this.selectedAccess, this.selectedId).subscribe(res => {
                this.grantedPages = [];
                this.getPageList = false;
                if (this.selectedAccess === 'role') {
                    this.grantedPages = res['data'].rolePages;
                    this.policyGroupPages = res['data'].policyGroupPages;
                    const selectedPages = this.checkExistingGrantedPolicyPages(this.grantedPages, this.policyGroupPages);
                    this.pagesList = [...this.loadedPagesList.map(page => {
                            return {
                                ...page,
                                disabled: this.disabledPages.some(id => id === page.id),
                            };
                        })];
                    // added this below line for bug OR-1338
                    // this.pagesList = this.pagesList.filter(e => !e.disabled);
                    const enablePages = selectedPages.filter(e => !e.disabled);
                    this.rbacForm.patchValue({ pageList: enablePages });
                }
                else if (this.selectedAccess === 'policygroup') {
                    this.grantedPages = res['data'].policyGroupPages;
                    this.policyGroupRolePages = res['data'].policyGroupRolePages;
                    const selectedPages = this.checkExistingGrantedRolePages(this.grantedPages, this.policyGroupRolePages);
                    this.pagesList = this.loadedPagesList.map(page => ({
                        ...page,
                        disabled: this.disabledPages.some(id => id === page.id),
                    }));
                    // added this below line for bug OR-1338
                    // this.pagesList = this.pagesList.filter(e => !e.disabled);
                    const enablePages = selectedPages.filter(e => !e.disabled);
                    this.rbacForm.patchValue({ pageList: enablePages });
                }
                else {
                    this.grantedPages = res['data'];
                    this.pagesList = this.loadedPagesList;
                    const pagesArrayIds = this.grantedPages.map(granted => granted.page.id);
                    const enablePages = this.pagesList.filter(page => pagesArrayIds.includes(page.id));
                    this.rbacForm.patchValue({ pageList: enablePages });
                }
                // this.loadPages([], null, [], [], this.assetList);
                if (this.grantedPages.length) {
                    this.updatePage = true;
                    const pageData = this.grantedPages.filter(page => page.page).map(a => a.page);
                    pageData.forEach(x => (x.pagename = x?.activeVersion?.pagename || ''));
                    const uniquePageData = [...new Map(pageData.map(item => [item['id'], item])).values()];
                    const pageIDs = uniquePageData.map(a => a['id']);
                    const pageConfigData = this.grantedPages.map(a => {
                        return {
                            id: a.id,
                            isfull: a.full,
                            ishide: a.hide,
                            isread: a.read,
                            isreadwrite: a.readwrite,
                            conditions: a.conditions,
                            page: a.page
                        };
                    });
                    this.loadPages(uniquePageData, null, pageIDs, pageConfigData, this.assetList);
                    this.onControlChanges();
                    this.oldPageAccessValues = this.rbacForm.get('pageLevelData').value.map(x => ({ ...x }));
                    // } else {
                    //   this.removeAllPopulatePage()
                }
                else {
                    this.loadPages([], null, [], [], this.assetList);
                }
            });
        }
        else {
            this.updatePage = true;
            const pageLevelData = this.rbacForm.get('pageLevelData');
            if (pageLevelData && pageLevelData.controls.length > 0) {
                pageLevelData.controls.forEach((control, index) => {
                    const currentId = control.value.pageid;
                    const originalEntry = this.oldPageAccessValues.find(o => o.pageid === currentId);
                    if (originalEntry) {
                        control.patchValue({
                            pageAccess: originalEntry.pageAccess,
                            fallbackTo: originalEntry.fallbackTo,
                            condition: originalEntry.condition,
                            validity: originalEntry.validity
                        });
                    }
                    else {
                        control.patchValue({
                            pageAccess: control?.value?.pageAccess ? control.value.pageAccess : '2',
                            fallbackTo: 'n',
                            condition: 'always',
                            validity: '1'
                        });
                    }
                });
            }
            else {
                this.pageLevelAccess = false;
            }
        }
    }
    removeValue(e, item) {
        e.stopPropagation();
        const filteredPages = this.rbacForm.value.pageList.filter((s) => s.id !== Number(item.id));
        this.rbacForm.patchValue({
            pageList: filteredPages
        });
        this.populatePage('click', true, null);
        this.selectedPageData = this.rbacForm.value.pageList.filter(page => !page.disabled);
    }
    onControlChanges() {
        const pageLevelAccessFormControl = this.rbacForm.get('pageLevelData');
        pageLevelAccessFormControl.controls.forEach(control => {
            control.valueChanges.pipe(map((value) => {
                console.log('Value Changed');
                if (this.permissionUpdatedPages.some(pageId => pageId === value.pageid)) {
                    this.permissionUpdatedPages = this.permissionUpdatedPages.filter(pageId => pageId !== value.pageid);
                    this.permissionUpdatedPages.push(value.pageid);
                }
                else {
                    this.permissionUpdatedPages.push(value.pageid);
                }
            })).subscribe();
        });
    }
    checkExistingGrantedPolicyPages(rolePages, policyGroupPages) {
        let selectedPages;
        const rolePageIds = rolePages.map(page => page.page.id);
        selectedPages = this.loadedPagesList.filter(key => rolePageIds.includes(key.id));
        for (const page of this.loadedPagesList) {
            for (const policyGroups of policyGroupPages) {
                for (const pages of policyGroups.policygrouppage) {
                    if (pages.page[0].id === page.id) {
                        this.disabledPages.push(pages.page[0].id);
                        selectedPages.push({ ...page, disabled: true });
                    }
                }
            }
        }
        return selectedPages;
    }
    checkExistingGrantedRolePages(policyPages, policyGroupRolePages) {
        let selectedPages;
        const policyPageIds = policyPages.map(page => page.page.id);
        selectedPages = this.loadedPagesList.filter(key => policyPageIds.includes(key.id));
        for (const page of this.loadedPagesList) {
            for (const policyGroups of policyGroupRolePages) {
                for (const pages of policyGroups.rolepage) {
                    if (pages.page[0].id === page.id) {
                        this.disabledPages.push(pages.page[0].id);
                        selectedPages.push({ ...page, disabled: true });
                    }
                }
            }
        }
        return selectedPages;
    }
    policyGroupCondition(data, policyGroup) {
        const policyGroupPages = data?.data && data?.data.length ? data?.data : [];
        const uniquePolicyGroupPages = [...new Map(policyGroupPages.map(item => [item['page']['id'], item])).values()];
        this.policyGroupData = (this.policyGroupData.length && this.policyGroupData) || uniquePolicyGroupPages;
        this.policyGroupPages.push({
            name: this.policyGroupData.find(pgd => pgd.policygroup.id === policyGroup.policygroupid)?.policygroup
                ?.policygroupname,
            data: uniquePolicyGroupPages
        });
    }
    getConfiguredAssetData(selectedAccess, selectedId) {
        this.pageAccessService.getAssetById(selectedAccess, selectedId).subscribe((res) => {
            this.assetList = res['data'].map(a => {
                return {
                    _id: a?.id,
                    id: a?.assetid,
                    isfull: a.full,
                    ishide: a.hide,
                    isread: a.read,
                    isreadwrite: a.readwrite,
                    conditions: a.conditions
                };
            });
        });
    }
    loadPages(tempPageData, action, pageids, pageConfig, fieldConfig) {
        this.pageData = tempPageData || [];
        this.pageData.forEach(a => (a.pagename = tempPageData.length && tempPageData.filter(b => b.id === a.id)[0]?.activeVersion?.pagename));
        this.populatePage(action, true, null, pageConfig, fieldConfig, pageids);
    }
    populatePage(action, selected, event, pageConfig, fieldConfig, pageids) {
        // if (event) {
        //   if (Array.isArray(event) && selected) {
        //     this.permissionUpdatedPages = event.map(page => page.id)
        //   }
        //   else if (!Array.isArray(event) && selected) {
        //     this.permissionUpdatedPages.push(event.id);
        //   }
        //   else {
        //     this.permissionUpdatedPages = this.permissionUpdatedPages.filter(id => id !== event.id);
        //   }
        // }
        if (event && event.value.length) {
            this.rbacForm.patchValue({ pageList: event.value });
        }
        const pageIds = this.rbacForm.get('pageList').value;
        const id = pageIds.map(key => key.id);
        let provideAccess = this.rbacForm.get('provideAccess').value;
        // Logic to handle the deselected item of Pages field
        if (!selected) {
            this.isPageDeselectSave = true;
            const newlyDeselected = this.previousSelection.filter(item => !id.includes(item));
            this.deselectedItemIds = [...new Set([...this.deselectedItemIds, ...newlyDeselected])];
            const fpagesValue = this.rbacForm.get('fpages').value;
            if (fpagesValue && newlyDeselected.includes(fpagesValue)) {
                this.rbacForm.controls['fpages'].setValue(null);
                this.showFieldGrid = false;
            }
        }
        else {
            this.isPageDeselectSave = false;
        }
        this.previousSelection = [...id];
        if (id?.length) {
            this.isRemoveAllFields = false;
            if (!provideAccess) {
                this.rbacForm.patchValue({ provideAccess: '1' });
                this.pageLevelAccess = this.multiPageAccess = true;
                this.fieldLevelAccess = false;
                provideAccess = '1';
            }
            // Pageids from api
            this.selectedPageData = pageIds.filter(page => !page.disabled);
            this.pagelevelaccesscount = pageIds;
            if ((this.pagelevelaccesscount || this.pagelevelaccesscount.length > 0) && !this.enablesave) {
                this.pagelevelaccesscountdisable = false;
            }
            if (provideAccess === '1') {
                this.rbacForm.patchValue({ ppages: pageIds });
                if (fieldConfig?.length) {
                    this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(fieldConfig?.map(ele => {
                        return {
                            fieldName: ele?.description,
                            access: this.checkAccessType(ele),
                            assetid: ele?.assetid,
                            pageId: ele?.id
                        };
                    }), this.selectedFieldData);
                }
            }
            else if (provideAccess === '2' && pageids && pageids.length) {
                if (fieldConfig !== null) {
                    const pList = this.pageData.filter(key => key.id === pageids[0]);
                    this.rbacForm.patchValue({ fpages: pList });
                    this.getFieldLevelList(action, fieldConfig);
                }
                else {
                    const pId = this.selectedPageData.filter(ele => ele.id === pageIds[0]?.id);
                    this.rbacForm.patchValue({ fpages: pId });
                    this.getFieldLevelList(action, fieldConfig);
                }
            }
            this.getPageLevelList(action, pageConfig);
        }
        else {
            if (action === 'click') {
                this.pagelevelaccesscountdisable = false;
            }
            else {
                this.pagelevelaccesscountdisable = true;
            }
            this.removeAllPopulatePage();
            this.isRemoveAllFields = true;
        }
    }
    removeAllPopulatePage() {
        this.selectedPageData = [];
        this.pageLevelAccess = false;
        this.fieldLevelAccess = false;
        this.multiPageAccess = true;
        this.pagelevelaccesscount = [];
        this.pagelevelaccesssavedisable = true;
        const f = this.rbacForm.controls['fieldLevelData'];
        f.controls = [];
        const p = this.rbacForm.controls['pageLevelData'];
        p.controls = [];
        this.rbacForm.get('ppages').setValue(null);
        this.rbacForm.get('fpages').setValue(null);
        this.rbacForm.get('provideAccess').setValue(null);
        this.rbacForm.get('pageLevelData').setValue([]);
        this.rbacForm.get('fieldLevelData').setValue([]);
    }
    showLevelAccess(id) {
        const f = this.rbacForm.controls['fieldLevelData'];
        if (f.getRawValue()?.length) {
            this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(f.getRawValue(), this.selectedFieldData);
        }
        f.controls = [];
        const pageIds = this.rbacForm.get('pageList').value;
        if (pageIds != null) {
            if (id === '1') {
                this.pageLevelAccess = true;
                this.multiPageAccess = true;
                this.fieldLevelAccess = false;
                this.pagelevelaccesscount = pageIds;
                if (pageIds?.length) {
                    this.pagelevelaccesssavedisable = false;
                    if (!this.rbacForm.get('ppages').value) {
                        this.rbacForm.get('ppages').patchValue(pageIds);
                    }
                }
                this.getSelectedPages();
            }
            else {
                this.getConfiguredAssetData(this.selectedAccess, this.selectedId);
                this.pageLevelAccess = false;
                this.multiPageAccess = false;
                this.fieldLevelAccess = true;
                this.fieldLevelCheckCount = [];
                const fpages = this.rbacForm.get('fpages').value;
                this.fPagesCheckLength(fpages, pageIds);
                if (this.fieldLevelCheckCount && this.fieldLevelCheckCount?.length > 0) {
                    this.getFieldLevelList('click');
                }
            }
        }
    }
    fPagesCheckLength(fpages, pageIds) {
        if (!fpages || !fpages?.length) {
            if (pageIds?.length) {
                const p = [pageIds];
                this.rbacForm.get('fpages').setValue(p);
            }
        }
    }
    async getPageLevelList(action = null, pageConfig = null) {
        const accessArray = this.rbacForm.get('pageLevelData');
        const formValue = this.rbacForm.getRawValue();
        const pAccessId = this.rbacForm.get('pageList').value.filter(page => !page.disabled);
        const pId = pAccessId?.map(key => key.pageid || key.id);
        // first check exist page config
        if (pageConfig !== null) {
            // check selected value length
            if (formValue.pageLevelData.length) {
                accessArray.clear();
                this.viewArray = [];
            }
            for (const pAccessElement of pAccessId) {
                const id = pAccessElement.id;
                const activeVersion = pAccessElement.activeVersion;
                let tableSchemaConfig = activeVersion.tableschemaconfig;
                const objectType = tableSchemaConfig?.objectType ? tableSchemaConfig.objectType : 'table';
                if (objectType === 'view') {
                    this.viewArray.push(id);
                }
            }
            const filterdPageConfigArray = pId
                .map(id => pageConfig.find(key => key?.page?.id === id))
                .filter(config => config !== undefined);
            for (let i = 0; i < pId.length; i++) {
                let setAccess = '';
                setAccess = this.pageAccessService.getPageAccess(filterdPageConfigArray[i]);
                if (this.isView(pId[i])) {
                    setAccess = '3';
                }
                const pageName = this.loadedPagesList.filter(key => key.id === pId[i]);
                this.getPageAccessArray(pId, i, accessArray, pageName, setAccess, pageConfig);
            }
        }
        this.forActionClick(action, pId, accessArray);
    }
    getVersionAccessArray(existSelectedPageId, pId, i, accessArray, pageName, setAccess, pageConfig) {
        const checkPid = existSelectedPageId.includes(pId[i]);
        if (!checkPid) {
            accessArray.push(new FormGroup({
                pageName: new FormControl(pageName[0]['activeVersion']['pagename']),
                pageid: new FormControl(pId[i]),
                pageAccess: new FormControl(setAccess),
                validity: new FormControl((pageConfig[i]?.conditions && pageConfig[i].conditions.value) || '1'),
                condition: new FormControl(pageConfig[i]?.conditions ? 'days' : 'always'),
                fallbackTo: new FormControl((pageConfig[i]?.conditions && pageConfig[i].conditions.fallbackTo) || 'n')
            }));
        }
    }
    getPageAccessArray(pId, i, accessArray, pageName, setAccess, pageConfig) {
        accessArray.push(new FormGroup({
            pageName: new FormControl(pageName[0]['pagename']),
            pageid: new FormControl(pId[i]),
            pageAccess: new FormControl(setAccess),
            validity: new FormControl((pageConfig[i].conditions && pageConfig[i].conditions.value) || '1'),
            condition: new FormControl(pageConfig[i].conditions ? 'days' : 'always'),
            fallbackTo: new FormControl((pageConfig[i].conditions && pageConfig[i].conditions.fallbackTo) || 'n')
        }));
    }
    forActionClick(action, pId, accessArray) {
        if (action === 'click') {
            const existingValue = this.selectedPageLevelData?.length ? this.selectedPageLevelData : accessArray.getRawValue();
            let pagesFromField = Array.from(new Set([...this.selectedFieldData].map(ele => ele.pageId))).filter(ele => ele);
            if (pId?.length) {
                pagesFromField = pId;
            }
            if (pagesFromField?.length) {
                for (let i = 0; i < pagesFromField?.length; i++) {
                    const pageName = this.pagesList.filter(key => key.id === pagesFromField[i]);
                    if (!existingValue[i]) {
                        const id = pageName[0]?.id;
                        const activeVersion = pageName[0]?.activeVersion;
                        let tableSchemaConfig = activeVersion?.tableschemaconfig;
                        const objectType = tableSchemaConfig?.objectType ? tableSchemaConfig.objectType : 'table';
                        if (objectType === 'view') {
                            this.viewArray.push(id);
                        }
                    }
                }
                accessArray.controls = [];
                accessArray.controls = this.pageAccessService.getAccessArrayOnClick(pagesFromField, this.pagesList, this.selectedFieldData, this.savedPageAccessPatching, existingValue);
                this.savedPageAccessPatching = false;
            }
            else {
                this.savedPageAccessPatching = false;
                accessArray.controls = [];
            }
        }
    }
    checkAccessType(data) {
        if (data?.isfull) {
            return '2';
        }
        else if (data?.ishide) {
            return '4';
        }
        else if (data?.isread) {
            return '3';
        }
        else if (data?.isreadwrite) {
            return '2';
        }
    }
    getFieldLevelList(action = null, fieldConfig = null) {
        const accessArray = this.rbacForm.get('fieldLevelData');
        const formValue = this.rbacForm.getRawValue();
        const pAccessId = this.rbacForm.get('fpages').value;
        const pageIds = this.rbacForm.get('pageList').value;
        // Fieldpagelevel is a variable is the length of the form page and all page other than grid page
        this.fieldLevelCheckCount = pageIds.filter(x => (x.id === (pAccessId && pAccessId[0]?.id)) || x.id === pAccessId);
        const fieldLevel = pageIds.filter(x => (x.id === (pAccessId && pAccessId[0]?.id)) || x.id === pAccessId);
        this.fieldPageLevel = fieldLevel.filter(a => a.activeVersion !== null && a.activeVersion.gridconfig == null)
            .map(a => {
            return {
                id: a.activeVersion.pageid,
                pagename: a.activeVersion.pagename,
                activeVersion: a.activeVersion
            };
        });
        //console.log(this.fieldPageLevel);
        this.checkFieldLevelCondition(fieldLevel, pAccessId);
        this.fieldConfigCheck(fieldConfig, accessArray);
        if (action === 'click') {
            accessArray.controls = [];
            this.pageAccessService.getAssetByPageId(this.pId).subscribe(res => {
                const data = res['data'];
                this.getAccessArrayCheck(data, formValue, accessArray);
            });
        }
        this.showFieldGrid = true;
    }
    checkFieldLevelCondition(fieldLevel, pAccessId) {
        if (fieldLevel.length > 0) {
            this.showFieldValidity = fieldLevel[0].templatejson ? true : false;
            this.fieldVersionCheck(fieldLevel, pAccessId);
        }
        else {
            this.showFieldValidity = pAccessId[0].templatejson ? true : false;
            if (pAccessId[0]['version']) {
                this.pId = pAccessId[0].pageid;
            }
            else {
                this.pId = pAccessId && pAccessId?.length ? pAccessId[0]['id'] : null;
            }
        }
    }
    fieldVersionCheck(fieldLevel, pAccessId) {
        if (fieldLevel[0]['version']) {
            this.pId = fieldLevel[0].pageid;
        }
        else {
            if (Array.isArray(pAccessId)) {
                this.pId = pAccessId && pAccessId?.length ? pAccessId[0]['id'] : null;
            }
            else {
                this.pId = pAccessId;
            }
        }
    }
    fieldConfigCheck(fieldConfig, accessArray) {
        if (fieldConfig !== null) {
            accessArray.controls = [];
            this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(fieldConfig?.map(ele => {
                return {
                    fieldName: ele?.description,
                    access: this.checkAccessType(ele),
                    assetid: ele.assetid,
                    pageId: ele.id
                };
            }), this.selectedFieldData);
            this.existingSelectedFieldData = [...this.selectedFieldData];
            this.pageAccessService.getAssetByPageId(this.pId).subscribe(res => {
                const data = res['data'];
                this.mergedAsset = this.mergeAsset(data, this.assetList);
                if (this.mergedAsset.includes(undefined)) {
                    this.mergedAsset = data;
                    if (this.mergedAsset.length !== data?.length) {
                        this.mergedAsset = data;
                    }
                }
                this.fData = data;
                this.getMergedAsset(accessArray);
            });
        }
    }
    getMergedAsset(accessArray) {
        for (let i = 0; i < this.mergedAsset.length; i++) {
            const access = this.pageAccessService.getAccess(this.mergedAsset[i], this.fieldPageLevel);
            accessArray.push(new FormGroup({
                fieldName: new FormControl(access[i]['displayname']),
                access: new FormControl('2'),
                assetid: new FormControl(access[i]['id']),
                pageId: new FormControl(this.pId),
                validity: new FormControl(this.mergedAsset[i].conditions ? this.mergedAsset[i].conditions.value : '1'),
                condition: new FormControl(this.mergedAsset[i].conditions ? 'days' : 'always'),
                fallbackTo: new FormControl(this.mergedAsset[i].conditions ? this.mergedAsset[i].conditions.fallbackTo : '')
            }));
        }
    }
    getAccessArrayCheck(data, formValue, accessArray) {
        if (data?.length) {
            this.mergedAsset = this.assetList ? this.mergeAsset(data, this.assetList) : data;
            this.checkMergedAsset(data);
            if (formValue.fieldLevelData.length) {
                this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(formValue.fieldLevelData, this.selectedFieldData);
            }
            let access = null;
            if (this.savedFieldPagesPatching?.length) {
                access = this.savedFieldPagesPatching.find(ele => ele.pageid === this.pId)?.access;
                this.savedFieldPagesPatching = this.savedFieldPagesPatching.filter(ele => ele.pageid !== this.pId);
            }
            this.fData = data;
            const existingFieldDataMap = {};
            if (!access && this.selectedFieldData?.length) {
                this.assetList
                    ?.filter(ele => ele.pageId === this.pId)
                    ?.forEach(ele => {
                    existingFieldDataMap[ele.assetid] = ele.access;
                });
            }
            this.getAccessByAsset(accessArray);
        }
        else {
            accessArray.controls = [];
        }
    }
    checkMergedAsset(data) {
        if (this.mergedAsset.includes(undefined)) {
            this.mergedAsset = data;
            if (this.mergedAsset.length !== data.length) {
                this.mergedAsset = data;
            }
        }
    }
    getAccessByAsset(accessArray) {
        for (const asset of this.mergedAsset) {
            const assetAccess = this.pageAccessService.getAccess(asset, this.fieldPageLevel);
            accessArray.push(new FormGroup({
                fieldName: new FormControl(asset['displayname']),
                access: new FormControl(assetAccess ? assetAccess : '2'),
                assetid: new FormControl(asset['id']),
                pageId: new FormControl(this.pId),
                validity: new FormControl(asset.conditions ? asset.conditions.value : '1'),
                condition: new FormControl(asset.conditions ? 'days' : 'always'),
                fallbackTo: new FormControl(asset.conditions ? asset.conditions.fallbackTo : '')
            }));
        }
    }
    mergeAsset(arr1, arr2) {
        return arr1.map((item, _i) => {
            for (const value of arr2) {
                if (item.id === value.id) {
                    return Object.assign({}, item, value);
                }
            }
        });
    }
    submitAlert() {
        if (!this.fieldLevelAccess && this.permissionUpdatedPages.length) {
            $('#submitAlert').modal('show');
        }
        else {
            this.saveRbac();
            //this.pagelevelaccesssavedisable = true; 
            //this.pagelevelaccesscountdisable = true; 
        }
    }
    saveRbac() {
        this.getPageList = true;
        const access = this.rbacForm.getRawValue();
        const pageAccessFormControl = this.rbacForm.get('pageLevelData');
        const userid = this.rbacForm.get('userid').value;
        const roleId = this.rbacForm.get('roleid').value;
        const policyId = this.rbacForm.get('policyid').value;
        if ((this.isPageDeselectSave && this.deselectedItemIds.length > 0) || this.isRemoveAllFields) {
            let selectedId;
            if (this.selectedAccess === 'user') {
                selectedId = this.rbacForm.getRawValue().userid;
            }
            else if (this.selectedAccess === 'role') {
                selectedId = this.rbacForm.getRawValue().roleid;
            }
            else {
                selectedId = this.rbacForm.getRawValue().policyid;
                this.selectedAccess = 'policygroup';
            }
            // Collect asset id's for all deselected page id's
            const deselectedAssets = forkJoin(this.deselectedItemIds.map(id => this.pageAccessService.getAssetByPageId(id).pipe(map(res => res['data'].map(item => ({ assetid: item.id }))))));
            // Make a single API call with all deselected asset IDs
            deselectedAssets.pipe(map(assetIdResponses => [].concat(...assetIdResponses))).subscribe(allDeselectedAssetIds => {
                this.pageAccessService.updateAssetOnDeselect(this.selectedAccess, selectedId, allDeselectedAssetIds).subscribe(() => {
                    this.getConfiguredAssetData(this.selectedAccess, selectedId);
                    this.deselectedItemIds = [];
                });
            });
        }
        const fieldLevelData = access.fieldLevelData;
        this.getFieldLevelByAsset(fieldLevelData);
        let selectedId;
        if (this.selectedAccess === 'user') {
            selectedId = this.rbacForm.getRawValue().userid;
        }
        else if (this.selectedAccess === 'role') {
            selectedId = this.rbacForm.getRawValue().roleid;
        }
        else {
            selectedId = this.rbacForm.getRawValue().policyid;
            this.selectedAccess = 'policygroup';
        }
        this.pageAccessService.createAsset(this.selectedAccess, selectedId, this.fullArray).subscribe(_res => {
            if (this.fieldLevelAccess) {
                this.getConfiguredAssetData(this.selectedAccess, selectedId);
                this.alert.success('Field Access Updated Successfully');
            }
        });
        this.getPageLevelByArray(pageAccessFormControl);
        if (this.updatePage) {
            if (this.selectedAccess === 'policy') {
                this.selectedAccess = 'policygroup';
            }
            this.pageAccessService.updateDynamicPage(this.selectedAccess, this.selectedId, this.fullArray).subscribe(_res => {
                this.permissionUpdatedPages = [];
                if (!this.fieldLevelAccess) {
                    this.getSelectedPages();
                    this.alert.success('Access Updated Successfully');
                }
            }, _err => this.alert.error(AppConstants.errorMessage));
        }
        else {
            this.pageAccessService
                .createAccess(this.fieldLevelAccess, access.accessBy, this.fullArray, userid, roleId, policyId)
                .subscribe(_result => {
                this.permissionUpdatedPages = [];
                this.getSelectedPages();
                this.alert.success('Access Saved Successfully');
            }, _error => this.alert.error(AppConstants.errorMessage));
        }
    }
    getPageLevelByArray(pageLevelData) {
        this.fullArray = pageLevelData?.controls?.map(x => {
            return {
                page: x?.value?.pageid,
                overrideAssetPermissions: this.permissionUpdatedPages.some(pageId => pageId === x?.value?.pageid) || false,
                readwrite: x?.value?.pageAccess === '2' ? true : false,
                read: x?.value?.pageAccess === '3' ? true : false,
                none: x?.value?.pageAccess === '4' ? true : false,
                full: x?.value?.pageAccess === '5' ? true : false,
                touched: x?.touched,
                conditions: x?.value?.condition !== 'always'
                    ? {
                        attribute: 'created',
                        condition: 'lte',
                        value: x?.value?.validity,
                        value_type: 'variable',
                        fallbackTo: x?.value?.fallbackTo,
                        type: 'timestamp'
                    }
                    : null
            };
        });
    }
    getFieldLevelByAsset(fieldLevelData) {
        this.fullArray = fieldLevelData.map(x => {
            const assetData = this.assetList?.filter(a => a.id === x.assetid && a);
            return {
                id: assetData ? assetData[0]?._id : null,
                asset: x.assetid,
                readwrite: x?.access === '2' ? true : false,
                read: x?.access === '3' ? true : false,
                none: x?.access === '4' ? true : false,
                full: x?.access === '5' ? true : false,
                conditions: x.condition !== 'always'
                    ? {
                        attribute: 'created',
                        condition: 'lte',
                        value: x.validity,
                        value_type: 'variable',
                        fallbackTo: x.fallbackTo,
                        type: 'timestamp'
                    }
                    : null
            };
        });
    }
    // edit functionalites based on policy group
    setPolicyLevelPagePatching(pageConfig, assetconfig) {
        const pageIds = pageConfig.map(key => key.pageid);
        const selectedModules = [];
        const uniquePage = [...new Set(pageIds)];
        const selectedPages = uniquePage;
        this.rbacForm.patchValue({ provideAccess: '1' });
        this.pageLevelAccess = this.multiPageAccess = true;
        this.fieldLevelAccess = false;
        const m = this.rbacForm.get('module').value;
        if (m !== '' && m !== null) {
            const newModule = m.concat(selectedModules);
            const uniqueNewModule = [...new Set(newModule)];
            this.rbacForm.get('module').setValue(uniqueNewModule);
        }
        else {
            this.rbacForm.patchValue({ module: selectedModules });
        }
        this.getSelectedPages(selectedPages, pageConfig, assetconfig);
    }
    setPolicyLevelFieldPatching(pageConfig, assetconfig, from = null) {
        const mKey = assetconfig.filter(key => key.modulekey !== null && key.modulekey !== '' && key.isactive !== '' && key.isactive !== null);
        const mmkey = mKey.map(key => key.modulekey);
        const modules = this.moduleList.filter(key => mmkey.includes(key.refKey));
        const pageId = assetconfig.filter(key => key.pageid !== null);
        const pageIds = pageId.map(key => key.pageid);
        let selectedModules;
        selectedModules = [...new Set(modules)];
        const uniquePage = [...new Set(pageIds)];
        const selectedPages = uniquePage;
        this.rbacForm.patchValue({ provideAccess: '2' });
        this.pageLevelAccess = this.multiPageAccess = false;
        this.fieldLevelAccess = true;
        if (from === 'field') {
            const m = this.rbacForm.get('module').value;
            if (m !== '') {
                const mk = selectedModules.concat(m);
                selectedModules = mk;
                this.rbacForm.patchValue({ module: selectedModules });
            }
            const sm = this.rbacForm.get('submodule').value;
            if (sm !== '') {
                this.rbacForm.patchValue({ module: selectedModules });
            }
        }
        else {
            this.rbacForm.patchValue({ module: selectedModules });
        }
        this.getSelectedPages(selectedPages, pageConfig, assetconfig);
    }
    getDataBasedOnPolicy(from = null) {
        const policyids = this.rbacForm.get('policyid').value.map(a => a.id);
        if (policyids.length) {
            this.editPage = true;
            this.pageLevelAccess = false;
            this.fieldLevelAccess = false;
            const f = this.rbacForm.controls['fieldLevelData'];
            f.controls = [];
            const p = this.rbacForm.controls['pageLevelData'];
            p.controls = [];
            for (let j = 0; j < policyids.length; j++) {
                const pageConfig = this.policyGroupData.filter(key => key.id === policyids[j]);
                if (from === 'field') {
                    this.editPage = false;
                    if (pageConfig[0].assetConfigs.length) {
                        this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs, from);
                    }
                    else if (policyids.length === j + 1) {
                        this.showLevelAccess('2');
                    }
                }
                else {
                    this.getCheckPageConfig(pageConfig);
                }
            }
        }
        else {
            this.resetForm('3');
            this.rbacForm.patchValue({ accessBy: '3' });
        }
    }
    getCheckPageConfig(pageConfig) {
        if (pageConfig[0].pageConfigs.length) {
            this.fieldLevelClick = true;
            this.setPolicyLevelPagePatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
        }
        else if (pageConfig[0].assetConfigs.length) {
            const pAccess = this.rbacForm.get('provideAccess').value;
            if (pAccess !== '1') {
                this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
            }
        }
    }
    getDataBasedOnRole(from = null) {
        const roleIds = this.rbacForm.get('roleid').value.map(a => a.id);
        if (roleIds.length) {
            this.editPage = true;
            this.pageLevelAccess = false;
            this.fieldLevelAccess = false;
            const f = this.rbacForm.controls['fieldLevelData'];
            f.controls = [];
            const p = this.rbacForm.controls['pageLevelData'];
            p.controls = [];
            // loop the role ids
            for (let j = 0; j < roleIds.length; j++) {
                const pageConfig = this.roleAddedData.filter(key => key.id === roleIds[j]);
                this.getOrgId(pageConfig);
                if (from === 'field') {
                    this.editPage = false;
                    if (pageConfig[0].assetConfigs.length) {
                        this.setPolicyLevelFieldPatching(pageConfig[0].rolePolicyGroupConfigs, pageConfig[0].assetConfigs, from);
                    }
                    else if (roleIds.length === j + 1) {
                        this.showLevelAccess('2');
                    }
                }
                else {
                    this.getCheckRolePolicyGroup(pageConfig);
                }
            }
        }
        else {
            this.resetForm('2');
            this.rbacForm.patchValue({ accessBy: '2' });
        }
    }
    getOrgId(pageConfig) {
        if (pageConfig?.length) {
            this.organisationid = pageConfig[0]?.organizationid;
        }
    }
    getCheckRolePolicyGroup(pageConfig) {
        if (pageConfig[0].rolePolicyGroupConfigs.length) {
            this.setPolicyLevelPagePatching(pageConfig[0].rolePolicyGroupConfigs, pageConfig[0].assetConfigs);
        }
        else if (pageConfig[0].assetConfigs.length) {
            const pAccess = this.rbacForm.get('provideAccess').value;
            if (pAccess !== '1') {
                this.setPolicyLevelFieldPatching(pageConfig[0].rolePolicyGroupConfigs, pageConfig[0].assetConfigs);
            }
        }
    }
    getRoleAndPolicyData(from = null) {
        const userIds = this.rbacForm.get('userid').value.map(a => a.id);
        if (userIds.length) {
            this.editPage = true;
            this.pageLevelAccess = false;
            this.fieldLevelAccess = false;
            const f = this.rbacForm.controls['fieldLevelData'];
            f.controls = [];
            const p = this.rbacForm.controls['pageLevelData'];
            p.controls = [];
            // loop the role ids
            for (let j = 0; j < userIds.length; j++) {
                const pageConfig = this.userList.filter(key => key.id === userIds[j]);
                if (from === 'field') {
                    this.editPage = false;
                    if (pageConfig[0].assetConfigs.length) {
                        this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs, from);
                    }
                    else if (userIds.length === j + 1) {
                        this.showLevelAccess('2');
                    }
                }
                else {
                    this.getCheckPolicyLevelField(pageConfig);
                }
            }
        }
        else {
            this.resetForm('1');
            this.rbacForm.patchValue({ accessBy: '1' });
        }
    }
    getCheckPolicyLevelField(pageConfig) {
        if (pageConfig[0].pageConfigs.length) {
            this.setPolicyLevelPagePatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
        }
        else if (pageConfig[0].assetConfigs.length) {
            const pAccess = this.rbacForm.get('provideAccess').value;
            if (pAccess !== '1') {
                this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
            }
        }
    }
    resetForm(id = null, clear = null) {
        this.subModuleList = this.pageData = this.selectedPageData = [];
        this.fieldLevelCheckCount = [];
        this.pagelevelaccesscount = [];
        this.pagelevelaccesssavedisable = true;
        this.pageLevelAccess = this.fieldLevelAccess = false;
        this.enablesave = true;
        this.pagelevelaccesscountdisable = true;
        const f = this.rbacForm.controls['fieldLevelData'];
        f.controls = [];
        const p = this.rbacForm.controls['pageLevelData'];
        p.controls = [];
        this.policyGroupPages = [];
        this.selectedAccess = '';
        this.selectedName = '';
        this.permissionUpdatedPages = [];
        this.rbacForm.reset();
        if (id !== null) {
            this.rbacForm.patchValue({ accessBy: id });
        }
        else if (clear !== null) {
            this.AddComponent.resetForm();
        }
    }
    redirectList() {
        this.router.navigateByUrl('/pages/rbac/page-access/page-access-list');
    }
    saveAccessPatching() {
        this.savedFieldPagesPatching = [];
        this.savedPageAccessPatching = false;
        if (this.rbacForm.get('provideAccess')?.value === '2') {
            this.savedPageAccessPatching = true;
        }
        else {
            const ppId = this.rbacForm.get('pageLevelData').value;
            this.savedFieldPagesPatching = [];
            if (ppId?.length) {
                ppId.forEach(element => {
                    const selectedObj = { pageid: element?.pageid, access: element?.pageAccess };
                    this.savedFieldPagesPatching.push(selectedObj);
                });
            }
        }
        this.alert.success('Temporarily saved Data for changes');
    }
    changeFieldAccess(_index) {
        const accessArray = this.rbacForm.get('pageLevelData');
        const fieldValue = this.rbacForm.get('fieldLevelData').value.map(el => el.access);
        let maxOcc = { element: null, occured: 0 };
        fieldValue.reduce((acc, el) => {
            acc[el] = acc[el] ? acc[el] + 1 : 1;
            if (acc[el] > maxOcc.occured) {
                maxOcc = { element: el, occured: acc[el] };
            }
            return acc;
        }, {});
        const pageIndex = this.rbacForm
            .get('pageLevelData')
            .value.findIndex(el => el.pageid === this.rbacForm.get('fieldLevelData').value[0].pageId);
        if (pageIndex > -1) {
            accessArray.push(new FormGroup({
                pageName: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].pageName),
                pageid: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].pageid),
                pageAccess: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].pageAccess),
                validity: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].validity),
                fallbackTo: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].fallbackTo),
                condition: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].condition)
            }));
            accessArray.removeAt(pageIndex);
            const isExist = this.selectedPageAccessChanges.findIndex(el => el.pageid === this.rbacForm.get('pageLevelData').value[pageIndex].pageid);
            if (isExist > -1) {
                this.selectedPageAccessChanges.splice(isExist, 1);
            }
        }
    }
    changePageAccess(index) {
        const pageLevelData = this.rbacForm.get('pageLevelData');
        const selectedValue = pageLevelData.at(index).value;
        const isExist = this.selectedPageAccessChanges?.findIndex(el => el?.pageid === selectedValue.pageid);
        if (isExist > -1) {
            this.selectedPageAccessChanges[isExist].pageAccess = selectedValue.pageAccess;
        }
        else {
            this.selectedPageAccessChanges.push(selectedValue);
        }
        if (selectedValue.pageAccess === '4') {
            this.setDefaultPageAccess(pageLevelData, index);
        }
    }
    setDefaultPageAccess(pageAccessData, i) {
        pageAccessData.at(i).get('condition').setValue('always');
        pageAccessData.at(i).get('validity').setValue('1');
        pageAccessData.at(i).get('fallbackTo').setValue('n');
    }
    checkObjectType(schema, table) {
        return new Promise((resolve) => {
            this.pageAccessService.checkObjectType(schema, table).subscribe(res => {
                resolve(res.data);
            });
        });
    }
    isView(pageId) {
        if (this.viewArray.some(element => element === pageId)) {
            return true;
        }
        return false;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PageaccessComponent, deps: [{ token: i0.Injector }, { token: i1.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: i2.DataStoreService }, { token: i3.Router }, { token: i4.AlertService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PageaccessComponent, selector: "lib-pageaccess", viewQueries: [{ propertyName: "AddComponent", first: true, predicate: ManageAccessRadioComponent, descendants: true }], ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"row rbac-card\">\r\n  <div class=\"col-12\">\r\n    <mat-card class=\"mat-card\">\r\n      <mat-card-content class=\"p-2\">\r\n        <form [formGroup]=\"rbacForm\">\r\n          <app-manage-access-radio (accessBy)=\"accessBy($event)\" (userDropdown)=\"userDropdown($event)\"\r\n            (roleDropdown)=\"roleDropdown($event)\" (policyDropdown)=\"policyDropdown($event)\"\r\n            (dropDownSelectedValues)=\"dropDownSelectedValues($event)\"></app-manage-access-radio>\r\n          <h3 class=\"radio-title mt-1 mb-2 pa-title\">Page Access Management</h3>\r\n          <mat-card class=\"mat-card\">\r\n            <mat-card-content class=\"p-2\">\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"false\">\r\n                  <label class=\"radio-title\">Modules</label>\r\n                  <!-- <angular2-multiselect [data]=\"moduleList\" [settings]=\"moduleDropdownSettings\"\r\n                    onSelect=\"loadSubModule('click')\" onDeSelect=\"removeSubModule($event)\"\r\n                    onSelectAll=\"loadSubModule('click')\" onDeSelectAll=\"removeAllSubModule()\"\r\n                    formControlName=\"module\"></angular2-multiselect> -->\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"false\">\r\n                  <label class=\"radio-title\">Sub Modules</label>\r\n                  <!-- <angular2-multiselect [data]=\"subModuleList\" [settings]=\"submoduleDropdownSettings\"\r\n                    onSelect=\"loadSubModulePage('click')\" onDeSelect=\"removeSubModulePage($event, 'submodule')\"\r\n                    onSelectAll=\"loadSubModulePage('click')\" onDeSelectAll=\"removeAllSubModulePage()\"\r\n                    formControlName=\"submodule\">\r\n                  </angular2-multiselect> -->\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 mb-3\">\r\n                  <p-accordion class=\"w-full policygroup-accordion\" iconPos=\"endVal\">\r\n                    <p-accordionTab>\r\n                      <ng-template pTemplate=\"header\">\r\n                        <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                          <span class=\"font-bold\">\r\n                            <label aria-labelledby=\"policyGroupList\" for=\"policyGroupList\"\r\n                              class=\"mb-0 referral-form-labels\">Pages\r\n\r\n                              <span *ngIf=\"selectedPageData.length > 0\"\r\n                                class=\"pg-count ml-2\">{{selectedPageData.length}}</span>\r\n                            </label>\r\n                          </span>\r\n                        </span>\r\n                      </ng-template>\r\n                      <!-- <angular2-multiselect [data]=\"pagesList\" [settings]=\"pageDropdownSettings\"\r\n                        (onSelect)=\"populatePage('click',true,$event)\" fieldKey=\"SETTINGS_PAG_ACC_PAGE\"\r\n                        (onDeSelect)=\"populatePage('click',false,$event)\"\r\n                        (onSelectAll)=\"populatePage('click',true,$event)\" (onDeSelectAll)=\"removeAllPopulatePage()\"\r\n                        formControlName=\"pageList\"></angular2-multiselect> -->\r\n                      <p-multiSelect [options]=\"pagesList\" formControlName=\"pageList\" fieldKey=\"SETTINGS_PAG_ACC_PAGE\"\r\n                        defaultLabel=\"Select Pages\" display=\"chip\" optionLabel=\"pagename\" [autoDisplayFirst]=\"false\"\r\n                        styleClass=\"policygroup-v2 w-100\" (onChange)=\"populatePage('click',true,$event)\">\r\n                        <ng-template let-value pTemplate=\"selectedItems\">\r\n                          <div *ngFor=\"let option of value\">\r\n                            <div #selectedpg class=\"p-multiselect-token\" [ngClass]=\"option.disabled ? 'disabled' : '' \"\r\n                              id=\"{{option.id}}\">\r\n                              <span class=\"policygroupname\">\r\n                                {{ option.pagename }}\r\n                              </span>\r\n                              <em class=\"pi pi-times-circle ml-2 clear-icon right-sec\" *ngIf=\"!option.disabled\"\r\n                                role=\"button\" (click)=\"removeValue($event, selectedpg)\"></em>\r\n                            </div>\r\n                          </div>\r\n                          <div *ngIf=\"!value || value.length === 0\">Select Pages</div>\r\n                        </ng-template>\r\n                      </p-multiSelect>\r\n                    </p-accordionTab>\r\n                  </p-accordion>\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n                  <label class=\"radio-title d-block required\">Provide Access by </label>\r\n                  <mat-radio-group formControlName=\"provideAccess\" (change)=\"showLevelAccess($event.value)\">\r\n                    <mat-radio-button value=\"1\" fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL\">Page\r\n                      Level&nbsp;&nbsp;</mat-radio-button>\r\n                    <mat-radio-button value=\"2\" fieldKey=\"SETTINGS_PAG_ACC_PAG_FIELD_LEVEL\">Field\r\n                      Level</mat-radio-button>\r\n                  </mat-radio-group>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"fieldLevelAccess\">\r\n                  <label class=\"radio-title\">Select Page</label>\r\n                  <br />\r\n                  <p-dropdown id=\"selectpage\" ariaLabelledBy=\"selectpage\" [options]=\"selectedPageData\"\r\n                    fieldKey=\"SETTINGS_PAG_ACC_PAGE\" [filter]=\"true\"\r\n                    [showClear]=\"fieldLevelCheckCount && fieldLevelCheckCount?.length\" [resetFilterOnHide]=\"true\"\r\n                    (onChange)=\"getFieldLevelList('click')\" formControlName=\"fpages\" optionLabel=\"pagename\"\r\n                    optionValue=\"id\" placeholder=\"Select a page\" class=\"dd-stand-size\">\r\n                    <ng-template let-item pTemplate=\"selectedItem\">\r\n                      <div pTooltip=\"{{item?.pagename}}\" tooltipPosition=\"top\" class=\"text-truncate\"> {{ item?.pagename\r\n                        }}</div>\r\n                    </ng-template>\r\n                    <ng-template let-object pTemplate=\"item\">\r\n                      {{ object.pagename }}\r\n                    </ng-template>\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n\r\n              <div *ngIf=\"pageLevelAccess\" class=\"row\">\r\n                <div class=\"col-12 mt-3 pageLevelAccessTable\">\r\n                  <table aria-describedby=\"pageLevelAccessTable\" class=\"table table-bordered\">\r\n                    <col />\r\n                    <col style=\"width: 120px\" />\r\n                    <col style=\"width: 120px\" />\r\n                    <col style=\"width: 120px\" />\r\n                    <thead>\r\n                      <th class=\"text-left\">Page Name</th>\r\n                      <th class=\"text-center\">R</th>\r\n                      <th class=\"text-center\">RW</th>\r\n                      <th class=\"text-center\">RWD</th>\r\n                      <th class=\"text-center\">None</th>\r\n                      <th class=\"text-center\">Validity</th>\r\n                    </thead>\r\n                    <tbody>\r\n                      <ng-container formArrayName=\"pageLevelData\"\r\n                        *ngFor=\"let fAccess of rbacForm.get('pageLevelData')['controls']; let i = index\">\r\n                        <tr [formGroup]=\"rbacForm.get('pageLevelData')['controls'][i]\">\r\n                          <td class=\"text-left\">\r\n                            <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                              formControlName=\"pageName\" placeholder=\"pageleveldata\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\" type=\"radio\" value=\"3\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\" type=\"radio\" value=\"3\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ\">\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE\" type=\"radio\" value=\"2\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE\" type=\"radio\" value=\"2\" [attr.disabled]=\"isView(fAccess?.value?.pageid)? true : null\"  >\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE_DELETE\" type=\"radio\" value=\"5\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE_DELETE\" type=\"radio\" value=\"5\" [attr.disabled]=\"isView(fAccess?.value?.pageid)? true: null\"  >\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_NONE\" type=\"radio\" value=\"4\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_NONE\" type=\"radio\" value=\"4\" [attr.disabled]=\"isView(fAccess?.value?.pageid)? true: null\"  >\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <ng-container *ngIf=\"\r\n                                  rbacForm.get('pageList')?.value[i]?.activeVersion?.gridconfig ||\r\n                                  rbacForm.get('pageList')?.value[i]?.gridconfig\r\n                                \">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" [disabled]=\"fAccess?.value?.pageAccess === '4'\"\r\n                                optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <p-inputNumber type=\"number\" class=\"validity\"\r\n                                *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [readonly]=\"fAccess?.value?.pageAccess === '4'\" [min]=\"1\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_VALIDITY\" formControlName=\"validity\"\r\n                                mode=\"decimal\"></p-inputNumber>\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.pageAccess === '3' || fAccess?.value?.pageAccess === '4'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </ng-container>\r\n                          </td>\r\n                        </tr>\r\n                      </ng-container>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\"\r\n                *ngIf=\"showFieldGrid && fieldLevelCheckCount?.length > 0 && fieldLevelAccess && fieldPageLevel?.length > 0\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"table-responsive\">\r\n                    <table aria-describedby=\"fieldLevelAccessTable\" class=\"table table-bordered\">\r\n                      <col />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <thead>\r\n                        <th class=\"text-left\">Field Name</th>\r\n                        <th class=\"text-center\">Read</th>\r\n                        <th class=\"text-center\">Write</th>\r\n                        <th class=\"text-center\">None</th>\r\n                        <th class=\"text-center\" *ngIf=\"showFieldValidity\">Validity</th>\r\n                      </thead>\r\n                      <tbody>\r\n                        <ng-container formArrayName=\"fieldLevelData\"\r\n                          *ngFor=\"let fAccess of rbacForm.get('fieldLevelData')['controls']; let i = index\">\r\n                          <tr [formGroupName]=\"i\">\r\n                            <td class=\"text-left\">\r\n                              {{ fData[i]['displayname'] }}\r\n\r\n                              <input type=\"hidden\" formControlName=\"assetid\" value=\"{{ fData[i]['id'] }}\" />\r\n                              <input type=\"hidden\" formControlName=\"pageId\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"3\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"3\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"2\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"2\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"4\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"4\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\" *ngIf=\"showFieldValidity\">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\"\r\n                                [disabled]=\"fAccess?.value?.access === '4'\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <input type=\"number\" class=\"validity\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [min]=\"1\" formControlName=\"validity\" [readonly]=\"fAccess?.value?.access === '4'\"\r\n                                style=\"width: 50px; margin-left: 15px\" pInputText />\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.access === '4' || fAccess?.value?.access === '3'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </td>\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- This code for field access for grid page -->\r\n              <div class=\"row\"\r\n                *ngIf=\"showFieldGrid && fieldLevelCheckCount?.length > 0 && fieldLevelAccess && fieldPageLevel?.length === 0\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"table-responsive\">\r\n                    <table aria-describedby=\"fieldLevelAccessTable\" class=\"table table-bordered\">\r\n                      <col />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <!-- <col style=\"width: 120px\" /> -->\r\n                      <thead>\r\n                        <tr>\r\n                          <th class=\"text-left\">Field Name</th>\r\n                          <th class=\"text-center\">Read</th>\r\n                          <!-- <th class=\"text-center\">Write</th> -->\r\n                          <th class=\"text-center\">None</th>\r\n                          <th class=\"text-center\" *ngIf=\"showFieldValidity\">Validity</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <ng-container formArrayName=\"fieldLevelData\"\r\n                          *ngFor=\"let fAccess of rbacForm.get('fieldLevelData')['controls']; let i = index\">\r\n                          <tr [formGroupName]=\"i\">\r\n                            <td class=\"text-left\">\r\n                              {{ fData[i]['displayname'] }}\r\n                              <input type=\"hidden\" formControlName=\"assetid\" value=\"{{ fData[i]['id'] }}\" />\r\n                              <input type=\"hidden\" formControlName=\"pageId\" name=\"permissiongroup_{{i}}\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"3\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"3\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <!-- <td class=\"text-center\">\r\n                              <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\" value=\"2\" />\r\n                            </td> -->\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"4\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"4\"[attr.disabled]=\"isView(pId)? true: null\"  >\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\" *ngIf=\"showFieldValidity\">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\"\r\n                                [disabled]=\"fAccess?.value?.access === '4'\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <input type=\"number\" class=\"validity\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [min]=\"1\" formControlName=\"validity\" [readonly]=\"fAccess?.value?.access === '4'\"\r\n                                style=\"width: 50px; margin-left: 15px\" pInputText />\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.access === '4' || fAccess?.value?.access === '3'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </td>\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </form>\r\n        <div class=\"mt-3\" *ngIf=\"policyGroupPages.length && !fieldLevelAccess && selectedAccess === 'role'\">\r\n          <p-accordion class=\"w-full dynamic-search\" iconPos=\"endVal\">\r\n            <p-accordionTab>\r\n              <ng-template pTemplate=\"header\">\r\n                <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                  <span class=\"font-bold\">Policy Groups associated with {{ selectedName }} Role</span>\r\n                </span>\r\n              </ng-template>\r\n              <mat-card class=\"mt-2\">\r\n                <mat-card-content>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-12 mt-1\" *ngFor=\"let policyGroup of policyGroupPages\">\r\n                      <div class=\"radio-title mb-2\">Policy Group: {{ policyGroup?.policygroup?.policygroupname }}</div>\r\n                      <!-- It shows associated Roles -->\r\n                      <div class=\"table-responsive\">\r\n                        <table id=\"policyGroupTable\" aria-describedby=\"policyGroupTable\" class=\"table table-bordered\">\r\n                          <col />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\" class=\"text-left\">Page Name</th>\r\n                              <th scope=\"col\" class=\"text-center\">R</th>\r\n                              <th scope=\"col\" class=\"text-center\">RW</th>\r\n                              <th scope=\"col\" class=\"text-center\">RWD</th>\r\n                              <th scope=\"col\" class=\"text-center\">None</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <ng-container *ngFor=\"let page of policyGroup?.policygrouppage                        \">\r\n                              <tr>\r\n                                <td class=\"text-left\">\r\n                                  <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                                    title=\"page?.page?.activeVersion?.pagename\"\r\n                                    [value]=\"page?.page[0]?.activeVersion?.pagename\" />\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.read\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.read\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.readwrite\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.readwrite\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.full\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.full\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.hide\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.hide\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                              </tr>\r\n                            </ng-container>\r\n                            <ng-container *ngIf=\"policyGroupPages?.length === 0\">\r\n                              <tr>\r\n                                <td class=\"text-center\" colspan=\"4\">No pages associated with Policy Group.</td>\r\n                              </tr>\r\n                            </ng-container>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </p-accordionTab>\r\n          </p-accordion>\r\n\r\n        </div>\r\n        <div class=\"mt-3\" *ngIf=\"policyGroupRolePages.length && !fieldLevelAccess && selectedAccess === 'policygroup'\">\r\n          <p-accordion class=\"w-full dynamic-search\" iconPos=\"endVal\">\r\n            <p-accordionTab>\r\n              <ng-template pTemplate=\"header\">\r\n                <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                  <span class=\"font-bold\">Roles associated with {{ selectedName }} Policy Group</span>\r\n                </span>\r\n              </ng-template>\r\n              <mat-card class=\"mt-2\">\r\n                <mat-card-content>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-12 mt-1\" *ngFor=\"let role of policyGroupRolePages\">\r\n                      <div class=\"radio-title mb-2\">Role: {{ role?.role?.name }}</div>\r\n                      <!-- It shows associated policygroups -->\r\n                      <div class=\"table-responsive\">\r\n                        <table id=\"policyGroupTable\" aria-describedby=\"policyGroupTable\" class=\"table table-bordered\">\r\n                          <col />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\" class=\"text-left\">Page Name</th>\r\n                              <th scope=\"col\" class=\"text-center\">R</th>\r\n                              <th scope=\"col\" class=\"text-center\">RW</th>\r\n                              <th scope=\"col\" class=\"text-center\">RWD</th>\r\n                              <th scope=\"col\" class=\"text-center\">None</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <ng-container *ngFor=\"let page of role?.rolepage\">\r\n                              <tr>\r\n                                <td class=\"text-left\">\r\n                                  <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                                    title=\"page?.page?.activeVersion?.pagename\"\r\n                                    [value]=\"page?.page[0]?.activeVersion?.pagename\" />\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.read\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.read\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.readwrite\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.readwrite\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.full\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.full\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.hide\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.hide\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                              </tr>\r\n                            </ng-container>\r\n                            <ng-container *ngIf=\"policyGroupRolePages?.length === 0\">\r\n                              <tr>\r\n                                <td class=\"text-center\" colspan=\"4\">No pages associated with Role.</td>\r\n                              </tr>\r\n                            </ng-container>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </p-accordionTab>\r\n          </p-accordion>\r\n\r\n        </div>\r\n        <div class=\"text-right mt-3\" *ngIf=\"multiPageAccess\">\r\n          <!-- <button class=\"btn btn-primary mr-2\" fieldKey=\"SETTINGS_PAG_ACC_BACK\" (click)=\"redirectList()\">Back</button> -->\r\n          <!-- <button class=\"btn btn-cancel mr-2\" fieldKey=\"SETTINGS_PAG_ACC_CLEAR\" (click)=\"resetForm()\">Clear</button> -->\r\n          <button class=\"btn btn-primary\" fieldKey=\"SETTINGS_PAG_ACC_SAVE\" (click)=\"submitAlert()\"\r\n            [disabled]=\"(pagelevelaccesssavedisable && pagelevelaccesscountdisable) || (enablesave && pagelevelaccesscount && pagelevelaccesscount?.length > 0)\">Save</button>\r\n        </div>\r\n        <div class=\"text-right mt-3\" *ngIf=\"!multiPageAccess\">\r\n          <!-- <button class=\"btn btn-primary mr-2\" fieldKey=\"SETTINGS_PAG_ACC_BACK\" (click)=\"redirectList()\">Back</button> -->\r\n          <!-- <button class=\"btn btn-cancel mr-2\" fieldKey=\"SETTINGS_PAG_ACC_CLEAR\" (click)=\"resetForm()\">Clear</button> -->\r\n          <button class=\"btn btn-primary\" fieldKey=\"SETTINGS_PAG_ACC_SAVE\" (click)=\"submitAlert()\"\r\n            [disabled]=\"((multiPageAccess) || (fieldLevelCheckCount && fieldLevelCheckCount?.length === 0) || (enablesave && fieldLevelCheckCount && fieldLevelCheckCount?.length > 0) || (!pagelevelaccesscount || pagelevelaccesscount?.length === 0))\">Save</button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal\" id=\"submitAlert\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <p>Field Level Access is already present for this Page. Modifying the Page Level Access will remove all Field\r\n          Level\r\n          Access. Do you want to proceed?</p>\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"saveRbac()\">\r\n            Yes\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\"\r\n            (click)=\"getSelectedPages()\">Cancel</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".mat-card-content .mat-radio-group .mat-radio-button{padding-right:10px;font-family:Roboto,sans-serif!important}.toggleleft{font-size:var(--font-14);font-weight:600;display:block;padding-bottom:13px}:host ::ng-deep .p-dropdown.nobg{background-color:transparent;border:none}:host ::ng-deep .p-dropdown.nobg:hover,:host ::ng-deep .p-dropdown.nobg:focus{background-color:transparent!important;border:none!important}.pageLevelAccessTable table thead tr th,.pageLevelAccessTable table tbody tr td{vertical-align:top;color:var(--text-dark)}.pageLevelAccessTable table thead tr th input,.pageLevelAccessTable table tbody tr td input{background:var(--bg-light);color:var(--text-dark);font-size:var(--font-15)!important}.pageLevelAccessTable table thead tr th a:hover,.pageLevelAccessTable table tbody tr td a:hover{text-decoration:none}:host ::ng-deep .p-inputtext.validity{height:30px;line-height:13px}:host ::ng-deep .p-inputnumber-input{height:30px;width:50px;margin-left:15px}:host ::ng-deep .p-dropdown.condition{height:35px;line-height:18px}@media screen and (max-width: 990px){:host ::ng-deep .selected-list .c-list{width:calc(100% - 35px)!important}.pageLevelAccessTable{width:100%;overflow:auto}.pageLevelAccessTable .table{margin-bottom:60px}}:host ::ng-deep .dynamic-search .p-component{font-size:var(--font-13)}:host ::ng-deep .dynamic-search .p-component .p-accordion-toggle-icon{margin-top:-8px;position:absolute;right:.5em;top:50%;font-size:var(--font-13);color:var(--primary)}:host ::ng-deep .dynamic-search .p-component .head-text span{color:var(--primary);font-size:var(--font-16);font-weight:400}:host ::ng-deep .dynamic-search .error-text{font-size:var(--font-12)}:host ::ng-deep .policygroup-v2 .selected-list .c-list .c-token{background-color:#f6fcff;color:#000;border:1px solid #D9D9D9;width:100%;margin:3px 0}:host ::ng-deep .policygroup-v2 .selected-list .c-list .c-token .c-remove{position:absolute;right:12px;top:50%;transform:translateY(-50%);width:10px;height:10px;margin-top:-5px;opacity:.8}:host ::ng-deep .policygroup-v2 .selected-list .c-list .c-token .c-remove svg{fill:#000;border:1px solid #000;border-radius:100%;width:14px;height:14px;padding:2px}:host ::ng-deep .policygroup-v2 .clear-all{display:none}:host ::ng-deep .rbac-card .dd-stand-size .p-dropdown{width:100%!important}:host ::ng-deep .pa-title{margin-top:-5px}.radio-button-container{position:relative;cursor:pointer;-webkit-user-select:none;user-select:none}.radio-button-container input{position:absolute;opacity:0;cursor:pointer;text-indent:-9000px}.checkmark{position:absolute;top:0;left:-10.5px;height:18px;width:18px;background-color:#0000;border-radius:50%;border:2px solid #D6D5D5;transition:all .3s}.radio-button-container:hover input~.checkmark{border-color:var(--primary)}.radio-button-container:focus input~.checkmark{outline:0;box-shadow:0 0 0 .2rem #0086d1}.radio-button-container input:checked~.checkmark{background-color:#0000;border-color:var(--primary)}.checkmark:after{content:\"\";position:absolute;display:none}.radio-button-container input:checked~.checkmark:after{display:block}.radio-button-container .checkmark:after{top:3px;left:3px;width:8px;height:8px;border-radius:50%;background:var(--primary)}.radio-button-container input[type=radio]:disabled+span.checkmark{opacity:.8;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i1.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "directive", type: i6.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "directive", type: i7.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { kind: "component", type: i8.Dropdown, selector: "p-dropdown", inputs: ["id", "scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "dataKey", "filterBy", "filterFields", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "focusOnHover", "selectOnFocus", "autoOptionFocus", "autofocusFilter", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "component", type: i9.Accordion, selector: "p-accordion", inputs: ["multiple", "style", "styleClass", "expandIcon", "collapseIcon", "activeIndex", "selectOnFocus", "headerAriaLevel"], outputs: ["onClose", "onOpen", "activeIndexChange"] }, { kind: "component", type: i9.AccordionTab, selector: "p-accordionTab", inputs: ["id", "header", "headerStyle", "tabStyle", "contentStyle", "tabStyleClass", "headerStyleClass", "contentStyleClass", "disabled", "cache", "transitionOptions", "iconPos", "selected", "headerAriaLevel"], outputs: ["selectedChange"] }, { kind: "directive", type: i10.InputText, selector: "[pInputText]" }, { kind: "component", type: i11.InputNumber, selector: "p-inputNumber", inputs: ["showButtons", "format", "buttonLayout", "inputId", "styleClass", "style", "placeholder", "size", "maxlength", "tabindex", "title", "ariaLabelledBy", "ariaLabel", "ariaRequired", "name", "required", "autocomplete", "min", "max", "incrementButtonClass", "decrementButtonClass", "incrementButtonIcon", "decrementButtonIcon", "readonly", "step", "allowEmpty", "locale", "localeMatcher", "mode", "currency", "currencyDisplay", "useGrouping", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "inputStyle", "inputStyleClass", "showClear", "disabled"], outputs: ["onInput", "onFocus", "onBlur", "onKeyDown", "onClear"] }, { kind: "component", type: i12.MultiSelect, selector: "p-multiSelect", inputs: ["id", "ariaLabel", "style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize", "selectAll", "focusOnHover", "filterFields", "selectOnFocus", "autoOptionFocus"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove", "onSelectAllChange"] }, { kind: "directive", type: i13.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { kind: "component", type: i14.AlertComponent, selector: "app-alert" }, { kind: "component", type: i15.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i15.MatCardContent, selector: "mat-card-content" }, { kind: "directive", type: i16.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { kind: "component", type: i16.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { kind: "component", type: i17.ManageAccessRadioComponent, selector: "app-manage-access-radio", inputs: ["reloadForm"], outputs: ["accessBy", "policyDropdown", "roleDropdown", "userDropdown", "dropDownSelectedValues"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PageaccessComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-pageaccess', template: "<app-alert></app-alert>\r\n<div class=\"row rbac-card\">\r\n  <div class=\"col-12\">\r\n    <mat-card class=\"mat-card\">\r\n      <mat-card-content class=\"p-2\">\r\n        <form [formGroup]=\"rbacForm\">\r\n          <app-manage-access-radio (accessBy)=\"accessBy($event)\" (userDropdown)=\"userDropdown($event)\"\r\n            (roleDropdown)=\"roleDropdown($event)\" (policyDropdown)=\"policyDropdown($event)\"\r\n            (dropDownSelectedValues)=\"dropDownSelectedValues($event)\"></app-manage-access-radio>\r\n          <h3 class=\"radio-title mt-1 mb-2 pa-title\">Page Access Management</h3>\r\n          <mat-card class=\"mat-card\">\r\n            <mat-card-content class=\"p-2\">\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"false\">\r\n                  <label class=\"radio-title\">Modules</label>\r\n                  <!-- <angular2-multiselect [data]=\"moduleList\" [settings]=\"moduleDropdownSettings\"\r\n                    onSelect=\"loadSubModule('click')\" onDeSelect=\"removeSubModule($event)\"\r\n                    onSelectAll=\"loadSubModule('click')\" onDeSelectAll=\"removeAllSubModule()\"\r\n                    formControlName=\"module\"></angular2-multiselect> -->\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"false\">\r\n                  <label class=\"radio-title\">Sub Modules</label>\r\n                  <!-- <angular2-multiselect [data]=\"subModuleList\" [settings]=\"submoduleDropdownSettings\"\r\n                    onSelect=\"loadSubModulePage('click')\" onDeSelect=\"removeSubModulePage($event, 'submodule')\"\r\n                    onSelectAll=\"loadSubModulePage('click')\" onDeSelectAll=\"removeAllSubModulePage()\"\r\n                    formControlName=\"submodule\">\r\n                  </angular2-multiselect> -->\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 mb-3\">\r\n                  <p-accordion class=\"w-full policygroup-accordion\" iconPos=\"endVal\">\r\n                    <p-accordionTab>\r\n                      <ng-template pTemplate=\"header\">\r\n                        <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                          <span class=\"font-bold\">\r\n                            <label aria-labelledby=\"policyGroupList\" for=\"policyGroupList\"\r\n                              class=\"mb-0 referral-form-labels\">Pages\r\n\r\n                              <span *ngIf=\"selectedPageData.length > 0\"\r\n                                class=\"pg-count ml-2\">{{selectedPageData.length}}</span>\r\n                            </label>\r\n                          </span>\r\n                        </span>\r\n                      </ng-template>\r\n                      <!-- <angular2-multiselect [data]=\"pagesList\" [settings]=\"pageDropdownSettings\"\r\n                        (onSelect)=\"populatePage('click',true,$event)\" fieldKey=\"SETTINGS_PAG_ACC_PAGE\"\r\n                        (onDeSelect)=\"populatePage('click',false,$event)\"\r\n                        (onSelectAll)=\"populatePage('click',true,$event)\" (onDeSelectAll)=\"removeAllPopulatePage()\"\r\n                        formControlName=\"pageList\"></angular2-multiselect> -->\r\n                      <p-multiSelect [options]=\"pagesList\" formControlName=\"pageList\" fieldKey=\"SETTINGS_PAG_ACC_PAGE\"\r\n                        defaultLabel=\"Select Pages\" display=\"chip\" optionLabel=\"pagename\" [autoDisplayFirst]=\"false\"\r\n                        styleClass=\"policygroup-v2 w-100\" (onChange)=\"populatePage('click',true,$event)\">\r\n                        <ng-template let-value pTemplate=\"selectedItems\">\r\n                          <div *ngFor=\"let option of value\">\r\n                            <div #selectedpg class=\"p-multiselect-token\" [ngClass]=\"option.disabled ? 'disabled' : '' \"\r\n                              id=\"{{option.id}}\">\r\n                              <span class=\"policygroupname\">\r\n                                {{ option.pagename }}\r\n                              </span>\r\n                              <em class=\"pi pi-times-circle ml-2 clear-icon right-sec\" *ngIf=\"!option.disabled\"\r\n                                role=\"button\" (click)=\"removeValue($event, selectedpg)\"></em>\r\n                            </div>\r\n                          </div>\r\n                          <div *ngIf=\"!value || value.length === 0\">Select Pages</div>\r\n                        </ng-template>\r\n                      </p-multiSelect>\r\n                    </p-accordionTab>\r\n                  </p-accordion>\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n                  <label class=\"radio-title d-block required\">Provide Access by </label>\r\n                  <mat-radio-group formControlName=\"provideAccess\" (change)=\"showLevelAccess($event.value)\">\r\n                    <mat-radio-button value=\"1\" fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL\">Page\r\n                      Level&nbsp;&nbsp;</mat-radio-button>\r\n                    <mat-radio-button value=\"2\" fieldKey=\"SETTINGS_PAG_ACC_PAG_FIELD_LEVEL\">Field\r\n                      Level</mat-radio-button>\r\n                  </mat-radio-group>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"fieldLevelAccess\">\r\n                  <label class=\"radio-title\">Select Page</label>\r\n                  <br />\r\n                  <p-dropdown id=\"selectpage\" ariaLabelledBy=\"selectpage\" [options]=\"selectedPageData\"\r\n                    fieldKey=\"SETTINGS_PAG_ACC_PAGE\" [filter]=\"true\"\r\n                    [showClear]=\"fieldLevelCheckCount && fieldLevelCheckCount?.length\" [resetFilterOnHide]=\"true\"\r\n                    (onChange)=\"getFieldLevelList('click')\" formControlName=\"fpages\" optionLabel=\"pagename\"\r\n                    optionValue=\"id\" placeholder=\"Select a page\" class=\"dd-stand-size\">\r\n                    <ng-template let-item pTemplate=\"selectedItem\">\r\n                      <div pTooltip=\"{{item?.pagename}}\" tooltipPosition=\"top\" class=\"text-truncate\"> {{ item?.pagename\r\n                        }}</div>\r\n                    </ng-template>\r\n                    <ng-template let-object pTemplate=\"item\">\r\n                      {{ object.pagename }}\r\n                    </ng-template>\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n\r\n              <div *ngIf=\"pageLevelAccess\" class=\"row\">\r\n                <div class=\"col-12 mt-3 pageLevelAccessTable\">\r\n                  <table aria-describedby=\"pageLevelAccessTable\" class=\"table table-bordered\">\r\n                    <col />\r\n                    <col style=\"width: 120px\" />\r\n                    <col style=\"width: 120px\" />\r\n                    <col style=\"width: 120px\" />\r\n                    <thead>\r\n                      <th class=\"text-left\">Page Name</th>\r\n                      <th class=\"text-center\">R</th>\r\n                      <th class=\"text-center\">RW</th>\r\n                      <th class=\"text-center\">RWD</th>\r\n                      <th class=\"text-center\">None</th>\r\n                      <th class=\"text-center\">Validity</th>\r\n                    </thead>\r\n                    <tbody>\r\n                      <ng-container formArrayName=\"pageLevelData\"\r\n                        *ngFor=\"let fAccess of rbacForm.get('pageLevelData')['controls']; let i = index\">\r\n                        <tr [formGroup]=\"rbacForm.get('pageLevelData')['controls'][i]\">\r\n                          <td class=\"text-left\">\r\n                            <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                              formControlName=\"pageName\" placeholder=\"pageleveldata\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\" type=\"radio\" value=\"3\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\" type=\"radio\" value=\"3\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ\">\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE\" type=\"radio\" value=\"2\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE\" type=\"radio\" value=\"2\" [attr.disabled]=\"isView(fAccess?.value?.pageid)? true : null\"  >\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE_DELETE\" type=\"radio\" value=\"5\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE_DELETE\" type=\"radio\" value=\"5\" [attr.disabled]=\"isView(fAccess?.value?.pageid)? true: null\"  >\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <!-- <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_NONE\" type=\"radio\" value=\"4\" /> -->\r\n\r\n                            <label class=\"radio-button-container\">\r\n                              <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_NONE\" type=\"radio\" value=\"4\" [attr.disabled]=\"isView(fAccess?.value?.pageid)? true: null\"  >\r\n                              <span class=\"checkmark\"></span>\r\n                            </label>\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <ng-container *ngIf=\"\r\n                                  rbacForm.get('pageList')?.value[i]?.activeVersion?.gridconfig ||\r\n                                  rbacForm.get('pageList')?.value[i]?.gridconfig\r\n                                \">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" [disabled]=\"fAccess?.value?.pageAccess === '4'\"\r\n                                optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <p-inputNumber type=\"number\" class=\"validity\"\r\n                                *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [readonly]=\"fAccess?.value?.pageAccess === '4'\" [min]=\"1\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_VALIDITY\" formControlName=\"validity\"\r\n                                mode=\"decimal\"></p-inputNumber>\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.pageAccess === '3' || fAccess?.value?.pageAccess === '4'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </ng-container>\r\n                          </td>\r\n                        </tr>\r\n                      </ng-container>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\"\r\n                *ngIf=\"showFieldGrid && fieldLevelCheckCount?.length > 0 && fieldLevelAccess && fieldPageLevel?.length > 0\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"table-responsive\">\r\n                    <table aria-describedby=\"fieldLevelAccessTable\" class=\"table table-bordered\">\r\n                      <col />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <thead>\r\n                        <th class=\"text-left\">Field Name</th>\r\n                        <th class=\"text-center\">Read</th>\r\n                        <th class=\"text-center\">Write</th>\r\n                        <th class=\"text-center\">None</th>\r\n                        <th class=\"text-center\" *ngIf=\"showFieldValidity\">Validity</th>\r\n                      </thead>\r\n                      <tbody>\r\n                        <ng-container formArrayName=\"fieldLevelData\"\r\n                          *ngFor=\"let fAccess of rbacForm.get('fieldLevelData')['controls']; let i = index\">\r\n                          <tr [formGroupName]=\"i\">\r\n                            <td class=\"text-left\">\r\n                              {{ fData[i]['displayname'] }}\r\n\r\n                              <input type=\"hidden\" formControlName=\"assetid\" value=\"{{ fData[i]['id'] }}\" />\r\n                              <input type=\"hidden\" formControlName=\"pageId\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"3\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"3\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"2\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"2\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"4\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"4\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\" *ngIf=\"showFieldValidity\">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\"\r\n                                [disabled]=\"fAccess?.value?.access === '4'\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <input type=\"number\" class=\"validity\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [min]=\"1\" formControlName=\"validity\" [readonly]=\"fAccess?.value?.access === '4'\"\r\n                                style=\"width: 50px; margin-left: 15px\" pInputText />\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.access === '4' || fAccess?.value?.access === '3'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </td>\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- This code for field access for grid page -->\r\n              <div class=\"row\"\r\n                *ngIf=\"showFieldGrid && fieldLevelCheckCount?.length > 0 && fieldLevelAccess && fieldPageLevel?.length === 0\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"table-responsive\">\r\n                    <table aria-describedby=\"fieldLevelAccessTable\" class=\"table table-bordered\">\r\n                      <col />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <!-- <col style=\"width: 120px\" /> -->\r\n                      <thead>\r\n                        <tr>\r\n                          <th class=\"text-left\">Field Name</th>\r\n                          <th class=\"text-center\">Read</th>\r\n                          <!-- <th class=\"text-center\">Write</th> -->\r\n                          <th class=\"text-center\">None</th>\r\n                          <th class=\"text-center\" *ngIf=\"showFieldValidity\">Validity</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <ng-container formArrayName=\"fieldLevelData\"\r\n                          *ngFor=\"let fAccess of rbacForm.get('fieldLevelData')['controls']; let i = index\">\r\n                          <tr [formGroupName]=\"i\">\r\n                            <td class=\"text-left\">\r\n                              {{ fData[i]['displayname'] }}\r\n                              <input type=\"hidden\" formControlName=\"assetid\" value=\"{{ fData[i]['id'] }}\" />\r\n                              <input type=\"hidden\" formControlName=\"pageId\" name=\"permissiongroup_{{i}}\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"3\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"3\">\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <!-- <td class=\"text-center\">\r\n                              <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\" value=\"2\" />\r\n                            </td> -->\r\n                            <td class=\"text-center\">\r\n                              <!-- <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"4\" /> -->\r\n\r\n                              <label class=\"radio-button-container\">\r\n                                <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                  value=\"4\"[attr.disabled]=\"isView(pId)? true: null\"  >\r\n                                <span class=\"checkmark\"></span>\r\n                              </label>\r\n                            </td>\r\n                            <td class=\"text-center\" *ngIf=\"showFieldValidity\">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\"\r\n                                [disabled]=\"fAccess?.value?.access === '4'\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <input type=\"number\" class=\"validity\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [min]=\"1\" formControlName=\"validity\" [readonly]=\"fAccess?.value?.access === '4'\"\r\n                                style=\"width: 50px; margin-left: 15px\" pInputText />\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.access === '4' || fAccess?.value?.access === '3'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </td>\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </form>\r\n        <div class=\"mt-3\" *ngIf=\"policyGroupPages.length && !fieldLevelAccess && selectedAccess === 'role'\">\r\n          <p-accordion class=\"w-full dynamic-search\" iconPos=\"endVal\">\r\n            <p-accordionTab>\r\n              <ng-template pTemplate=\"header\">\r\n                <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                  <span class=\"font-bold\">Policy Groups associated with {{ selectedName }} Role</span>\r\n                </span>\r\n              </ng-template>\r\n              <mat-card class=\"mt-2\">\r\n                <mat-card-content>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-12 mt-1\" *ngFor=\"let policyGroup of policyGroupPages\">\r\n                      <div class=\"radio-title mb-2\">Policy Group: {{ policyGroup?.policygroup?.policygroupname }}</div>\r\n                      <!-- It shows associated Roles -->\r\n                      <div class=\"table-responsive\">\r\n                        <table id=\"policyGroupTable\" aria-describedby=\"policyGroupTable\" class=\"table table-bordered\">\r\n                          <col />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\" class=\"text-left\">Page Name</th>\r\n                              <th scope=\"col\" class=\"text-center\">R</th>\r\n                              <th scope=\"col\" class=\"text-center\">RW</th>\r\n                              <th scope=\"col\" class=\"text-center\">RWD</th>\r\n                              <th scope=\"col\" class=\"text-center\">None</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <ng-container *ngFor=\"let page of policyGroup?.policygrouppage                        \">\r\n                              <tr>\r\n                                <td class=\"text-left\">\r\n                                  <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                                    title=\"page?.page?.activeVersion?.pagename\"\r\n                                    [value]=\"page?.page[0]?.activeVersion?.pagename\" />\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.read\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.read\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.readwrite\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.readwrite\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.full\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.full\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.hide\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.hide\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                              </tr>\r\n                            </ng-container>\r\n                            <ng-container *ngIf=\"policyGroupPages?.length === 0\">\r\n                              <tr>\r\n                                <td class=\"text-center\" colspan=\"4\">No pages associated with Policy Group.</td>\r\n                              </tr>\r\n                            </ng-container>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </p-accordionTab>\r\n          </p-accordion>\r\n\r\n        </div>\r\n        <div class=\"mt-3\" *ngIf=\"policyGroupRolePages.length && !fieldLevelAccess && selectedAccess === 'policygroup'\">\r\n          <p-accordion class=\"w-full dynamic-search\" iconPos=\"endVal\">\r\n            <p-accordionTab>\r\n              <ng-template pTemplate=\"header\">\r\n                <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                  <span class=\"font-bold\">Roles associated with {{ selectedName }} Policy Group</span>\r\n                </span>\r\n              </ng-template>\r\n              <mat-card class=\"mt-2\">\r\n                <mat-card-content>\r\n                  <div class=\"row\">\r\n                    <div class=\"col-12 mt-1\" *ngFor=\"let role of policyGroupRolePages\">\r\n                      <div class=\"radio-title mb-2\">Role: {{ role?.role?.name }}</div>\r\n                      <!-- It shows associated policygroups -->\r\n                      <div class=\"table-responsive\">\r\n                        <table id=\"policyGroupTable\" aria-describedby=\"policyGroupTable\" class=\"table table-bordered\">\r\n                          <col />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <col style=\"width: 120px\" />\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\" class=\"text-left\">Page Name</th>\r\n                              <th scope=\"col\" class=\"text-center\">R</th>\r\n                              <th scope=\"col\" class=\"text-center\">RW</th>\r\n                              <th scope=\"col\" class=\"text-center\">RWD</th>\r\n                              <th scope=\"col\" class=\"text-center\">None</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <ng-container *ngFor=\"let page of role?.rolepage\">\r\n                              <tr>\r\n                                <td class=\"text-left\">\r\n                                  <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                                    title=\"page?.page?.activeVersion?.pagename\"\r\n                                    [value]=\"page?.page[0]?.activeVersion?.pagename\" />\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.read\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.read\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.readwrite\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.readwrite\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.full\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.full\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n\r\n                                <td class=\"text-center\">\r\n                                  <!-- <input disabled [checked]=\"page?.hide\" type=\"radio\" /> -->\r\n\r\n                                  <label class=\"radio-button-container\">\r\n                                    <input disabled [checked]=\"page?.hide\" type=\"radio\">\r\n                                    <span class=\"checkmark\"></span>\r\n                                  </label>\r\n                                </td>\r\n                              </tr>\r\n                            </ng-container>\r\n                            <ng-container *ngIf=\"policyGroupRolePages?.length === 0\">\r\n                              <tr>\r\n                                <td class=\"text-center\" colspan=\"4\">No pages associated with Role.</td>\r\n                              </tr>\r\n                            </ng-container>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </p-accordionTab>\r\n          </p-accordion>\r\n\r\n        </div>\r\n        <div class=\"text-right mt-3\" *ngIf=\"multiPageAccess\">\r\n          <!-- <button class=\"btn btn-primary mr-2\" fieldKey=\"SETTINGS_PAG_ACC_BACK\" (click)=\"redirectList()\">Back</button> -->\r\n          <!-- <button class=\"btn btn-cancel mr-2\" fieldKey=\"SETTINGS_PAG_ACC_CLEAR\" (click)=\"resetForm()\">Clear</button> -->\r\n          <button class=\"btn btn-primary\" fieldKey=\"SETTINGS_PAG_ACC_SAVE\" (click)=\"submitAlert()\"\r\n            [disabled]=\"(pagelevelaccesssavedisable && pagelevelaccesscountdisable) || (enablesave && pagelevelaccesscount && pagelevelaccesscount?.length > 0)\">Save</button>\r\n        </div>\r\n        <div class=\"text-right mt-3\" *ngIf=\"!multiPageAccess\">\r\n          <!-- <button class=\"btn btn-primary mr-2\" fieldKey=\"SETTINGS_PAG_ACC_BACK\" (click)=\"redirectList()\">Back</button> -->\r\n          <!-- <button class=\"btn btn-cancel mr-2\" fieldKey=\"SETTINGS_PAG_ACC_CLEAR\" (click)=\"resetForm()\">Clear</button> -->\r\n          <button class=\"btn btn-primary\" fieldKey=\"SETTINGS_PAG_ACC_SAVE\" (click)=\"submitAlert()\"\r\n            [disabled]=\"((multiPageAccess) || (fieldLevelCheckCount && fieldLevelCheckCount?.length === 0) || (enablesave && fieldLevelCheckCount && fieldLevelCheckCount?.length > 0) || (!pagelevelaccesscount || pagelevelaccesscount?.length === 0))\">Save</button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal\" id=\"submitAlert\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <p>Field Level Access is already present for this Page. Modifying the Page Level Access will remove all Field\r\n          Level\r\n          Access. Do you want to proceed?</p>\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"saveRbac()\">\r\n            Yes\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\"\r\n            (click)=\"getSelectedPages()\">Cancel</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".mat-card-content .mat-radio-group .mat-radio-button{padding-right:10px;font-family:Roboto,sans-serif!important}.toggleleft{font-size:var(--font-14);font-weight:600;display:block;padding-bottom:13px}:host ::ng-deep .p-dropdown.nobg{background-color:transparent;border:none}:host ::ng-deep .p-dropdown.nobg:hover,:host ::ng-deep .p-dropdown.nobg:focus{background-color:transparent!important;border:none!important}.pageLevelAccessTable table thead tr th,.pageLevelAccessTable table tbody tr td{vertical-align:top;color:var(--text-dark)}.pageLevelAccessTable table thead tr th input,.pageLevelAccessTable table tbody tr td input{background:var(--bg-light);color:var(--text-dark);font-size:var(--font-15)!important}.pageLevelAccessTable table thead tr th a:hover,.pageLevelAccessTable table tbody tr td a:hover{text-decoration:none}:host ::ng-deep .p-inputtext.validity{height:30px;line-height:13px}:host ::ng-deep .p-inputnumber-input{height:30px;width:50px;margin-left:15px}:host ::ng-deep .p-dropdown.condition{height:35px;line-height:18px}@media screen and (max-width: 990px){:host ::ng-deep .selected-list .c-list{width:calc(100% - 35px)!important}.pageLevelAccessTable{width:100%;overflow:auto}.pageLevelAccessTable .table{margin-bottom:60px}}:host ::ng-deep .dynamic-search .p-component{font-size:var(--font-13)}:host ::ng-deep .dynamic-search .p-component .p-accordion-toggle-icon{margin-top:-8px;position:absolute;right:.5em;top:50%;font-size:var(--font-13);color:var(--primary)}:host ::ng-deep .dynamic-search .p-component .head-text span{color:var(--primary);font-size:var(--font-16);font-weight:400}:host ::ng-deep .dynamic-search .error-text{font-size:var(--font-12)}:host ::ng-deep .policygroup-v2 .selected-list .c-list .c-token{background-color:#f6fcff;color:#000;border:1px solid #D9D9D9;width:100%;margin:3px 0}:host ::ng-deep .policygroup-v2 .selected-list .c-list .c-token .c-remove{position:absolute;right:12px;top:50%;transform:translateY(-50%);width:10px;height:10px;margin-top:-5px;opacity:.8}:host ::ng-deep .policygroup-v2 .selected-list .c-list .c-token .c-remove svg{fill:#000;border:1px solid #000;border-radius:100%;width:14px;height:14px;padding:2px}:host ::ng-deep .policygroup-v2 .clear-all{display:none}:host ::ng-deep .rbac-card .dd-stand-size .p-dropdown{width:100%!important}:host ::ng-deep .pa-title{margin-top:-5px}.radio-button-container{position:relative;cursor:pointer;-webkit-user-select:none;user-select:none}.radio-button-container input{position:absolute;opacity:0;cursor:pointer;text-indent:-9000px}.checkmark{position:absolute;top:0;left:-10.5px;height:18px;width:18px;background-color:#0000;border-radius:50%;border:2px solid #D6D5D5;transition:all .3s}.radio-button-container:hover input~.checkmark{border-color:var(--primary)}.radio-button-container:focus input~.checkmark{outline:0;box-shadow:0 0 0 .2rem #0086d1}.radio-button-container input:checked~.checkmark{background-color:#0000;border-color:var(--primary)}.checkmark:after{content:\"\";position:absolute;display:none}.radio-button-container input:checked~.checkmark:after{display:block}.radio-button-container .checkmark:after{top:3px;left:3px;width:8px;height:8px;border-radius:50%;background:var(--primary)}.radio-button-container input[type=radio]:disabled+span.checkmark{opacity:.8;pointer-events:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: i2.DataStoreService }, { type: i3.Router }, { type: i4.AlertService }]; }, propDecorators: { AddComponent: [{
                type: ViewChild,
                args: [ManageAccessRadioComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,