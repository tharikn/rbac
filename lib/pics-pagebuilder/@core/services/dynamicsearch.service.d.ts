import { BehaviorSubject } from 'rxjs';
import { DataStoreService } from './data-store.service';
import * as i0 from "@angular/core";
export declare class DynamicsearchService {
    private _storeservice;
    port: string;
    port_communication: string;
    port_document: string;
    port_searchinput: string;
    port_report: string;
    onChangePageEventData: any;
    onChangePageEventId: any;
    onChangePageUserData: any;
    onChangePersonId: any;
    onChangeConfigData: any;
    inputFieldId: any;
    personTabName: any;
    personHealthTabName: any;
    personFinanceTabName: any;
    clickedId: any;
    rowData: any;
    caseNumberAfterApproval: any;
    private isPageDesign;
    observePage: import("rxjs").Observable<boolean>;
    data: BehaviorSubject<any>;
    sourceId: BehaviorSubject<any>;
    sourceIdService: BehaviorSubject<any>;
    id: BehaviorSubject<any>;
    pageId: BehaviorSubject<any>;
    moduleid: BehaviorSubject<any>;
    purposeid: BehaviorSubject<any>;
    workFlowDesign: BehaviorSubject<any>;
    workFlowStatus: BehaviorSubject<any>;
    result: BehaviorSubject<any>;
    httpService: any;
    constructor(_storeservice: DataStoreService);
    set clickableData(data: any);
    get clickableData(): any;
    set personTabNameData(data: any);
    get personTabNameData(): any;
    set personHealthTabNameData(data: any);
    get personHealthTabNameData(): any;
    set personFinanceTabNameData(data: any);
    get personFinanceTabNameData(): any;
    set clickedIdData(data: any);
    get clickedIdData(): any;
    set caseNumberAfterApprovalData(data: any);
    get caseNumberAfterApprovalData(): any;
    set clickedRowData(data: any);
    get clickedRowData(): any;
    getGridUserPreference(id: any): any;
    getStaticGridConfig(id: any): any;
    saveGridUserPreference(data: any): any;
    sendMail(data: any): any;
    generateDocument(data: any, typeCheck: any): any;
    exportData(data: any, link: any): any;
    saveSearchCriteria(data: any): any;
    startScheduling(data: any, url: any): any;
    startSchedulingNoUrl(data: any, id: any): any;
    getTemplate(formId: any): any;
    getTemplateView(formId: any): any;
    getPageTabs(pageId: any): any;
    changePage(page: any): void;
    getFormResponse(pageId: string): any;
    getProviderData(providerid: any): any;
    saveCriteriaByPageId(data: any): any;
    getCriteriaByPageId(pageId: any): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<DynamicsearchService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DynamicsearchService>;
}
