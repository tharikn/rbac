import { HttpClient } from '@angular/common/http';
import { Injector, OnDestroy, OnInit } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { Socket } from 'socket.io-client';
import { AlertService } from '../@core/services/alert.service';
import { AuthService } from '../@core/services/auth.service';
import { DataStoreService } from '../@core/services/data-store.service';
import { DynamicsearchService } from '../@core/services/dynamicsearch.service';
import { LocalService } from '../@core/services/local.service';
import { PageBuilderAddService } from '../@core/services/page-builder-add.service';
import { PageBuilderService } from '../@core/services/page-builder.service';
import * as i0 from "@angular/core";
export declare class PageBuilderComponent implements OnInit, OnDestroy {
    pageBuilderService: PageBuilderService;
    private router;
    private route;
    auth: AuthService;
    private fb;
    private pageBuilderAddService;
    private dynamicSearchService;
    private _storeservice;
    pageList: any;
    tableColumns: any[];
    updateGrid: any;
    totalcount: number;
    orgSubs: Subscription;
    orgId: any;
    filterOptions: any[];
    filterForm: UntypedFormGroup;
    gridOptions: {
        value: string;
        label: string;
        code: string;
    }[];
    gridId: any;
    localstore: LocalService;
    alertService: AlertService;
    dataSource: any;
    http: HttpClient;
    storage: LocalService;
    socket: Socket;
    pageBuilderServ: PageBuilderService;
    inputValidationMethod: any;
    RBACORG: any;
    constructor(injector: Injector, pageBuilderService: PageBuilderService, router: Router, route: ActivatedRoute, auth: AuthService, fb: UntypedFormBuilder, pageBuilderAddService: PageBuilderAddService, dynamicSearchService: DynamicsearchService, _storeservice: DataStoreService);
    form: any;
    id: string | null;
    onlineUserListSubscription: Subscription;
    updateNotificationSubscription: Subscription;
    ngOnInit(): void;
    ngOnDestroy(): void;
    getPageDesignList(http: any): void;
    goToBuilder(): any;
    setGridColumns(): void;
    viewVersions(evt: any): void;
    editTableRow(evt: any): void;
    viewTableRow(evt: any): void;
    duplicateRow(evt: any): void;
    loadFilterForm(): void;
    getGridConfig(): void;
    setFilterOptions(colConfig: any): void;
    changeFilterOptions(e: any): void;
    conditionCheckElse(value: any, code: any): void;
    saveGridConfig(data: any): void;
    activatePage(event: any): void;
    deactivatePage(event: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PageBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PageBuilderComponent, "lib-page-builder", never, {}, {}, never, never, false, never>;
}
