import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { PageBuilderAddURL } from '../url/page-builder-add-url.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./local.service";
import * as i3 from "./data-store.service";
export class PageBuilderAddService {
    router;
    localstore;
    _storeservice;
    authorisedTabs = [];
    httpService;
    constructor(router, localstore, _storeservice) {
        this.router = router;
        this.localstore = localstore;
        this._storeservice = _storeservice;
        this._storeservice.currentStore.subscribe((res) => {
            if (res) {
                this.httpService = res['HTTPSERVICE'];
            }
        });
    }
    getFormData = new BehaviorSubject('');
    currentFormData = this.getFormData.asObservable();
    setFormData(data) {
        this.getFormData.next(data);
    }
    getBasicData = new BehaviorSubject('');
    currentBasicData = this.getBasicData.asObservable();
    setBasicData(data) {
        this.getBasicData.next(data);
    }
    getPageType = new BehaviorSubject(sessionStorage.getItem('SELECTED_PAGE'));
    currentPageType = this.getPageType.asObservable();
    setPageType(data) {
        this.getPageType.next(data);
    }
    getBasicDetailsbyId(id) {
        return this.httpService.get(PageBuilderAddURL.EndPoints.page_config.pageVersion.replace('{id}', id));
    }
    pageAlertChecking(pagename, orgid, _body) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.page_config.pageExist
            .replace('{pagename}', String(pagename))
            .replace('{orgid}', String(orgid)), _body);
    }
    createPage(data) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.page_config.page + '/', data);
    }
    createAssetByVersion(pageid, versionid, assetData) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.page_config.assetByVersion
            .replace('{pageid}', String(pageid))
            .replace('{versionid}', String(versionid)), assetData);
    }
    getMenuList(data, id) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.rbac.asset.batch + id, data);
    }
    getTableFields(param1, param2) {
        return this.httpService.get(PageBuilderAddURL.EndPoints.page_config.dbSchema + param1 + '/' + param2 + '/true/');
    }
    createReportTable(data) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.report.report + '/', data);
    }
    getAllPage(url) {
        return this.httpService.get(url);
    }
    getSchema() {
        return this.httpService.get(PageBuilderAddURL.EndPoints.page_config.dbSchema);
    }
    getAllOrganisations() {
        return this.httpService.get(PageBuilderAddURL.EndPoints.rbac.organization.list + 'all');
    }
    editPageStatus(data, id) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.page_config.page_lock.replace('{id}', String(id)), data);
    }
    getOrgList(orgid) {
        return this.httpService.get(PageBuilderAddURL.EndPoints.page_config.orgPageList.replace('{orgid}', orgid));
    }
    getUploadKey(data) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.attachment.uploadKey, data);
    }
    getFormResponseAttachment(formid, responseid) {
        return this.httpService.get(PageBuilderAddURL.EndPoints.attachment.list.replace('{formid}', formid).replace('{responseid}', responseid));
    }
    deleteFormResponseAttachment(fileid) {
        return this.httpService.delete(PageBuilderAddURL.EndPoints.attachment.delete.replace('{fileid}', fileid));
    }
    downloadFormResponseAttachment(data) {
        return this.httpService.post(PageBuilderAddURL.EndPoints.attachment.downloadKey, data);
    }
    returnToList() {
        this.router.navigate(['/pages/page-design/list']);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PageBuilderAddService, deps: [{ token: i1.Router }, { token: i2.LocalService }, { token: i3.DataStoreService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PageBuilderAddService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PageBuilderAddService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.LocalService }, { type: i3.DataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,