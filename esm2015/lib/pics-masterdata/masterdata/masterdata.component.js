import { Component } from '@angular/core';
import { Validators, FormArray } from '@angular/forms';
import { PrimeIcons } from 'primeng/api';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import * as i0 from "@angular/core";
import * as i1 from "../@core/service/rbac.service";
import * as i2 from "@angular/forms";
import * as i3 from "../@core/service/alert.service";
import * as i4 from "primeng/api";
import * as i5 from "../@core/permissions/permission.store";
import * as i6 from "../@core/service/data-store.service";
import * as i7 from "../@shared/alert/alert.component";
import * as i8 from "primeng/tree";
import * as i9 from "primeng/contextmenu";
import * as i10 from "primeng/confirmpopup";
import * as i11 from "primeng/card";
import * as i12 from "primeng/checkbox";
import * as i13 from "primeng/multiselect";
import * as i14 from "../@core/directives/permission.directive";
import * as i15 from "primeng/inputtext";
import * as i16 from "@angular/common";
export class MasterdataComponent {
    constructor(mastersService, formBuilder, alertService, confirmationService, permissionStore, _storeservice) {
        this.mastersService = mastersService;
        this.formBuilder = formBuilder;
        this.alertService = alertService;
        this.confirmationService = confirmationService;
        this.permissionStore = permissionStore;
        this._storeservice = _storeservice;
        this.menuItems = [];
        //categoryForm!: FormGroup;
        this.filterMasterList = [];
        this.selectedItem = {};
        this.pageErrorShow = false;
        this.templateList = [];
        this.dataControlActions = [
            { value: '', name: 'Select' },
            { value: 'HIDE', name: 'Hide' },
            { value: 'DISABLE', name: 'Disable' },
            { value: 'MASK', name: 'Mask' }
        ];
        this.RBACORG = new RBACINFO();
        this.nodeType = 'category';
        this.saveMode = 'INSERT';
        this.isGlobalLookup = true;
        // this.initializeCategoryForm();
        this.initializeLookupForm();
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                console.log(this.RBACORG, 'RBACORG Permisson');
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                if (this.environment) {
                    this.loadTree();
                    this.loadContextMenu();
                    this.mastersService.getAllUserRole().subscribe((items) => {
                        this.roles = items.data;
                    });
                    this.mastersService.getPermissionsTree(this.environment.applicationid).subscribe((items) => {
                        this.permissions = items.data;
                    });
                }
            }
        });
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    // initializeCategoryForm() {
    //   this.categoryForm = this.formBuilder.group({
    //     id: [0],
    //     applicationid: [this.environment ? this.environment['applicationid']: ''],
    //     name: ['', Validators.required],
    //     description: [''],
    //     readonly: [false],
    //     isenabled: [true]
    //   });
    // }
    initializeLookupForm() {
        this.pageErrorShow = false;
        this.lookupForm = this.formBuilder.group({
            id: [0],
            applicationid: [this.environment ? this.environment['applicationid'] : ''],
            name: ['', Validators.required],
            description: [''],
            readonly: [false],
            isenabled: [true],
            lookup: this.formBuilder.group({
                id: [0],
                //lookupcategoryid: [0],
                parentid: [null],
                // optionaldata: this.formBuilder.group({
                //   rules: this.formBuilder.array([])
                // }),
                // access: this.formBuilder.group({
                //   assign: ['', [this.requiredIfValidator(() => !this.isGlobalLookup)]],
                //   view: ['', [this.requiredIfValidator(() => !this.isGlobalLookup)]]
                // }),
                lookupdata: this.formBuilder.array([this.addlookupdata()]),
                readonly: [false],
                global: [true],
                isenabled: [true]
            })
        });
    }
    // get datarules() {
    //   return this.lookupForm.get('optionaldata.rules') as FormArray;
    // }
    get lookupdata() {
        const lookupFormGroup = this.lookupForm.get('lookup');
        if (lookupFormGroup && lookupFormGroup.get('lookupdata') instanceof FormArray) {
            return lookupFormGroup.get('lookupdata');
        }
    }
    addRule() {
        return this.formBuilder.group({
            roles: ['', Validators.required],
            permission: ['', Validators.required],
            action: ['', Validators.required]
        });
    }
    // onAddRule(): void {
    //   this.datarules.push(this.addRule());
    // }
    addlookupdata() {
        return this.formBuilder.group({
            key: ['', Validators.required],
            value: ['', Validators.required],
            order: [0]
        });
    }
    onAddLookUpData() {
        this.pageErrorShow = false;
        this.lookupdata.push(this.addlookupdata());
    }
    onDeleteLookupData(i) {
        this.lookupdata.removeAt(i);
    }
    // onDeleteRule(rowIndex: number): void {
    //   this.datarules.removeAt(rowIndex);
    // }
    searchMaster(event) {
        const value = event.target.value.toUpperCase();
        this.filterMasterList = this.categories.filter((a) => { var _a; return (_a = a['name']) === null || _a === void 0 ? void 0 : _a.toUpperCase().startsWith(value); });
    }
    onNodeContextMenuSelect(event) {
        if (event.node.type === 'category') {
            const permission = this.permissionStore.state;
            this.menuItems = [
                {
                    label: 'Create Category',
                    icon: PrimeIcons.ARROW_UP_LEFT,
                    visible: permission.SETTINGS_MAS_CREATE_CATOGORY,
                    badge: 'SETTINGS_MAS_CREATE_CATOGORY',
                    command: (createEvent) => {
                        this.saveMode = 'INSERT';
                        this.nodeType = 'category';
                        this.clearForm();
                        console.log(createEvent);
                    }
                },
                {
                    label: 'Create Lookup',
                    icon: PrimeIcons.ARROW_DOWN_RIGHT,
                    visible: permission.SETTINGS_MAS_CREATE_LOOKUP,
                    badge: 'SETTINGS_MAS_CREATE_LOOKUP',
                    command: _event => {
                        this.setInsertEvent();
                    }
                },
                {
                    label: 'Delete',
                    icon: PrimeIcons.TRASH,
                    visible: permission.SETTINGS_MAS_DELETE,
                    badge: 'SETTINGS_MAS_DELETE',
                    command: deleteEvent => {
                        this.saveMode = 'DELETE';
                        this.nodeType = this.selectedItem.type;
                        console.log(deleteEvent);
                        $('#Deleteuser').modal('show');
                        // this.confirmationService.confirm({
                        //   target: deleteEvent.target,
                        //   message: 'Are you sure that you want to delete?',
                        //   icon: 'pi pi-exclamation-triangle',
                        //   accept: () => {
                        //     this.deleteItem();
                        //   },
                        //   reject: () => {
                        //     //not to be empty
                        //   }
                        // });
                    }
                }
            ];
        }
        else if (event.node.type === 'lookup') {
            this.menuItems = [
                {
                    label: 'Create Lookup',
                    icon: PrimeIcons.ARROW_DOWN_RIGHT,
                    command: _eventErase => {
                        this.setInsertEvent();
                    }
                },
                {
                    label: 'Delete',
                    icon: PrimeIcons.TRASH,
                    command: RemoveEvent => {
                        this.saveMode = 'DELETE';
                        this.nodeType = this.selectedItem.type;
                        console.log(RemoveEvent);
                        $('#Deleteuser').modal('show');
                        // this.confirmationService.confirm({
                        //   target: RemoveEvent.target,
                        //   message: 'Are you sure that you want to delete?',
                        //   icon: 'pi pi-exclamation-triangle',
                        //   accept: () => {
                        //     this.deleteItem();
                        //   },
                        //   reject: () => {
                        //     //not to be empty
                        //   }
                        // });
                    }
                }
            ];
        }
    }
    setInsertEvent() {
        this.saveMode = 'INSERT';
        this.nodeType = this.selectedItem.type;
        this.createLookupForm();
        // this.clearRules();
    }
    nodeSelect(event) {
        this.nodeselecttype = 'UPDATE';
        this.saveMode = 'UPDATE';
        this.nodeType = event.node.type;
        // if (event.node.type === 'lookup') {
        // this.mastersService.getLookup(event.node.id).subscribe((item: any) => {
        //   const lookup = item['data'];
        this.mastersService.getLookupBycategoryID(event.node.data).subscribe((nodes) => {
            const lookup = nodes.data;
            // });
            // Assume this.lookupForm is your existing form instance created using the FormBuilder
            console.log('lookup', lookup);
            // Patch values for the main form
            this.lookupForm.patchValue({
                id: lookup.id,
                // lookupcategoryid: lookup.lookupcategoryid,
                parentid: lookup.parentid,
                readonly: lookup.readonly,
                global: lookup.global,
                isenabled: lookup.isenabled
            });
            // this.lookupForm.get('lookup')?.patchValue({
            //   lookupdata: lookup.lookupdata,
            //   });
            this.lookupForm.patchValue(lookup);
            console.log('lookupFormValue', this.lookupForm.value);
            // Patch values for the nested form array (lookupdata)
            // const lookupdataArray = this.lookupForm.get('lookupdata') as FormArray;
            // lookupdataArray.clear(); // Clear existing form array
            // Assuming you have a method to create a form group for lookupdata
            // const lookupDataGroup = this.addlookupdata(); 
            // lookupDataGroup.patchValue({
            //   key: lookup.key,
            //   value: lookup.value,
            //   order: lookup.order
            // Add more properties as needed
            // });
            // lookupdataArray.push(lookupDataGroup);
            //this.setGlobal(lookup.global);
            // this.lookupForm.patchValue(lookup);
            // this.lookupForm.reset();
        });
        //  } else {
        //  this.lookupForm.reset();
        //   this.lookupForm.patchValue(event.node);
        //   }
        console.log(event.node);
    }
    // private clearRules() {
    //   for (let index = 0; index < this.datarules.length; index++) {
    //     this.datarules.removeAt(index);
    //   }
    // }
    nodeExpand(event) {
        if (event.node && event.node.data && event.node.type !== 'lookup') {
            this.mastersService.getLookupTree(event.node.data).subscribe((nodes) => {
                event.node.children = nodes.data;
            });
        }
    }
    // saveCategory() {
    //   const category = this.categoryForm.value;
    //   category.applicationid =this.environment.applicationid;
    //   console.log(category);
    //   category.order = category.order ? Number(category.order) : 1;
    //   if (this.categoryForm.valid) {
    //     if (this.saveMode === 'INSERT') {
    //       this.mastersService.createCategory(category).subscribe(() => {
    //         this.alertService.success('Category created successfully.');
    //         this.loadTree();
    //         this.clearForm();
    //              });
    //     } else {
    //       this.mastersService.updateCategory(category).subscribe(() => {
    //         this.alertService.success('Category updated successfully.');
    //         this.loadTree();
    //         this.clearForm();
    //       });
    //     }
    //   } else {
    //     this.alertService.error('Please Fill All Required Fields');
    //   }
    //}
    saveLookup() {
        this.pageErrorShow = true;
        const lookupdts = this.lookupForm.value;
        lookupdts.applicationid = this.environment.applicationid;
        lookupdts.order = lookupdts.order ? Number(lookupdts.order) : 1;
        console.log(lookupdts);
        if (this.lookupForm.valid) {
            delete lookupdts.readonly;
            lookupdts.lookup.order = lookupdts.lookup.order ? Number(lookupdts.lookup.order) : 1;
            // if (lookup.optionaldata && lookup.optionaldata.rules) {
            //   lookup.optionaldata.rules = lookup.optionaldata.rules.map((rule: any) => {
            //     rule.permission.parent = null;
            //     return rule;
            //   });
            // }
            if (this.saveMode === 'INSERT') {
                this.mastersService.createLookup(lookupdts).subscribe(() => {
                    this.alertService.success('Lookup created successfully.');
                    this.loadTree();
                    this.clearForm();
                });
            }
            else {
                this.mastersService.updateLookup(lookupdts).subscribe(() => {
                    this.alertService.success('Lookup updated successfully.');
                    this.loadTree();
                    this.clearForm();
                });
            }
        }
        else {
            // this.alertService.error('Invalid lookup data.');
        }
    }
    clearForm() {
        this.initializeLookupForm();
    }
    createLookupForm() {
        this.initializeLookupForm();
        this.setGlobal(true);
        if (this.nodeType === 'category') {
            this.nodeType = 'lookup';
            this.lookupForm.patchValue({
                lookupcategoryid: this.selectedItem.id
            });
        }
        else {
            this.lookupForm.patchValue({
                lookupcategoryid: this.selectedItem.lookupcategoryid,
                parentid: this.selectedItem.id
            });
        }
    }
    setGlobal(checked) {
        var _a;
        this.isGlobalLookup = checked;
        (_a = this.lookupForm.get('access')) === null || _a === void 0 ? void 0 : _a.patchValue({
            view: [],
            assign: []
        });
    }
    loadContextMenu() {
        this.menuItems = [
            {
                label: 'Create Category',
                icon: PrimeIcons.ARROW_UP_LEFT,
                command: (event) => {
                    this.saveMode = 'INSERT';
                    this.nodeType = 'category';
                    this.clearForm();
                    console.log(event);
                }
            },
            {
                label: 'Create Lookup',
                icon: PrimeIcons.ARROW_DOWN_RIGHT,
                command: _eventNode => {
                    this.setInsertEvent();
                }
            },
            {
                label: 'Delete',
                icon: PrimeIcons.TRASH,
                command: event => {
                    this.saveMode = 'DELETE';
                    this.nodeType = this.selectedItem.type;
                    console.log(event);
                    $('#Deleteuser').modal('show');
                    // this.confirmationService.confirm({
                    //   target: event.target,
                    //   message: 'Are you sure that you want to delete?',
                    //   icon: 'pi pi-exclamation-triangle',
                    //   accept: () => {
                    //     //confirm action
                    //     this.deleteItem();
                    //   },
                    //   reject: () => {
                    //     // This is intentional
                    //   }
                    // });
                }
            }
        ];
    }
    loadTree() {
        this.pageErrorShow = false;
        this.mastersService.getAllCategoryTree(this.environment.applicationid).subscribe((items) => {
            this.categories = items;
            if (this.categories.length) {
                this.selectedItem = this.categories[0];
                this.filterMasterList = this.categories;
            }
        });
    }
    cancel() {
        this.lookupForm.reset();
        //this.lookupForm.reset();
    }
    deleteItem() {
        this.saveMode = 'UPDATE';
        if (this.selectedItem.type === 'lookup') {
            this.mastersService.deleteLookup(this.selectedItem.id).subscribe((_item) => {
                this.cancel();
                $('#Deleteuser').modal('hide');
                this.alertService.warn('Lookup deleted successfully.');
                this.loadTree();
            });
        }
        else {
            this.mastersService.deleteCategory(this.selectedItem.id).subscribe((_item) => {
                this.cancel();
                $('#Deleteuser').modal('hide');
                this.alertService.warn('Category deleted successfully.');
                this.loadTree();
            });
        }
    }
    requiredIfValidator(predicate) {
        return (formControl) => {
            if (!formControl.parent) {
                return null;
            }
            if (predicate()) {
                return Validators.required(formControl);
            }
            return null;
        };
    }
}
MasterdataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MasterdataComponent, deps: [{ token: i1.RbacService }, { token: i2.FormBuilder }, { token: i3.AlertService }, { token: i4.ConfirmationService }, { token: i5.PermissionStore }, { token: i6.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
MasterdataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MasterdataComponent, selector: "lib-masterdata", ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"permission\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2\">\r\n        <div class=\"tab-pane fade show active\">\r\n          <div class=\"form-group bgiconsearch\">\r\n            <input class=\"form-control\" placeholder=\"Search by Category name\" type=\"text\" (keyup)=\"searchMaster($event)\"\r\n              fieldKey=\"SETTINGS_MAS_SEARCH_BY_NAME\" pInputText />\r\n          </div>\r\n          <div class=\"clearfix\"></div>\r\n\r\n          <div class=\"masteracess\">\r\n            <p-tree [value]=\"filterMasterList\" selectionMode=\"single\" [(selection)]=\"selectedItem\"\r\n              (onNodeSelect)=\"nodeSelect($event)\" (onNodeContextMenuSelect)=\"onNodeContextMenuSelect($event)\"\r\n              [contextMenu]=\"treeContextMenu\"></p-tree>\r\n            <p-contextMenu #treeContextMenu [model]=\"menuItems\" appendTo=\"body\"></p-contextMenu>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-8 col-md-6 col-12 master-right mt-2\">\r\n      <p-confirmPopup></p-confirmPopup>\r\n      <p-card id=\"lookupForm\" class=\"rbac-card\" [formGroup]=\"lookupForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Masters/Category</span>\r\n        </div>\r\n        <input id=\"cid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"capplicationid\" type=\"hidden\" formControlName=\"applicationid\" />\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"mName\" class=\"referral-form-labels\">Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"mName\" type=\"text\" formControlName=\"name\" fieldKey=\"SETTINGS_MAS_NAME\" placeholder=\"Enter Name\"\r\n              aria-describedby=\"mName\" pInputText />\r\n            <div *ngIf=\"\r\n                lookupForm.controls['name'].invalid &&\r\n                (lookupForm.controls['name'].dirty || lookupForm.controls['name'].touched)\r\n              \">\r\n              <small *ngIf=\"lookupForm.controls['name'].invalid\" class=\"p-error block\">Name is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"cdescription\" class=\"referral-form-labels\">Description </label>\r\n            <input id=\"cdescription\" type=\"text\" formControlName=\"description\" fieldKey=\"SETTINGS_MAS_DESCRYPTION\"\r\n              placeholder=\"Enter Description\" aria-describedby=\"cdescription\" pInputText />\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels d-none d-lg-inline-block\">&#160;</label>\r\n            <div>\r\n              <p-checkbox st inputId=\"readOnly\" [binary]=\"true\" formControlName=\"readonly\"\r\n                fieldKey=\"SETTINGS_MAS_READ_ONLY\" label=\"Readonly\">\r\n              </p-checkbox>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels d-none d-lg-inline-block\">&#160;</label>\r\n            <div>\r\n              <p-checkbox st inputId=\"active\" [binary]=\"true\" formControlName=\"isenabled\" fieldKey=\"SETTINGS_MAS_ACTIVE\"\r\n                label=\"Active\"></p-checkbox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_MAS_ADD_CATOGORY\"\r\n            (click)=\"saveCategory()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Category' : 'Add Category' }}\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary border border-primary btncancel\"\r\n            fieldKey=\"SETTINGS_MAS_CANCEL\" (click)=\"clearForm()\">\r\n            Cancel\r\n          </button>\r\n          <br />\r\n          <br />\r\n        </div> -->\r\n      </p-card>\r\n\r\n      <p-card id=\"lookupForm\" class=\"rbac-card\" [formGroup]=\"lookupForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Masters/Lookup</span>\r\n        </div>\r\n        <!-- <input id=\"lid\" type=\"hidden\" formControlName=\"lookup.id\" /> -->\r\n        <!-- <input id=\"llookupcategoryid\" type=\"hidden\" formControlName=\"lookupcategoryid\" /> -->\r\n        <!-- <input id=\"lparentid\" type=\"hidden\" formControlName=\"lookup.parentid\" /> -->\r\n        <div>\r\n          <div>\r\n            <button class=\"pull-right mb-2 btn btn-primary btncommon\"\r\n              (click)=\"onAddLookUpData()\">+</button>\r\n          </div>\r\n          <div class=\"p-datatable-wrapper\">\r\n            <table class=\"p-datatable-table table\">\r\n              <thead class=\"p-datatable-thead\">\r\n                <tr>\r\n                  <th style=\"width: 35%;\"\r\n                  >Key \r\n                  <span class=\"requiredfield text-danger\">*</span>\r\n                  </th>\r\n                  <th style=\"width: 35%;\">Value \r\n                    <span class=\"requiredfield text-danger\">*</span>\r\n                  </th>\r\n                  <th style=\"width: 25%;\">Order</th>\r\n                  <th style=\"width: 5%;\" *ngIf=\"saveMode == 'INSERT'\"></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody formArrayName=\"lookupdata\">\r\n                <ng-container *ngFor=\"let field of lookupdata.controls; let i = index\">\r\n                  <tr [formGroupName]=\"i\">\r\n                    <td>\r\n                      <input id=\"lkey\" type=\"text\" placeholder=\"Enter Key {{i + 1}}\" formControlName=\"key\"\r\n                        aria-describedby=\"lkey\" pInputText />\r\n                        <div *ngIf=\"pageErrorShow ? field.get('key').invalid : field.get('key').errors && field.get('key').touched\">\r\n                          <!-- field.get('key')?.touched && field.get('key')?.errors && field.get('key')?.hasError('required')\"> -->\r\n                            <small class=\"p-error block\">Key is required</small>\r\n                          </div>\r\n                    </td>\r\n                    <td>\r\n                      <input id=\"lvalue\" type=\"text\" placeholder=\"Enter Value {{i + 1}}\" formControlName=\"value\"\r\n                        aria-describedby=\"lvalue\" pInputText />\r\n                        <div *ngIf=\"pageErrorShow ? field.get('value').invalid : field.get('value').errors && field.get('value').touched\">\r\n                          <small class=\"p-error block\">Value is required</small>\r\n                        </div>\r\n                    </td>\r\n                    <td>\r\n                      <input id=\"lorder\" type=\"text\" formControlName=\"order\" placeholder=\"Enter Order {{i + 1}}\"\r\n                        pInputText />\r\n                    </td>\r\n                    <td *ngIf=\"saveMode == 'INSERT' &&  lookupdata.length > 1\">\r\n                      <button type=\"button\" class=\"btn btn-default\" title=\"delete\"\r\n                        (click)=\"onDeleteLookupData(i)\">\r\n                        <i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                </ng-container>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n        </div>\r\n        <!-- <ng-container formGroupName=\"optionaldata\">\r\n          <p-table [value]=\"datarules.controls\" width=\"100%\" [responsive]=\"true\" formArrayName=\"rules\">\r\n            <ng-template pTemplate=\"caption\">\r\n              <div class=\"flex align-items-center justify-content-between\">\r\n                Control Flow\r\n                <button class=\"pull-right mb-2 btn btn-primary btncommon\" (click)=\"onAddRule()\">+</button>\r\n              </div>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th id=\"datarules-roles\" style=\"width: 35%\">Roles</th>\r\n                <th id=\"datarules-permissions\" style=\"width: 35%\">Permissions</th>\r\n                <th id=\"datarules-action\" style=\"width: 20%\">Action</th>\r\n                <th id=\"datarules-empty\" style=\"width: 10%\"></th>\r\n              </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowData let-rowIndex=\"rowIndex\">\r\n              <ng-container>\r\n                <tr [formGroupName]=\"rowIndex\">\r\n                  <td>\r\n                    <p-multiSelect [options]=\"roles\" formControlName=\"roles\" defaultLabel=\"Select Roles\"\r\n                      optionLabel=\"name\" optionValue=\"id\" ariaFilterLabel=\"null\"\r\n                      ariaLabelledBy=\"selectRoles{{ rowIndex }}\" id=\"selectRoles{{ rowIndex }}\" display=\"chip\">\r\n                    </p-multiSelect>\r\n                    <div class=\"text-danger\" *ngIf=\"\r\n                        rowData.get('roles').errors && (rowData.get('roles').dirty || rowData.get('roles').touched)\r\n                      \">\r\n                      <div *ngIf=\"rowData.get('roles').errors?.required\">Role is Required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <p-treeSelect formControlName=\"permission\" [options]=\"permissions\" optionLabel=\"label\"\r\n                      optionValue=\"data\" placeholder=\"Select Permissions\" id=\"selectPermit{{ rowIndex }}\"\r\n                      ariaLabelledBy=\"selectPermit{{ rowIndex }}\" class=\"permission-tree\"></p-treeSelect>\r\n                    <div class=\"text-danger\" *ngIf=\"\r\n                        rowData.get('permission').errors &&\r\n                        (rowData.get('permission').dirty || rowData.get('permission').touched)\r\n                      \">\r\n                      <div *ngIf=\"rowData.get('permission').errors?.required\">Permission is Required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <p-dropdown optionLabel=\"name\" optionValue=\"value\" [options]=\"dataControlActions\"\r\n                      id=\"selectValue{{ rowIndex }}\" ariaLabelledBy=\"selectValue{{ rowIndex }}\"\r\n                      formControlName=\"action\">\r\n                    </p-dropdown>\r\n                    <div class=\"text-danger\" *ngIf=\"\r\n                        rowData.get('action').errors && (rowData.get('action').dirty || rowData.get('action').touched)\r\n                      \">\r\n                      <div *ngIf=\"rowData.get('action').errors?.required\">Action is Required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <button type=\"button\" class=\"btn btn-default\" title=\"delete\" (click)=\"onDeleteRule(rowIndex)\">\r\n                      <i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </ng-container>\r\n            </ng-template>\r\n          </p-table>\r\n        </ng-container> -->\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"p-field p-col\" style=\"padding: 25px 0px 0px 10px\">\r\n            <p-checkbox inputId=\"binaryGlobal\" [binary]=\"true\" formControlName=\"global\"\r\n              (onChange)=\"setGlobal($event.checked)\" label=\"Global\"></p-checkbox>\r\n          </div>\r\n          <div class=\"p-field p-col\" style=\"padding: 25px 0px 0px 10px\">\r\n            <p-checkbox inputId=\"binaryActive\" [binary]=\"true\" formControlName=\"isenabled\" label=\"Active\"></p-checkbox>\r\n          </div>\r\n          <div class=\"p-field p-col\"></div>\r\n          <div class=\"p-field p-col\"></div>\r\n        </div>\r\n        <ng-container *ngIf=\"!isGlobalLookup\">\r\n          <div class=\"p-fluid p-formgrid p-grid\" formGroupName=\"access\">\r\n            <div class=\"p-field p-col\">\r\n              <label for=\"pname\" class=\"referral-form-labels\">View Access </label>\r\n              <p-multiSelect [options]=\"roles\" formControlName=\"view\" defaultLabel=\"Select Roles\" optionLabel=\"name\"\r\n                optionValue=\"id\" display=\"chip\">\r\n              </p-multiSelect>\r\n              <div *ngIf=\"lookupForm.get('access.view')?.errors\">\r\n                <small *ngIf=\"lookupForm.get('access.view')?.invalid\" class=\"p-error block\">Role is required </small>\r\n              </div>\r\n            </div>\r\n            <div class=\"p-field p-col\">\r\n              <label for=\"pname\" class=\"referral-form-labels\">Assign Access </label>\r\n              <p-multiSelect [options]=\"roles\" formControlName=\"assign\" defaultLabel=\"Select Roles\" optionLabel=\"name\"\r\n                optionValue=\"id\" display=\"chip\">\r\n              </p-multiSelect>\r\n              <div *ngIf=\"lookupForm.get('access.assign')?.errors\">\r\n                <small *ngIf=\"lookupForm.get('access.assign')?.invalid\" class=\"p-error block\">Role is required </small>\r\n              </div>\r\n            </div>\r\n            <div class=\"p-field p-col\"></div>\r\n          </div>\r\n        </ng-container>\r\n\r\n        <div class=\"mt-2\">\r\n          <button type=\"submit\" class=\"pull-right mb-2 btn btn-primary btncommon\" (click)=\"saveLookup()\">\r\n           Save <!-- {{ saveMode === 'UPDATE' ? 'Update Lookup' : 'Add Lookup' }} -->\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" (click)=\"clearForm()\">Cancel</button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal\" id=\"Deleteuser\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Delete {{this.selectedItem.type === 'lookup' ? 'Lookup' : 'Category'}}</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        Are you sure you want to delete the {{this.selectedItem.type === 'lookup' ? 'Lookup' : 'Category'}}?\r\n        <!-- Are you sure want to Delete User ? -->\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"deleteItem()\">\r\n            Delete\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">Cancel</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:var(--base-font-size)}.masteracess{border:solid 1px var(--table-border);border-radius:2px;padding:5px 0;overflow-y:auto;background:var(--bg-light);max-height:calc(100vh - 243px);min-height:calc(100vh - 237px)}.masterempty{max-width:none;border-radius:50%;height:40px;width:40px}.row.masterdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}span.namemaster{font-size:var(--base-font-size);color:#000}.masterid,span.emailmaster{font-size:var(--base-font-size);color:#9b9b9b}span.deletemaster{position:absolute;top:0px;right:15px;z-index:9;width:20px;float:right;cursor:pointer}span.deletemaster img{width:12px}.activate{position:absolute;margin-top:-46px;margin-left:44rem}.toggleleft{font-size:13px;font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.report_button{margin-left:12px}:host ::ng-deep .ui-tree.permission-tree{width:100%}:host ::ng-deep .p-datatable .p-datatable-header{background:var(--background-color);color:var(--text-dark);border-color:var(--table-border)}:host ::ng-deep .p-datatable .p-datatable-thead tr th{background:var(--background-color);color:var(--text-dark);border-color:var(--table-border)}.p-datatable-wrapper tr td{text-align:left;border:none;padding:15px 8px;vertical-align:top}.p-datatable-wrapper tr td input{width:100%}.p-datatable-wrapper tr td button i{color:#f92929}\n"], components: [{ type: i7.AlertComponent, selector: "app-alert" }, { type: i8.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "virtualScroll", "virtualNodeHeight", "minBufferPx", "maxBufferPx", "indentation", "trackBy"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onFilter"] }, { type: i9.ContextMenu, selector: "p-contextMenu", inputs: ["model", "global", "target", "style", "styleClass", "appendTo", "autoZIndex", "baseZIndex", "triggerEvent"], outputs: ["onShow", "onHide"] }, { type: i10.ConfirmPopup, selector: "p-confirmPopup", inputs: ["key", "defaultFocus", "showTransitionOptions", "hideTransitionOptions", "autoZIndex", "baseZIndex", "style", "styleClass", "visible"] }, { type: i11.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { type: i12.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }, { type: i13.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "autoZIndex", "baseZIndex", "filterBy", "virtualScroll", "itemSize", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "scrollHeight", "defaultLabel", "placeholder", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide"] }], directives: [{ type: i14.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i15.InputText, selector: "[pInputText]" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i16.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i16.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MasterdataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-masterdata',
                    templateUrl: './masterdata.component.html',
                    styleUrls: ['./masterdata.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.RbacService }, { type: i2.FormBuilder }, { type: i3.AlertService }, { type: i4.ConfirmationService }, { type: i5.PermissionStore }, { type: i6.DataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,