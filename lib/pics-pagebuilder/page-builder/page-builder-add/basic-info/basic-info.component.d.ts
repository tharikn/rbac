import { Injector, OnDestroy, OnInit } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { AlertService } from '../../../@core/services/alert.service';
import { AuthService } from '../../../@core/services/auth.service';
import { CommonDropdownsService } from '../../../@core/services/common-dropdowns.service';
import { LocalService } from '../../../@core/services/local.service';
import { PageBuilderAddService } from '../../../@core/services/page-builder-add.service';
import { DataStoreService } from '../../../@core/services/data-store.service';
import * as i0 from "@angular/core";
export declare class BasicInfoComponent implements OnInit, OnDestroy {
    private formBuilder;
    private _router;
    private route;
    private _storeservice;
    private _alertService;
    disableDropdown: boolean;
    pageTypeList: any;
    formDetails: UntypedFormGroup;
    id: string | null;
    formData: any;
    layout: any;
    jsonForm: any;
    selectedPageValue: string;
    selectedPageType: any[];
    basicPageInformation: any;
    rev: any;
    pagetype: string;
    service: PageBuilderAddService;
    localstore: LocalService;
    dropdownService: CommonDropdownsService;
    orgSubs: Subscription;
    authService: AuthService;
    orgId: any;
    pageNameChanged: boolean;
    validationErrors: {
        [key: string]: string;
    };
    RBACORG: any;
    constructor(injector: Injector, formBuilder: UntypedFormBuilder, _router: Router, route: ActivatedRoute, _storeservice: DataStoreService, _alertService: AlertService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    loadForm(): void;
    checkDropdownState(): void;
    get detailsFormControl(): {
        [key: string]: import("@angular/forms").AbstractControl<any, any>;
    };
    onInput(event: Event, fieldtype: any, label: any, required: boolean): void;
    selectedPage(page: any): void;
    loadDropDowns(): void;
    getBasicDetailsbyId(): void;
    filterPageList(): void;
    setTooltip(displayValue: any): void;
    getBacisInfo(): void;
    navigateToNextPage(): void;
    routeToNextPage(): void;
    goBack(): void;
    validationPage(): any;
    pageNameFormat(): void;
    onPageNameInput(event: KeyboardEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BasicInfoComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BasicInfoComponent, "app-basic-info", never, {}, {}, never, never, false, never>;
}
