import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Component, EventEmitter, Input, Output, ViewChildren } from '@angular/core';
import { Validators } from '@angular/forms';
import { AppConstants } from '../../../@core/constants/app-constants';
import { AlertService } from '../../../@core/services/alert.service';
import { AuthService } from '../../../@core/services/auth.service';
import { DataSourceService } from '../../../@core/services/data-source.service';
import { LocalService } from '../../../@core/services/local.service';
import { PageBuilderAddService } from '../../../@core/services/page-builder-add.service';
import { PageBuilderService } from '../../page-builder-version/@core/page-builder.service';
import dataGrid from '../@core/dataGrid.json';
import { documentJson } from './JSON.const';
import { QueryParamsService } from './query-params.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/router";
import * as i3 from "../../../@core/services/data-store.service";
import * as i4 from "@angular/common";
import * as i5 from "primeng/api";
import * as i6 from "primeng/tooltip";
import * as i7 from "primeng/inputtext";
import * as i8 from "primeng/dropdown";
import * as i9 from "primeng/card";
import * as i10 from "primeng/multiselect";
import * as i11 from "@angular/cdk/drag-drop";
import * as i12 from "../../../@core/directives/permission.directive";
import * as i13 from "primeng/panel";
export class QueryParamsComponent {
    injector;
    formBuilder;
    cdRef;
    route;
    _storeservice;
    router;
    selectAllCheckBox;
    schemaList;
    tableList;
    relatedTableList;
    autoFieldMappingForm;
    autoFieldMappingArray;
    selectedSchema;
    selectedFields = [];
    unselectedFields = [];
    tableFields = {};
    tempTableFields = {};
    leftTableFields = [];
    rightTableFields = [];
    selectedTableList = [];
    selectedRelatedTableList = [];
    fieldMapping = [];
    totalFields;
    selectedTable;
    allFieldList = {};
    noOfColumns = 1;
    form;
    fieldDatatype;
    formData;
    tableSchemaConfig;
    tableSelection;
    relatedTableSelection = [];
    searchParams;
    isDynamicSearchBaseQuery;
    isGridPage;
    tableData;
    formDataChanged = new EventEmitter();
    id = '';
    tablelisturl = '/api/database';
    nColumns = [
        {
            key: 1,
            value: 1
        },
        {
            key: 2,
            value: 2
        },
        {
            key: 3,
            value: 3
        },
        {
            key: 4,
            value: 4
        }
    ];
    leftSelectionItem = [];
    rightSelectionItem = [];
    queryParamForm;
    queryParamFormArray;
    dublicateSchemaList = [];
    dublicateTableList = [];
    searchParamLength;
    assetList;
    tableFieldList;
    relatedTableFieldList;
    selectedTableField = [];
    relatedSelectedTableField = [];
    requiredField = [];
    selectedPage;
    basicPageInformation;
    showSearchInputFields;
    // pageTypeList: any;
    pageBuilderAddService;
    queryParamsService;
    _localstore;
    alert;
    pageBuilderService;
    filteredtableFieldList;
    authService;
    orgSubs;
    orgId;
    gridConfigFormArray = [];
    gridConfigList;
    fieldArr = [];
    isOCRChecked;
    selectedDocumentType;
    ocrFields;
    documentType = documentJson;
    dataGrid;
    isNewPage;
    isSchemaChanged;
    isRelatableTableSelected;
    isSaveGridFields;
    previousSelectedColumns = [];
    dataSourceService;
    dbAliasName;
    filteredrelatedtableFieldList;
    RBACORG;
    constructor(injector, formBuilder, cdRef, route, _storeservice, router) {
        this.injector = injector;
        this.formBuilder = formBuilder;
        this.cdRef = cdRef;
        this.route = route;
        this._storeservice = _storeservice;
        this.router = router;
        this.pageBuilderAddService = injector.get(PageBuilderAddService);
        this.dataSourceService = injector.get(DataSourceService);
        this.queryParamsService = injector.get(QueryParamsService);
        this._localstore = injector.get(LocalService);
        this.alert = injector.get(AlertService);
        this.pageBuilderService = injector.get(PageBuilderService);
        this.authService = injector.get(AuthService);
        this.dataGrid = dataGrid;
        this.requiredField = [
            {
                name: 'True',
                value: 'true'
            },
            {
                name: 'False',
                value: 'false'
            }
        ];
        this.pageBuilderAddService.currentPageType.subscribe(page => (this.selectedPage = page && typeof page === "string" ? JSON.parse(page) : page));
        this.showSearchInputFields = false;
        this.isSchemaChanged = false;
        this.isRelatableTableSelected = false;
        this.isSaveGridFields = false;
        this.isNewPage = this._localstore.getObj('CREATE PAGE');
        this.id = this.route.snapshot.paramMap.get('id');
        this.basicPageInformation = this._localstore.getObj('PAGEDESIGN_BASICINFO');
        this._localstore.setItem('isTableFieldsSaved', false);
        this._localstore.setItem('isSchemaSelected', false);
        this._localstore.setItem('isTableSelected', false);
        this._localstore.setItem('isColumnChecked', false);
        this._localstore.setItem('isColumnChanged', false);
    }
    async ngOnInit() {
        this.loadForm();
        this.dbAliasName = await this.getOrganizationDbs();
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res) {
                this.RBACORG = res['RBACORG'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                if (this.orgId) {
                    this.getSchemaList();
                }
            }
        });
        if (this.basicPageInformation.pagetype === 'BUSP') {
            this.showSearchInputFields = true;
        }
        if (!this.id) {
            const validation = this.validationPage();
            if (!validation) {
                this.router.navigate(['/pages/page-design/add/basic-info'], { relativeTo: this.route });
                return this.alert.error('Please fill in all the required fields.');
            }
        }
        this.fieldDatatype = [
            { desc: 'Text Field', value: 'textfield' },
            { desc: 'Text Area', value: 'textarea' },
            {
                desc: 'Number',
                value: 'number'
            },
            {
                desc: 'Date',
                value: 'datetime'
            },
            {
                desc: 'Password',
                value: 'password'
            },
            {
                desc: 'Checkbox',
                value: 'checkbox'
            },
            {
                desc: 'Select Boxes',
                value: 'selectboxes'
            },
            {
                desc: 'Select',
                value: 'select'
            },
            {
                desc: 'Radio',
                value: 'radio'
            },
            {
                desc: 'Button',
                value: 'button'
            }
        ];
        this.pageBuilderAddService.currentFormData.subscribe((data) => {
            this.formData = data;
            // const gridConfigTest = JSON.parse(data.gridconfig);
            if (this.formData.id === '') {
                this.selectedSchema = '';
                this.resetTableFields();
            }
            if (this.formData.searchparams && typeof this.formData.searchparams === 'string') {
                this.searchParams = JSON.parse(this.formData.searchparams);
            }
            else {
                this.searchParams = this.formData.searchparams ? this.formData.searchparams : {};
            }
            this.baseQueryCheck();
            if (this.router.url.includes('grid-field') && !this.isSaveGridFields) {
                this.schemaTableCheck();
            }
        });
    }
    getOrganizationDbs() {
        return this.dataSourceService.getOrganizationDbs()
            .toPromise()
            .then(response => {
            return response['data']['dbaliasname'];
        }, _error => this.alert.error(AppConstants.errorMessage));
    }
    baseQueryCheck() {
        if (this.isDynamicSearchBaseQuery) {
            if (this.searchParams &&
                this.searchParams.baseQuery &&
                (this.selectedPage[0].lookupkey === 'DSP' || this.selectedPage[0].lookupkey === 'BUSP')) {
                this.tableSchemaConfig =
                    typeof this.searchParams.baseQuery === 'string'
                        ? JSON.parse(this.searchParams.baseQuery)
                        : this.searchParams.baseQuery;
            }
        }
        else {
            this.tableSchemaConfig =
                this.formData.tableschemaconfig && typeof this.formData.tableschemaconfig === 'string'
                    ? JSON.parse(this.formData.tableschemaconfig)
                    : this.formData.tableschemaconfig;
        }
    }
    schemaTableCheck() {
        if (this.tableSchemaConfig && Object.keys(this.tableSchemaConfig).length) {
            this.setTableSchemaConfig();
            this.setAutoFieldMapping();
            this._localstore.setItem('isTableFieldsSaved', true);
        }
        if (this.searchParams && this.searchParams.searchParamFormArray && this.searchParams.searchParamFormArray.length) {
            this.setQueryParams();
        }
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    ngAfterViewChecked() {
        this.cdRef.detectChanges();
    }
    async getSchemaList() {
        if (this.dbAliasName) {
            this.queryParamsService.getSchemaList(this.orgId, this.dbAliasName).subscribe(result => {
                this.schemaList = result['data'].map(data => data.name.includes('dmi') ? { ...data, label: 'jjis' } : { ...data, label: data.name });
                this.dublicateSchemaList = [...this.schemaList];
            }, _err => {
                this.selectedSchema = '';
                this.resetTableFields();
            });
        }
    }
    drop(event) {
        moveItemInArray(this.autoFieldMappingForm.controls['autoFieldMappingArray']['controls'], event.previousIndex, event.currentIndex);
    }
    loadForm() {
        this.autoFieldMappingForm = this.formBuilder.group({
            autoFieldMappingArray: this.formBuilder.array([this.createAutoFieldMapping()])
        });
        this.queryParamForm = this.formBuilder.group({
            queryParamFormArray: this.formBuilder.array([this.createQueryParams()])
        });
    }
    createQueryParams() {
        return this.formBuilder.group({
            paramName: [''],
            label: [''],
            logicalOperators: [''],
            operators: [''],
            tableName: [''],
            schema: ['']
        });
    }
    searchColumnFields(event) {
        const value = event.target.value.toLowerCase();
        this.filteredtableFieldList = this.tableFieldList.filter(a => a?.name?.toLowerCase().startsWith(value));
        this.filteredrelatedtableFieldList = this.relatedTableFieldList.map(tableField => {
            return {
                table: tableField.table,
                columns: tableField.columns.filter(field => field?.name?.toLowerCase().startsWith(value))
            };
        });
        this.selectAllCheckBox.forEach(element => {
            element.nativeElement.checked = false;
        });
    }
    clearSearch(inputElement) {
        inputElement.value = '';
        this.searchColumnFields({ target: inputElement });
    }
    setQueryParams() {
        const control = this.queryParamForm.controls['queryParamFormArray'];
        control.controls = [];
        this.searchParamLength = this.searchParams.searchParamFormArray.length;
        this.searchParams.searchParamFormArray.forEach(x => {
            control.push(this.buildQueryFormArray(x));
        });
    }
    buildQueryFormArray(x) {
        return this.formBuilder.group({
            paramName: x.paramName ? x.paramName : '',
            label: x.label ? x.label : '',
            logicalOperators: x.logicalOperators ? x.logicalOperators : '',
            operators: x.operators ? x.operators : '',
            tableName: x.tableName ? x.tableName : '',
            schema: x.schema ? x.schema : ''
        });
    }
    setTableSchemaConfig() {
        this.selectedSchema = this.tableSchemaConfig.schema;
        this.selectedTableList = this.tableSchemaConfig.tablelist;
        this.selectedRelatedTableList = this.tableSchemaConfig.selectedRelatedTableList;
        this.getTables(this.selectedSchema);
        if (typeof this.tableSchemaConfig === 'object') {
            this.tableSelection = this.tableSchemaConfig.tablefields?.primary;
        }
        this.totalFields = this.tableSchemaConfig.fieldmapping.length;
        this.tableFields = this.tableSchemaConfig.tablefields;
        this.tempTableFields = this.tableSchemaConfig.tablefields;
        this.rightTableFields = this.tableFields[this.tableSelection];
        this.fieldMapping = this.tableSchemaConfig.fieldmapping;
        this.previousSelectedColumns = this.tableSchemaConfig.fieldmapping;
        this.previousSelectedColumns.length && this._localstore.setItem('isColumnChecked', true);
        this.noOfColumns = this.tableSchemaConfig.noofcolumns ? this.tableSchemaConfig.noofcolumns : 1;
        this.isOCRChecked = this.tableSchemaConfig.ocrchecked ? this.tableSchemaConfig.ocrchecked : false;
        this.selectedDocumentType = this.tableSchemaConfig.selectedDocumentType
            ? this.tableSchemaConfig.selectedDocumentType
            : this.selectedDocumentType;
        this.relatedTableList = this.tableSchemaConfig.relatedTableList;
        this.getTableFields(this.tableSelection);
        this.relatedTableSelection = this.tableSchemaConfig.selectedRelatedTableList;
        this.getColumnsOfRelatedTables(this.relatedTableSelection);
    }
    createAutoFieldMapping() {
        this.autoFieldMappingForm = this.formBuilder.group({
            schema: ['', [Validators.required]],
            tablename: ['', [Validators.required]],
            field: ['', [Validators.required]],
            label: ['', [Validators.required]],
            datatype: ['', [Validators.required]],
            required: false,
            result: false,
            criteria: false,
            ocrkey: ['']
        });
    }
    setAutoFieldMapping() {
        const control = this.autoFieldMappingForm.controls['autoFieldMappingArray'];
        control.controls = [];
        if (this.fieldMapping.length) {
            this.fieldMapping.forEach(x => {
                control.push(this.buildAutoFieldMapping(x));
            });
        }
    }
    buildAutoFieldMapping(x) {
        const resultKey = x.hasOwnProperty('result') ? true : false;
        // const criteriaKey = x.hasOwnProperty('criteria') ? true : false;
        return this.formBuilder.group({
            schema: this.selectedSchema ? this.selectedSchema : x.schema,
            tablename: x.tablename ? x.tablename : '',
            field: x.field ? x.field : '',
            label: x.label ? x.label : '',
            datatype: x.datatype ? x.datatype : '',
            required: x.required ? x.required : false,
            result: !resultKey ? true : x.result,
            // criteria: !criteriaKey ? true : x.criteria,
            criteria: x.criteria ? x.criteria : false,
            ocrkey: x.ocrkey ? x.ocrkey : ''
        });
    }
    toggleLeftSelection(value, item) {
        if (value) {
            if (this.leftSelectionItem.indexOf(item) === -1) {
                this.leftSelectionItem.push(item);
            }
        }
        else {
            const index = this.leftSelectionItem.indexOf(item);
            if (index !== -1) {
                this.leftSelectionItem.splice(index, 1);
            }
        }
    }
    resetDropdownList(type) {
        if (type === 'schema') {
            this.schemaList = this.dublicateSchemaList;
        }
        else {
            this.tableList = this.dublicateTableList;
        }
    }
    clearSelectedColumnFields() {
        const control = this.autoFieldMappingForm.controls['autoFieldMappingArray'];
        control.controls = [];
        this.selectAllCheckBox.forEach(element => {
            element.nativeElement.checked = false;
        });
        this.filteredtableFieldList.map(a => (a.active = false));
        for (const tableField of this.filteredrelatedtableFieldList) {
            for (const field of tableField.columns) {
                field.active = field.disabled;
            }
        }
        this.selectedTableField = [];
    }
    checkAllColumnFields(event) {
        this.filteredtableFieldList.map(a => (a.active = event.target.checked));
        if (event.target.checked) {
            const control = this.autoFieldMappingForm.controls['autoFieldMappingArray'];
            control.controls = [];
            this.selectedTableField = [];
            for (const field of this.filteredtableFieldList) {
                this.selectedTableFields(field, 'all');
            }
            for (const tableField of this.filteredrelatedtableFieldList) {
                const table = tableField.table;
                for (const field of tableField.columns) {
                    if (!field.disabled) {
                        field.active = true;
                        this.selectedRelatedTableFields(table, field, 'all');
                    }
                }
            }
        }
        else {
            this._localstore.setItem('isColumnChecked', false);
            this.clearSelectedColumnFields();
        }
    }
    selectedRelatedTableFields(table, field, status) {
        field.related = true;
        field.relatedTable = table;
        this.selectedTableFields(field, status);
    }
    selectedTableFields(field, status) {
        if (field) {
            if (!this.selectedTableField.includes(field)) {
                this.fieldIncludeCheck(status, field);
                this._localstore.setItem('isColumnChecked', true);
            }
            else {
                const fieldIndex = this.selectedTableField.indexOf(field);
                if (fieldIndex !== -1) {
                    if (status !== 'all') {
                        field.active = false;
                    }
                    this.checkFields();
                    const index = 1;
                    const isRightAdd = false;
                    this.selectedTableField.splice(fieldIndex, 1);
                    this.selectedTableField.length == 0 && this._localstore.setItem('isColumnChecked', false);
                    this.validateColumnChanged();
                    const selectedFields = this.selectedTableField.map(a => a.name);
                    this.getSelectedTableFields(selectedFields, isRightAdd, field.name, index, this.selectedTableField, field);
                }
            }
        }
        else {
            this.selectedTableField = [];
        }
    }
    fieldIncludeCheck(status, field) {
        if (status !== 'all') {
            field.active = true;
        }
        this.checkFields();
        this.selectedTableField.push(field);
        this.validateColumnChanged();
        if (field.related) {
            const relatedTable = this.relatedSelectedTableField[field.relatedTable];
            if (relatedTable) {
                this.relatedSelectedTableField[field.relatedTable].push(field);
            }
            else {
                this.relatedSelectedTableField[field.relatedTable] = [field];
            }
        }
        const selectedFields = this.selectedTableField.map(a => a.name);
        const index = -1;
        const isRightAdd = true;
        this.getSelectedTableFields(selectedFields, isRightAdd, selectedFields, index, this.selectedTableField, field);
    }
    toggleRightSelection(value, item) {
        if (value) {
            if (this.rightSelectionItem.indexOf(item) === -1) {
                this.rightSelectionItem.push(item);
            }
        }
        else {
            const index = this.rightSelectionItem.indexOf(item);
            if (index !== -1) {
                this.rightSelectionItem.splice(index, 1);
            }
        }
    }
    getSelectedTableFields(data, isRightAdd, label, index = -1, fields, fieldDetails) {
        this.rightTableFields = data;
        if (fieldDetails) {
            this.rightAddCheckField(isRightAdd, index, fieldDetails, data); /*Complexity splitted */
        }
        else {
            this.rightAddCheck(isRightAdd, index, label, data); /*Complexity splitted */
        }
        this.tableFields = {
            primary: this.selectedTable,
            relations: this.selectedRelatedTableList
        };
        fields.forEach(_field => {
            this.fieldTablecheck(_field); /*Complexity splitted */
        });
        this.selectedTableList = this.tableFields ? Object.keys(this.tableFields) : [];
        if (label.length && isRightAdd) {
            let dataType;
            label.forEach((item, index) => {
                dataType = 'textfield';
                const selectedField = this.allFieldList[this.selectedTable];
                const autoFields = this.autoFieldMappingForm.getRawValue().autoFieldMappingArray;
                const field = Object.keys(selectedField).find(key => selectedField[key] === item);
                const selectedFields = this.selectedTableField.filter(list => (list.name === item && list.table_name === fields[index].table_name))[0];
                if (selectedFields.type === 'integer' || selectedFields.type === 'smallint') {
                    dataType = 'number';
                }
                else if (selectedFields.type === 'timestamp with time zone' ||
                    selectedFields.type === 'timestamp without time zone' ||
                    selectedFields.type === 'timestamp(6) with time zone' ||
                    selectedFields.type === 'timestamp(6) without time zone') {
                    dataType = 'datetime';
                }
                else if ((this.basicPageInformation.pagetype === 'BGP' || this.basicPageInformation.pagetype === 'DR') && selectedFields.type === 'date') {
                    dataType = 'date';
                }
                else if (this.basicPageInformation.pagetype === 'ATPBDM' && selectedFields.type === 'date') {
                    dataType = 'datetime';
                }
                else if (selectedFields.type === 'boolean') {
                    dataType = 'checkbox';
                }
                else if (selectedFields.type === 'text') {
                    dataType = 'textarea';
                }
                else {
                    dataType = 'textfield';
                }
                this.businessNameCheck(selectedFields, autoFields, item, dataType, field); /*Complexity splitted */
            });
        }
        this.totalFields = this.autoFieldMappingArray.length;
    }
    rightAddCheck(isRightAdd, index, label, data) {
        if (!isRightAdd && index > -1) {
            this.autoFieldMappingArray = this.autoFieldMappingForm.get('autoFieldMappingArray');
            for (let i = this.autoFieldMappingArray.length - 1; i >= 0; i--) {
                const item = this.autoFieldMappingArray.controls[i];
                if (label.includes(item.value.field)) {
                    this.autoFieldMappingArray.removeAt(i);
                }
            }
            this.queryParamFormArray = this.queryParamForm.get('queryParamFormArray');
            for (let i = this.queryParamFormArray.length - 1; i >= 0; i--) {
                const item = this.queryParamFormArray.controls[i];
                if (label.includes(item.value.field)) {
                    this.queryParamFormArray.removeAt(i);
                }
            }
            if (!data.length) {
                this.tableFields = [];
                this.selectedTableList = [];
            }
        }
    }
    rightAddCheckField(isRightAdd, index, label, data) {
        if (!isRightAdd && index > -1) {
            this.autoFieldMappingArray = this.autoFieldMappingForm.get('autoFieldMappingArray');
            for (let i = this.autoFieldMappingArray.length - 1; i >= 0; i--) {
                const item = this.autoFieldMappingArray.controls[i];
                if (label?.name == item.value.field && label?.table_name == item.value.tablename) {
                    this.autoFieldMappingArray.removeAt(i);
                }
            }
            this.queryParamFormArray = this.queryParamForm.get('queryParamFormArray');
            for (let i = this.queryParamFormArray.length - 1; i >= 0; i--) {
                const item = this.queryParamFormArray.controls[i];
                if (label?.name == item.value.field) {
                    this.queryParamFormArray.removeAt(i);
                }
            }
            if (!data.length) {
                this.tableFields = [];
                this.selectedTableList = [];
            }
        }
    }
    fieldTablecheck(_field) {
        const tableName = _field.table_name;
        // const isRelated = _field.related;
        // const table = isRelated ? this.tableFields[tableName] : this.tableFields[this.selectedTable];
        const table = tableName ? this.tableFields[tableName] : this.tableFields[this.selectedTable];
        if (table) {
            table.push(_field.name);
        }
        else {
            // this.tableFields[isRelated ? tableName : this.selectedTable] = [_field.name];
            this.tableFields[tableName] = [_field.name];
        }
    }
    businessNameCheck(selectedFields, autoFields, item, dataType, field) {
        let businessName = '';
        if (selectedFields.business_name) {
            businessName = selectedFields.business_name;
        }
        else {
            businessName = selectedFields.name;
        }
        // const tableName = selectedFields.relatedTable ? selectedFields.relatedTable : this.selectedTable;
        const tableName = selectedFields.table_name ? selectedFields.table_name : this.selectedTable;
        const isArrayExist = autoFields.find(list => list.schema === this.selectedSchema && list.tablename === tableName && list.field == item);
        if (!isArrayExist) {
            const obj = {
                schema: this.selectedSchema,
                tablename: tableName,
                field: item,
                label: businessName,
                datatype: dataType,
                required: false
            };
            this.autoFieldMappingArray = this.autoFieldMappingForm.get('autoFieldMappingArray');
            this.autoFieldMappingArray.push(this.buildAutoFieldMapping(obj));
            const queryObj = {
                paramName: field,
                label: item,
                tableName: selectedFields.relatedTable ? selectedFields.relatedTable : this.selectedTable,
                schema: this.selectedSchema,
                logicalOperators: 'and',
                operators: '='
            };
            this.queryParamFormArray = this.queryParamForm.get('queryParamFormArray');
            this.queryParamFormArray.push(this.buildQueryFormArray(queryObj));
        }
    }
    getTables(schema) {
        this.resetTableFields();
        this._localstore.setItem('isSchemaSelected', false);
        this._localstore.setItem('isTableSelected', false);
        this._localstore.setItem('isColumnChecked', false);
        this._localstore.setItem('isTableFieldsSaved', false);
        if (schema) {
            this._localstore.setItem('isSchemaSelected', true);
            this.tableFieldList = [];
            this.filteredtableFieldList = [];
            this.selectedSchema = schema;
            this.queryParamsService.getTableBySchemaName(schema, this.dbAliasName).subscribe(result => {
                if (result) {
                    this.tableList = result['data'];
                    this.dublicateTableList = this.tableList;
                }
            }, _err => {
                this.tableList = [];
            });
        }
    }
    getRelatedTablesFields(table, schema) {
        this.queryParamsService.getRelatedTableFields(table, schema, this.dbAliasName).subscribe((result) => {
            const relatedTables = result?.data;
            if (relatedTables && relatedTables.length) {
                this.relatedTableList = relatedTables.map(_relatedTable => {
                    return {
                        label: `${_relatedTable['relatedtable']}`,
                        value: _relatedTable
                    };
                });
            }
        });
    }
    enableDataGrid(_event, table) {
        for (const relatedTable of this.selectedRelatedTableList) {
            if (table.relatedtable === relatedTable.relatedtable) {
                relatedTable.showDataGrid = true;
            }
        }
    }
    removeSelectedRelatedTableColumns(tablename) {
        this.filteredrelatedtableFieldList.map(r => {
            if (r.table === tablename) {
                r.columns.map(c => {
                    c.active ? (c['active'] = false) : c.active;
                });
            }
        });
        const selectedFieldArray = this.autoFieldMappingForm.get('autoFieldMappingArray');
        const filteredArray = selectedFieldArray.controls.filter(control => control.value.tablename !== tablename);
        selectedFieldArray.clear();
        filteredArray.forEach(filteredControl => selectedFieldArray.push(filteredControl));
        if (this.tableFields[tablename]) {
            delete this.tableFields[tablename];
        }
        this.selectedTableField = this.selectedTableField.filter(c => !(c?.related && c?.relatedTable === tablename));
    }
    getColumnsOfRelatedTables(relatedTables) {
        if (relatedTables.length < this.selectedRelatedTableList.length) {
            const differences = [];
            this.selectedRelatedTableList.forEach(rt => {
                const matchingObject = relatedTables.find(mt => rt.relatedtable === mt.relatedtable);
                if (!matchingObject) {
                    differences.push(rt);
                }
            });
            this.removeSelectedRelatedTableColumns(differences[0].relatedtable);
        }
        this.selectedRelatedTableList = relatedTables;
        if (this.selectedRelatedTableList) {
            const tableDetails = relatedTables.map(_rt => {
                return {
                    dbaliasname: this.dbAliasName,
                    table: _rt.relatedtable,
                    schema: _rt.relatedschema
                };
            });
            this.coloumnNameCheck(tableDetails, relatedTables);
        }
    }
    coloumnNameCheck(tableDetails, relatedTables) {
        this.queryParamsService.getColumnsOfRelatedTables(tableDetails).subscribe((_tableDetails) => {
            if (_tableDetails?.data) {
                this.relatedTableFieldList = _tableDetails.data.map((_columns, _index) => {
                    _columns = _columns.map(_column => {
                        if (_column.name === relatedTables[_index].relatedcolumn) {
                            _column.disabled = true;
                            _column.active = true;
                            return _column;
                        }
                        const tableName = relatedTables[_index].relatedtable;
                        if (tableName) {
                            const tableActiveColumns = this.tableFields[tableName];
                            if (tableActiveColumns && tableActiveColumns.includes(_column.name)) {
                                _column.active = true;
                                this.selectedTableField.push(_column);
                            }
                        }
                        return _column;
                    });
                    return {
                        table: tableDetails[_index].table,
                        columns: _columns
                    };
                });
                this.filteredrelatedtableFieldList = this.relatedTableFieldList;
            }
        });
    }
    getTableFields(table, isSchemaChanged) {
        this.isSchemaChanged = isSchemaChanged;
        this.unselectedFields = [];
        this.selectedFields = [];
        this.relatedTableFieldList = [];
        this.relatedTableSelection = [];
        this.selectedRelatedTableList = [];
        const control = this.autoFieldMappingForm.controls['autoFieldMappingArray'];
        control.controls = [];
        control.setValue([]);
        this.selectedTableField = [];
        this.filteredtableFieldList = [];
        this.filteredrelatedtableFieldList = [];
        this.tableFieldList = [];
        this._localstore.setItem('isTableSelected', false);
        this._localstore.setItem('isColumnChecked', false);
        this._localstore.setItem('isTableFieldsSaved', false);
        if (table) {
            this._localstore.setItem('isTableSelected', true);
            this.selectedTable = table;
            this.getRelatedTablesFields(this.selectedTable, this.selectedSchema);
            this.queryParamsService
                .getTableFields(this.selectedSchema, this.selectedTable, this.dbAliasName, this.basicPageInformation.pagetype)
                .subscribe((result) => {
                if (result && result.data) {
                    this.tableFieldList = result['data'].map(field => ({
                        ...field,
                        type: field.type.toLowerCase()
                    }));
                    this.isCheckCondition();
                    this.selectedTableField = this.tableFieldList.filter(x => x.active === true);
                    this.allFieldList[this.selectedTable] = {};
                    const tableDesc = this.tableFieldList.map(item => (this.allFieldList[this.selectedTable][item.name] = item.name));
                    if (this.isSchemaChanged && !this.selectedRelatedTableList.length && this.tableSchemaConfig?.tablefields?.primary
                        && this.tableSchemaConfig?.tablefields?.primary === this.selectedTable) {
                        this.selectedTableField = [];
                        // this.fieldMapping = this.tableSchemaConfig.fieldmapping.filter(field => this.tableSchemaConfig?.tablefields?.primary === this.selectedTable
                        //   && field.tablename === this.selectedTable);
                        for (const field of this.tableFieldList) {
                            if (field.table_name === this.tableSchemaConfig?.tablefields?.primary && field.active) {
                                this.selectedTableFields(field);
                            }
                            else {
                                field.active = false;
                            }
                        }
                    }
                    else if (this.isSchemaChanged && !this.selectedRelatedTableList.length && this.tableSchemaConfig?.tablefields?.primary
                        && this.tableSchemaConfig?.tablefields?.primary !== this.selectedTable) {
                        this.selectedTableField = [];
                        this.tableFieldList.forEach(field => {
                            if (field.table_name !== this.tableSchemaConfig?.tablefields?.primary) {
                                field.active = false;
                            }
                        });
                    }
                    // const activeFields = this.tableFieldList.filter(field => field.active);
                    // if (activeFields.length) {
                    //   this.fieldMapping.forEach(x => {
                    //     control.push(this.buildAutoFieldMapping(x));
                    //   });
                    // }
                    this.filteredtableFieldList = this.tableFieldList;
                    this.previousSelectedColumns.length && this._localstore.setItem('isColumnChecked', true);
                    this.checkFields();
                    if (this.tableFields && this.tableFields[this.selectedTable]) {
                        // const primary = this.tableFieldList.find(t => t.is_primary);
                        // this.tableFields.primary_column = primary?.name || 'id';
                        this.selectedFields = this.tableFields[this.selectedTable];
                        this.unselectedFields = tableDesc.filter(item => !this.selectedFields.includes(item));
                    }
                    else {
                        this.unselectedFields = tableDesc;
                    }
                    this.tableSelection = table;
                }
            });
        }
    }
    isCheckCondition() {
        this.tableFieldList = this.tableFieldList.map(x => {
            // const ischeck = this.tableSchemaConfig ? this.tableSchemaConfig.fieldmapping.filter(y => y.field === x.name) : '';
            const ischeck = this.tableSchemaConfig ? this.tableSchemaConfig.fieldmapping.filter(y => (y.field === x.name && y.tablename === x.table_name)) : '';
            if (ischeck.length > 0) {
                x.active = true;
                return x;
            }
            else {
                x.active = false;
                return x;
            }
        });
    }
    checkFields() {
        this.selectAllCheckBox.forEach(element => {
            const fieldList = this.filteredtableFieldList.some(a => !a.active);
            if (fieldList) {
                element.nativeElement.checked = false;
            }
            else {
                element.nativeElement.checked = true;
            }
        });
        this.selectAllCheckBox.forEach(element => {
            const fieldList = this.filteredrelatedtableFieldList.some(tableField => tableField.columns.some(field => !field.active));
            if (fieldList) {
                element.nativeElement.checked = false;
            }
            else {
                element.nativeElement.checked = true;
            }
        });
    }
    resetTableFields() {
        this.leftSelectionItem = [];
        this.rightSelectionItem = [];
        this.selectedTable = '';
        this.tableSelection = '';
        this.relatedTableSelection = [];
        this.selectedRelatedTableList = [];
        this.tableFieldList = [];
        this.filteredtableFieldList = [];
        this.relatedTableFieldList = [];
        this.filteredrelatedtableFieldList = [];
        this.tableList = [];
        this.tableFields = {};
        this.leftTableFields = [];
        this.rightTableFields = [];
        this.unselectedFields = [];
        this.selectedFields = [];
        this.selectedTableList = [];
        this.fieldMapping = [];
        this.totalFields = 0;
        this.noOfColumns = 1;
        this.isOCRChecked = false;
        const control = this.autoFieldMappingForm.controls['autoFieldMappingArray'];
        control.controls = [];
        const queryFormcontrol = this.queryParamForm.controls['queryParamFormArray'];
        queryFormcontrol.controls = [];
        this.form = {
            components: []
        };
        // this.filteredtableFieldList.map(a => (a.active = false));
        // this.clearSelectedColumnFields();
    }
    skipToNextPage() {
        if (this.basicPageInformation.pagetype === 'BGP') {
            this.router.navigate(['../grid-config'], { relativeTo: this.route });
        }
        else if (this.basicPageInformation.pagetype === 'DR') {
            this.router.navigate(['../page-ribbon-design'], { relativeTo: this.route });
        }
        else {
            this.router.navigate(['../page-design'], { relativeTo: this.route });
        }
    }
    saveTableField() {
        this.isSaveGridFields = true;
        if (this.selectedTableField.length < 1) {
            return this.alert.error('Please select at least one column.');
        }
        const primary = this.tableFieldList.find(t => t.is_primary);
        if (!primary) {
            return this.alert.error('Select Table not having Primary Key');
        }
        if (this.selectedPage[0].lookupkey == 'ATPBDM') {
            const isprimarycolumn = this.selectedTableField.find(t => t.name == primary['name']);
            if (isprimarycolumn) {
                return this.alert.error('Primary Key not allowed to Select as Input field');
            }
        }
        if (this.formData) {
            this.fieldMapping = this.autoFieldMappingForm.getRawValue().autoFieldMappingArray;
            const selectedTableList = this.fieldMapping.map((item) => item.tablename);
            this.selectedTableList = [...new Set(selectedTableList)];
            this.selectedPageTypeCheck(); /* Complexity splitted */
            const tableSchemaConfig = {
                schema: this.selectedSchema,
                dbaliasname: this.dbAliasName,
                tablelist: this.selectedTableList,
                tablefields: this.tableFields,
                fieldmapping: this.fieldMapping,
                noofcolumns: this.noOfColumns,
                ocrchecked: this.isOCRChecked,
                selectedDocumentType: this.selectedDocumentType,
                // relatedTableList: this.relatedTableList,
                selectedRelatedTableList: this.selectedRelatedTableList
            };
            this.formDataChanged.emit(tableSchemaConfig);
            this.baseSearchQueryCheck(tableSchemaConfig); /* Complexity splitted */
            this.gridConfigListConditions(tableSchemaConfig); /* Complexity splitted */
            const validation = this.validationSave();
            const createPage = this._localstore.getObj('CREATE PAGE');
            if (createPage) {
                if (this.formData && this.formData?.activeVersion?.id) {
                    this.formData.id = this.formData?.activeVersion?.id;
                }
            }
            if (this.selectedPage[0].lookupkey == 'BGP') {
                const isRelatedTableValid = this.checkInputData();
                if (!isRelatedTableValid) {
                    return this.alert.error('Please select atlease one field from selected table field list!');
                }
            }
            if (validation) {
                this.pageBuilderService.updatePageVersion(this.formData.id, this.formData, createPage).subscribe(() => {
                    this.isValidationCondition(); /* Complexity splitted */
                }, error => {
                    this.alert.error(error.error.message);
                });
                this.saveAssetCheck();
                this.pageBuilderAddService.setFormData(this.formData);
                /* Complexity splitted */
            }
            else {
                this.conditionCheckCreate(); /* Complexity splitted */
            }
        }
    }
    selectedPageTypeCheck() {
        /* From saveTableField() */
        if (this.selectedPage.length &&
            (this.selectedPage[0].lookupkey === 'DSP' ||
                this.selectedPage[0].lookupkey === 'BUSP' ||
                this.selectedPage[0].lookupkey === 'ATPBDM')) {
            this.generateDesignForm();
        }
    }
    baseSearchQueryCheck(tableSchemaConfig) {
        /* From saveTableField() */
        if (this.isDynamicSearchBaseQuery &&
            (this.selectedPage[0].lookupkey === 'DSP' || this.selectedPage[0].lookupkey === 'BUSP')) {
            this.searchParams.baseQuery = tableSchemaConfig;
            this.searchParams.searchParamFormArray = this.queryParamForm.getRawValue().queryParamFormArray;
            this.formData.searchparams = this.searchParams ? JSON.stringify(this.searchParams) : '';
            this.formData.templatejson = JSON.stringify(this.form);
        }
        else if ((!this.isDynamicSearchBaseQuery &&
            this.selectedPage.length &&
            (this.selectedPage[0].lookupkey === 'DSP' || this.selectedPage[0].lookupkey === 'BUSP')) ||
            (this.selectedPage.length && this.selectedPage[0].lookupkey === 'ATPBDM') ||
            this.selectedPage[0].lookupkey === 'DR') {
            this.formData.tableschemaconfig = JSON.stringify(tableSchemaConfig);
            if (this.selectedPage[0].lookupkey === 'ATPBDM') {
                this.formData.templatejson = JSON.stringify(this.form);
            }
        }
    }
    gridConfigListConditions(tableSchemaConfig) {
        /* From saveTableField() */
        if (this.selectedPage.length &&
            (this.selectedPage[0].lookupkey === 'DGP' ||
                this.selectedPage[0].lookupkey === 'BGP' ||
                (!this.isDynamicSearchBaseQuery && this.selectedPage[0].lookupkey === 'BUSP'))) {
            this.formData.tableschemaconfig = JSON.stringify(tableSchemaConfig);
            const gridConfig = this.formData.gridconfig && typeof this.formData.gridconfig === 'string'
                ? JSON.parse(this.formData.gridconfig)
                : this.formData.gridconfig;
            this.gridConfigCheckCondition(gridConfig); /* Complexity splitted */
            const tempData = [];
            const gridFieldList = this.fieldMapping;
            this.isGridConfigListCheck(gridFieldList, tempData, gridConfig); /* Complexity splitted */
            this.searchParamsCheck(); /* Complexity splitted */
        }
    }
    gridConfigCheckCondition(gridConfig) {
        /* From gridConfigListConditions --> saveTableField */
        if (gridConfig) {
            this.gridConfigFormArray =
                Object.keys(gridConfig).length && gridConfig.gridConfigFormArray && gridConfig.gridConfigFormArray.length
                    ? gridConfig.gridConfigFormArray
                    : [];
        }
    }
    isGridConfigListCheck(gridFieldList, tempData, gridConfig) {
        /* From gridConfigListConditions --> saveTableField */
        if (gridFieldList && gridFieldList.length) {
            this.tempDataItemCheck(gridFieldList, tempData); /* Complexity splitted */
            if (tempData.length) {
                let defaultSortColumn;
                if (gridConfig) {
                    defaultSortColumn = tempData.find(item => item.columnDef === gridConfig.defaultSortColumn);
                }
                this.getGridConfigList(defaultSortColumn, gridConfig, tempData);
            }
        }
        else {
            this.gridConfigList = '';
        }
    }
    tempDataItemCheck(gridFieldList, tempData) {
        /* From isGridConfigListCheck--> gridConfigListConditions --> saveTableField */
        for (const gridField of gridFieldList) {
            let item;
            gridField.columnDef = gridField.columnDef
                ? `${gridField.tablename}.${gridField.columnDef}`
                : `${gridField.tablename}.${gridField.field}`;
            // gridField.columnDef = gridField.columnDef ? gridField.columnDef : gridField.field
            gridField.header = gridField.header ? gridField.header : gridField.label;
            const gridResult = gridField.result;
            const gridCriteria = gridField.criteria;
            if (gridResult) {
                if (this.gridConfigFormArray.length) {
                    item = this.gridConfigFormArray.find(b => {
                        if (b.columnDef === (gridField.columnDef || gridField.field)) {
                            b.result = gridResult;
                            b.criteria = gridCriteria;
                            return b;
                        }
                    });
                }
                if (!item) {
                    item = {
                        columnDef: gridField.columnDef,
                        dateFormat: gridField.datatype === 'date' || gridField.datatype === 'datetime' ? gridField.datatype : '',
                        datetext: '',
                        filter: '',
                        header: gridField.header,
                        icon: '',
                        icontext: '',
                        link: '',
                        sort: '',
                        result: gridField.result,
                        criteria: gridField.criteria
                    };
                }
                tempData.push(item);
            }
        }
    }
    searchParamsCheck() {
        /* From gridConfigListConditions --> saveTableField */
        this.formData.gridconfig =
            this.gridConfigList && Object.keys(this.gridConfigList).length ? JSON.stringify(this.gridConfigList) : null;
        if (this.selectedPage.length &&
            (this.selectedPage[0].lookupkey === 'DGP' || this.selectedPage[0].lookupkey === 'BGP')) {
            this.formData.searchparams = '';
        }
    }
    isValidationCondition() {
        /* From saveTableField() */
        if (this.selectedPage.length && this.selectedPage[0].lookupkey === 'ATPBDM') {
            this.router.navigate(['../page-design'], { relativeTo: this.route });
        }
        else if (this.selectedPage[0].lookupkey === 'DR') {
            this.router.navigate(['../page-ribbon-design'], { relativeTo: this.route });
        }
        else {
            this.router.navigate(['../grid-config'], { relativeTo: this.route });
        }
        this.alert.success('Fields updated successfully');
    }
    getGridConfigList(defaultSortColumn, gridConfig, tempData) {
        /* From isGridConfigListCheck--> gridConfigListConditions --> saveTableField */
        this.gridConfigList = {
            defaultSortColumn: defaultSortColumn ? gridConfig.defaultSortColumn : '',
            defaultSortType: defaultSortColumn ? gridConfig.defaultSortType : '',
            delete: gridConfig && gridConfig.delete ? gridConfig.delete : '',
            edit: gridConfig && gridConfig.edit ? gridConfig.edit : '',
            externalLink: gridConfig && gridConfig.externalLink ? gridConfig.externalLink : '',
            gridConfigFormArray: tempData,
            gridActionFormArray: gridConfig && gridConfig.gridActionFormArray ? gridConfig.gridActionFormArray : ''
        };
    }
    saveAssetCheck() {
        /* From saveTableField() */
        if (this.selectedPage.length &&
            (this.selectedPage[0].lookupkey === 'ATPBDM' ||
                this.selectedPage[0].lookupkey === 'BUSP' ||
                this.selectedPage[0].lookupkey === 'BGP' ||
                this.selectedPage[0].lookupkey === 'DR')) {
            this.saveAsset();
        }
    }
    conditionCheckCreate() {
        /* From saveTableField() */
        this.pageBuilderAddService.createPage(this.formData).subscribe(result => {
            const data = result['data'];
            this.formData.id = data?.id;
            this.formData.activeVersion = data.activeVersion;
            this.pageBuilderAddService.setFormData(this.formData);
            if (!this.id) {
                if (data && Object.keys(data).length) {
                    const id = data.id ? data.id : '';
                    this.formData.id = data.id;
                    if (id) {
                        this.router.navigate(['../edit', id], { relativeTo: this.route });
                    }
                }
            }
            this.saveAssetCheck();
            if (this.selectedPage.length && this.selectedPage[0].lookupkey === 'ATPBDM') {
                this.router.navigate(['../page-design'], { relativeTo: this.route });
            }
            else if (this.selectedPage[0].lookupkey === 'DR') {
                this.router.navigate(['../page-ribbon-design'], { relativeTo: this.route });
            }
            else {
                this.router.navigate(['../grid-config'], { relativeTo: this.route });
            }
            this.alert.success('Fields added successfully');
            this._localstore.setItem('isTableFieldsSaved', true);
        }, error => {
            this.alert.error(error.error.message);
        });
    }
    cancel() {
        this.pageBuilderAddService.returnToList();
    }
    processTemplateJSON(components, inputs) {
        if (components && components.length) {
            components.forEach(_component => {
                if (_component.components) {
                    this.processTemplateJSON(_component.components, inputs);
                }
                else if (_component.columns) {
                    this.processTemplateJSON(_component.columns, inputs);
                }
                else if (_component.input && _component.type !== 'button') {
                    console.log('Adding component');
                    inputs.push(_component);
                }
            });
        }
    }
    async generateDesignForm() {
        const formJSON = this.formData.templatejson ? JSON.parse(this.formData.templatejson) : {};
        console.log(formJSON);
        const inputs = [];
        if (formJSON.components) {
            this.processTemplateJSON(formJSON.components, inputs);
        }
        console.log(inputs);
        const formPanels = [];
        const tableCount = this.selectedTableList.length;
        this.fieldMapping = this.autoFieldMappingForm.getRawValue().autoFieldMappingArray;
        for (let i = 0; i < tableCount; i++) {
            let fieldColumns = [];
            let tableName = this.selectedTableList[i];
            let fieldMapping;
            if (this.fieldMapping && this.fieldMapping.length) {
                fieldMapping = this.fieldMapping.filter(x => x.tablename === tableName && x.field);
            }
            const tableFields = fieldMapping.filter(table => table.tablename === tableName);
            this.tableFieldsCheck(tableFields, inputs, tableName, fieldColumns);
            const uploadComponents = inputs.filter(_input => _input.type === 'fileupload');
            if (uploadComponents && uploadComponents.length) {
                fieldColumns = [...fieldColumns, ...uploadComponents];
            }
            if (this.noOfColumns > 1) {
                fieldColumns = this.splitFieldColumns(fieldColumns, this.noOfColumns);
                fieldColumns = [
                    {
                        clearOnHide: false,
                        label: 'Columns',
                        input: false,
                        tableView: false,
                        key: tableName + ' Columns',
                        columns: fieldColumns,
                        type: 'columns',
                        hideLabel: true,
                        tags: [],
                        conditional: {
                            show: '',
                            when: null,
                            eq: ''
                        },
                        properties: {}
                    }
                ];
            }
            tableName = tableName.split('_').join(' ');
            tableName = tableName[0].toUpperCase() + tableName.slice(1);
            const formPanel = {
                clearOnHide: false,
                key: tableName,
                input: false,
                title: tableName,
                theme: 'default',
                tableView: false,
                components: this.generateDataGrid(fieldColumns, tableName),
                type: 'panel',
                breadcrumb: 'default',
                tags: [],
                conditional: {
                    show: '',
                    when: null,
                    eq: ''
                },
                properties: {},
                hideLabel: false,
                isNew: false
            };
            formPanels.push(formPanel);
        }
        const searchButton = {
            type: 'button',
            theme: 'primary',
            disableOnInvalid: true,
            action: 'submit',
            block: false,
            rightIcon: '',
            leftIcon: '',
            size: 'md',
            key: 'submit',
            tableView: false,
            label: 'Submit',
            input: true,
            $$hashKey: 'object:22',
            autofocus: false,
            customClass: 'text-right',
            event: 'onFormSumit'
        };
        formPanels.push(searchButton);
        this.form = {
            components: formPanels
        };
    }
    tableFieldsCheck(tableFields, inputs, tableName, fieldColumns) {
        if (tableFields.length) {
            tableFields.forEach((element, _index) => {
                const addedElement = inputs.find(_input => _input.key === (tableName !== this.selectedTable ? `${tableName}.` : '') + element.field &&
                    _input.type === element.datatype);
                console.log({ addedElement });
                if (addedElement) {
                    this.addElementValidate(addedElement, element, fieldColumns);
                }
                else {
                    const field = element.field;
                    const datatype = element.datatype;
                    const label = element.label;
                    const require = element.required;
                    const fieldComponent = {
                        type: datatype,
                        input: true,
                        tableView: true,
                        inputType: datatype,
                        inputMask: '',
                        label: label,
                        key: (tableName !== this.selectedTable ? `${tableName}.` : '') + field,
                        placeholder: 'Enter ' + label,
                        prefix: '',
                        suffix: '',
                        multiple: false,
                        defaultValue: '',
                        protected: false,
                        unique: false,
                        persistent: true,
                        validate: {
                            required: require,
                            pattern: '',
                            custom: '',
                            customPrivate: false
                        },
                        conditional: {
                            show: '',
                            when: null,
                            eq: ''
                        }
                    };
                    fieldColumns.push(fieldComponent);
                }
            });
        }
    }
    addElementValidate(addedElement, element, fieldColumns) {
        if (addedElement.validate) {
            addedElement.validate.required = element.required;
        }
        fieldColumns.push(addedElement);
    }
    generateDataGrid(fieldColumns, tableName) {
        const fieldColumnList = [];
        const dataGridTemplate = this.dataGrid;
        const fieldColumnKey = fieldColumns && fieldColumns[0]?.key?.split('.')[0];
        const relatedTableKey = this.selectedRelatedTableList.filter(table => table?.showDataGrid && table.relatedtable === fieldColumnKey);
        if (relatedTableKey.length) {
            const newDataGridTemplate = [];
            for (let i = 0; i < dataGridTemplate.length; i++) {
                const template = { ...dataGridTemplate[i] };
                template.components = [];
                template.label = `${tableName} Data Grid`;
                template.key = `${relatedTableKey[i].relatedtable}`;
                for (const column of fieldColumns) {
                    if (relatedTableKey[i] && relatedTableKey[i].relatedtable === column.key.split('.')[0]) {
                        template.components.push(column);
                    }
                    else {
                        fieldColumnList.push(column);
                    }
                }
                newDataGridTemplate.push(template);
            }
            return fieldColumnList.length ? fieldColumnList : newDataGridTemplate;
        }
        else {
            return fieldColumns;
        }
    }
    splitFieldColumns(fields, columnCount) {
        const arrayLength = fields.length;
        const fieldColumn = [];
        const columnWidth = Math.ceil(12 / columnCount);
        for (let i = 0; i < columnCount; i++) {
            const obj = { components: [], width: columnWidth, offset: 0, push: 0, pull: 0 };
            fieldColumn.push(obj);
        }
        let k = 0;
        for (let i = 0; i < arrayLength; i++) {
            let j = i;
            if (j >= columnCount) {
                if (k >= columnCount) {
                    k = 0;
                }
                j = k;
                k++;
            }
            fieldColumn[j].components.push(fields[i]);
        }
        return fieldColumn;
    }
    saveAsset() {
        this.fieldMapping = this.autoFieldMappingForm.getRawValue().autoFieldMappingArray;
        this.fieldArrCondition();
        const assetNameArr = this.assetList && this.assetList.length ? this.assetList.map(item => item.assetname) : [];
        const activeArr = [];
        const inactiveArr = [];
        if (this.assetList && this.assetList.length) {
            this.assetList.forEach(item => {
                if (this.fieldArr.includes(item.assetname)) {
                    activeArr.push(item);
                }
                else {
                    item.isactive = false;
                    inactiveArr.push(item);
                }
            });
        }
        let newAssetArr = this.fieldArr;
        if (assetNameArr && assetNameArr.length && this.fieldArr && this.fieldArr.length) {
            newAssetArr = this.fieldArr.filter(x => !assetNameArr.includes(x));
        }
        const createPage = this._localstore.getObj('CREATE PAGE');
        if (newAssetArr.length) {
            newAssetArr.forEach(item => {
                const getFieldData = this.fieldMapping.find(value => value.field === item);
                this.gridArrayData(item, getFieldData, createPage, activeArr);
            });
        }
        const assetData = [...activeArr, ...inactiveArr];
        const pageid = createPage ? Number(this.formData.id) : Number(this.formData.pageid);
        const versionid = createPage ? Number(this.formData.activeVersion?.id) : Number(this.formData.id);
        this.pageBuilderAddService.createAssetByVersion(String(pageid), String(versionid), assetData).subscribe(() => {
            //This is intentional
        });
    }
    fieldArrCondition() {
        if (this.selectedPage.length &&
            this.selectedPage[0].lookupkey === 'BUSP' &&
            this.fieldMapping &&
            this.fieldMapping.length &&
            !this.isDynamicSearchBaseQuery) {
            this.fieldArr = this.fieldMapping.map(item => 'grid_' + item.field);
        }
        else {
            this.fieldArr = this.fieldMapping.map(item => item.field);
        }
    }
    gridArrayData(item, getFieldData, createPage, activeArr) {
        const data = {
            assetname: item,
            assetpath: this.formData.pagename + '.' + item,
            assettype: '45F',
            dashboardtemplatejson: null,
            description: getFieldData && getFieldData.label ? getFieldData.label : null,
            displayname: getFieldData && getFieldData.label ? getFieldData.label : null,
            icon: null,
            id: null,
            pageid: createPage ? Number(this.formData.id) : Number(this.formData.pageid),
            parentassetid: null,
            url: null,
            isactive: createPage ? this.formData.activeVersion?.isactive : this.formData.isactive,
            versionid: createPage ? Number(this.formData.activeVersion?.id) : Number(this.formData.id)
        };
        activeArr.push(data);
    }
    validationPage() {
        if (!this.basicPageInformation.pagename ||
            !this.basicPageInformation.pagetype ||
            !this.basicPageInformation.description) {
            return false;
        }
        else {
            return true;
        }
    }
    validationSave() {
        if (this.formData.id) {
            return true;
        }
        else if (this.id) {
            this.formData.id = this.id;
            return true;
        }
        return false;
    }
    getselectedPage(type) {
        if (this.selectedPage) {
            const pageType = this.selectedPage.filter(x => x.lookupkey === type);
            return pageType.length > 0 ? true : false;
        }
        return false;
    }
    getDisabledDataType(index) {
        const formArray = this.autoFieldMappingForm.get('autoFieldMappingArray');
        const formControl = formArray.at(index);
        const dataTypeControl = formControl.get('datatype');
        return (dataTypeControl.value === 'datetime' ||
            dataTypeControl.value === 'date' ||
            dataTypeControl.value === 'textarea' ||
            dataTypeControl.value === 'number');
    }
    selectedDocument(event) {
        const mapingObj = documentJson.find(res => res.doc_name === event.value);
        this.ocrFields = mapingObj.mappings;
    }
    ocrCheck(event) {
        const checked = event.target.checked;
        this._localstore.setItem('OCRCHECKED', checked);
        if (!checked) {
            this.selectedDocumentType = '';
            // const control = <FormArray>this.autoFieldMappingForm.controls.autoFieldMappingArray;
            // if (this.fieldMapping.length) {
            //   this.fieldMapping.forEach(x => {
            //   });
            // }
        }
    }
    searchSchemaList(event) {
        const value = event.target.value.toLowerCase();
        const originalSelectedTable = this.selectedSchema;
        this.schemaList = this.dublicateSchemaList.filter((a) => {
            const matchesSearch = a?.name?.toLowerCase().startsWith(value);
            const isSelected = a?.name === originalSelectedTable;
            return matchesSearch || isSelected;
        });
    }
    searchTableList(event) {
        const value = event.target.value.toLowerCase();
        const originalSelectedTable = this.tableSelection;
        this.tableList = this.dublicateTableList.filter((a) => {
            const matchesSearch = a?.name?.toLowerCase().startsWith(value);
            const isSelected = a?.name === originalSelectedTable;
            return matchesSearch || isSelected;
        });
    }
    checkInputData() {
        const gridConfig = this.formData.gridconfig && typeof this.formData.gridconfig === 'string'
            ? JSON.parse(this.formData.gridconfig)
            : this.formData.gridconfig;
        if (gridConfig?.gridConfigFormArray.length) {
            gridConfig?.gridConfigFormArray.forEach(element => {
                element.Choosable = '';
                element.filter = '';
                element.fixed = '';
                element.hide = '';
                element.mobileView = '';
                element.selected = [];
                element.sort = '';
                element.tabView = '';
            });
        }
        this.formData.gridconfig = JSON.stringify(gridConfig);
        const tableSchemaConfig = this.formData.tableschemaconfig && typeof this.formData.tableschemaconfig === 'string'
            ? JSON.parse(this.formData.tableschemaconfig)
            : this.formData.tableschemaconfig;
        const isRelatedTableValid = this.checkRelatedTables(tableSchemaConfig?.selectedRelatedTableList, tableSchemaConfig?.fieldmapping);
        if (tableSchemaConfig?.selectedRelatedTableList) {
            tableSchemaConfig.tablefields.relations = tableSchemaConfig?.selectedRelatedTableList;
        }
        else {
            tableSchemaConfig.tablefields.relations = [];
        }
        this.formData.tableschemaconfig = JSON.stringify(tableSchemaConfig);
        return isRelatedTableValid;
    }
    checkRelatedTables(selectedRelatedTableList, fieldmapping) {
        const relatedTables = selectedRelatedTableList.map(item => item.relatedtable);
        const tables = selectedRelatedTableList.map(item => item.table);
        return relatedTables.every(relatedTable => fieldmapping.some(item => item.tablename === relatedTable)) &&
            tables.every(table => fieldmapping.some(item => item.tablename === table));
    }
    validateColumnChanged() {
        if (this.previousSelectedColumns.length !== this.selectedTableField.length) {
            this._localstore.setItem('isTableFieldsSaved', false);
            this._localstore.setItem('isColumnChanged', true);
        }
        else {
            const map = {};
            for (const obj of this.selectedTableField) {
                const key = `${obj.table_name}-${obj.name}`;
                map[key] = obj;
            }
            let allSame = true;
            for (const obj of this.previousSelectedColumns) {
                const key = `${obj.tablename}-${obj.field}`;
                if (!(key in map)) {
                    allSame = false;
                    break;
                }
            }
            this._localstore.setItem('isTableFieldsSaved', allSame);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: QueryParamsComponent, deps: [{ token: i0.Injector }, { token: i1.UntypedFormBuilder }, { token: i0.ChangeDetectorRef }, { token: i2.ActivatedRoute }, { token: i3.DataStoreService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: QueryParamsComponent, selector: "app-query-params", inputs: { isDynamicSearchBaseQuery: "isDynamicSearchBaseQuery", isGridPage: "isGridPage", tableData: "tableData" }, outputs: { formDataChanged: "formDataChanged" }, viewQueries: [{ propertyName: "selectAllCheckBox", predicate: ["selectAllCheckBox"], descendants: true }], ngImport: i0, template: "<div class=\"grid-filed\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12 mb-2\">\r\n      <div styleClass=\"rbac-card gridview w-100 h-100\">\r\n        <div class=\"strip_head toggleleft page-designer w-100 bg-white shadow-md d-none\">\r\n          <span class=\"report_head font-weight-bold p-2\">Select Form Fields</span>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-3 col-md-3 col-12 pr-md-1\">\r\n            <p-card styleClass=\"w-100 h-100 datasection\">\r\n              <div class=\"p-fluid p-formgrid row\">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <label for=\"schema\" class=\"referral-form-labels\">Schema\r\n                    <span class=\"requiredfield text-danger\">*</span>\r\n                  </label>\r\n                  <p-dropdown placeholder=\"Select Schema\" [options]=\"schemaList\" optionLabel=\"label\" optionValue=\"name\"\r\n                    [(ngModel)]=\"selectedSchema\" [filter]=\"true\" [resetFilterOnHide]=\"true\"\r\n                    (onHide)=\"resetDropdownList('schema')\" filterBy=\"name\" (keyup)=\"searchSchemaList($event)\"\r\n                    [showClear]=\"true\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_SCHEMA\"\r\n                    (onChange)=\"getTables($event.value)\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-fluid p-formgrid row\">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <label for=\"schema\" class=\"referral-form-labels\">Table List\r\n                    <span class=\"requiredfield text-danger\">*</span>\r\n                  </label>\r\n                  <p-dropdown placeholder=\"Select Table\" [options]=\"tableList\" optionLabel=\"name\" optionValue=\"name\"\r\n                    fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_TABLE\" [(ngModel)]=\"tableSelection\" [filter]=\"true\"\r\n                    [resetFilterOnHide]=\"true\" (onHide)=\"resetDropdownList('table')\" filterBy=\"name\"\r\n                    (keyup)=\"searchTableList($event)\" [showClear]=\"tableList && tableList?.length\"\r\n                    (onChange)=\"getTableFields($event.value,true)\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-fluid p-formgrid row\" *ngIf=\"\r\n                  selectedTable !== '' && (getselectedPage('ATPBDM') || getselectedPage('BGP') || getselectedPage('DR'))\r\n                \">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <label for=\"schema\" class=\"referral-form-labels\">Tables related to {{ this.selectedTable }}</label>\r\n                  <p-multiSelect placeholder=\"Select Related Tables\" [options]=\"relatedTableList\"\r\n                    (onChange)=\"getColumnsOfRelatedTables($event.value)\" [(ngModel)]=\"relatedTableSelection\"\r\n                    [resetFilterOnHide]=\"true\">\r\n                  </p-multiSelect>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-fluid p-formgrid row\" *ngIf=\"\r\n                  selectedTable !== '' && (getselectedPage('ATPBDM') || getselectedPage('BGP') || getselectedPage('DR'))\r\n                \">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <div class=\"documentaccess pt-0\">\r\n                    <div class=\"header px-2 py-2\">\r\n                      <label class=\"mb-0\">Selected Related Tables</label>\r\n                    </div>\r\n                    <hr class=\"m-0\" />\r\n                    <div class=\"doc-body\">\r\n                      <ng-container *ngFor=\"let table of selectedRelatedTableList; let i = index\">\r\n                        <div class=\"row userdata border\">\r\n                          <div class=\"col-md-12 py-1 px-3\">\r\n                            <label aria-labelledby=\"related_table_img\" class=\"pl-2 mb-0 mr-2\">{{\r\n                              table.relatedtable\r\n                              }}</label>\r\n                            <ng-container *ngIf=\"getselectedPage('ATPBDM')\">\r\n                              <!-- <input type=\"checkbox\" id=\"showAsGrid{{ i }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                [(ngModel)]=\"table.showDataGrid\" (change)=\"enableDataGrid($event, i)\" />\r\n                              <label for=\"showAsGrid{{ i }}\" aria-labelledby=\"showAsGrid{{ i }}\"\r\n                                class=\"pl-2 mt-0 mb-0\">Data Grid</label> -->\r\n\r\n                              <div class=\"g-checkbox\">\r\n                                <input type=\"checkbox\" id=\"showAsGrid{{ i }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                  [(ngModel)]=\"table.showDataGrid\" (change)=\"enableDataGrid($event, i)\" />\r\n                                <label for=\"showAsGrid{{ i }}\" aria-labelledby=\"showAsGrid{{ i }}\"\r\n                                  class=\"pl-2 mt-0 mb-0\">Data Grid</label>\r\n                              </div>\r\n                            </ng-container>\r\n                          </div>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </p-card>\r\n          </div>\r\n          <div class=\"col-md-9 col-12 pl-md-1\">\r\n            <p-card styleClass=\"w-100 h-100 beforeshow\" *ngIf=\"tableFieldList?.length < 1\">\r\n              <div class=\"d-flex align-items-center justify-content-center h-100 flex-column\">\r\n                <div class=\"pi-icon\"><em class=\"pi pi-database\"></em></div>\r\n                <p class=\"mb-0 text-muted\">No Schema and Table List selected!</p>\r\n              </div>\r\n            </p-card>\r\n            <p-card styleClass=\"w-100 h-100\" *ngIf=\"tableFieldList?.length > 0\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-4 col-12 pr-md-2 mb-3\">\r\n                  <div class=\"documentaccess pt-0 selectcolumn\">\r\n                    <div class=\"header px-2 py-2\">\r\n                      <label class=\"mb-0\">Select Fields</label>\r\n                    </div>\r\n                    <hr class=\"m-0\" />\r\n                    <div class=\"doc-body\">\r\n                      <ng-container>\r\n                        <div class=\"row userdata mb-0\">\r\n                          <div class=\"col-md-12 group-data py-0 px-2\">\r\n                            <div class=\"my-2\">\r\n                              <div class=\"p-input-icon-left w-100\">\r\n                                <em class=\"pi pi-search\"></em>\r\n                                <input #gridSearchInput type=\"search\" id=\"gridSearch\" class=\"gridSearch form-control\"\r\n                                  pInputText title=\"Search\" (keyup)=\"searchColumnFields($event)\" />\r\n                                <em class=\"pi pi-times clear-icon\" (click)=\"clearSearch(gridSearchInput)\"\r\n                                  pTooltip=\"Clear search\" tooltipPosition=\"bottom\" *ngIf=\"gridSearchInput.value\"></em>\r\n                                <label class=\"sr-only\" for=\"gridSearch\" aria-labelledby=\"gridSearch\"\r\n                                  title=\"Grid Search\"></label>\r\n                              </div>\r\n                              <div class=\"col-md-12 py-0 px-3 d-flex align-items-center selectAllcolumn mt-2\">\r\n                                <div class=\"g-checkbox\">\r\n                                  <input type=\"checkbox\" #selectAllCheckBox id=\"selectAllcolumn\"\r\n                                    (change)=\"checkAllColumnFields($event)\" class=\"packetsub-cls mt-0\">\r\n                                  <label for=\"selectAllcolumn\" class=\"pl-2 mt-0 mb-0\">Select All</label>\r\n                                </div>\r\n                                <!-- <input type=\"checkbox\" #selectAllCheckBox id=\"selectAllcolumn\"\r\n                                  (change)=\"checkAllColumnFields($event)\" class=\"packetsub-cls mt-0\" />\r\n                                <label for=\"selectAllcolumn\" class=\"pl-2 mt-0 mb-0\">Select All</label> -->\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"max-h-selectcolumn\">\r\n                              <p-panel styleClass=\"mb-2\" [toggleable]=\"true\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                  <span>{{ selectedTable }}</span>\r\n                                </ng-template>\r\n                                <ng-container *ngFor=\"let field of filteredtableFieldList; let i = index\">\r\n                                  <div class=\"row userdata border mb-0\"\r\n                                    (change)=\"selectedTableFields(field, field?.active)\">\r\n                                    <div class=\"col-md-12 py-0 px-3 d-flex align-items-center\">\r\n                                      <div class=\"g-checkbox\">\r\n                                        <input type=\"checkbox\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_COLOUMN_FIELDS\"\r\n                                          id=\"packetsub{{ i }}\" [checked]=\"field?.active\" class=\"packetsub-cls mt-0\" />\r\n                                        <label for=\"packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{ field.name }}</label>\r\n                                      </div>\r\n                                      <!-- <input type=\"checkbox\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_COLOUMN_FIELDS\"\r\n                                        id=\"packetsub{{ i }}\" [checked]=\"field?.active\" class=\"packetsub-cls mt-0\" />\r\n                                      <label for=\"packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{ field.name }}</label> -->\r\n                                    </div>\r\n                                  </div>\r\n                                </ng-container>\r\n                              </p-panel>\r\n                              <p-panel styleClass=\"mb-2\" *ngFor=\"let tableField of filteredrelatedtableFieldList\"\r\n                                [toggleable]=\"true\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                  <span>{{ tableField.table }}</span>\r\n                                </ng-template>\r\n                                <ng-container *ngFor=\"let field of tableField.columns; let i = index\">\r\n                                  <div class=\"row userdata border mb-0\"\r\n                                    (change)=\"selectedRelatedTableFields(tableField.table, field, field?.active)\">\r\n                                    <div class=\"col-md-12 py-0 px-3 d-flex align-items-center\">\r\n                                      <div class=\"g-checkbox\">\r\n                                        <input type=\"checkbox\" id=\"related-packetsub{{ i }}\" [checked]=\"field?.active\"\r\n                                          class=\"packetsub-cls mt-0\" [disabled]=\"field?.disabled\" />\r\n                                        <label for=\"related-packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{\r\n                                          field.name\r\n                                          }}</label>\r\n                                      </div>\r\n\r\n                                      <!-- <input type=\"checkbox\" id=\"related-packetsub{{ i }}\" [checked]=\"field?.active\"\r\n                                        class=\"packetsub-cls mt-0\" [disabled]=\"field?.disabled\" />\r\n                                      <label for=\"related-packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{\r\n                                        field.name\r\n                                        }}</label> -->\r\n                                    </div>\r\n                                  </div>\r\n                                </ng-container>\r\n                              </p-panel>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-8 col-12 pl-md-2 mb-3\">\r\n                  <div class=\"row col-12\">\r\n                    <div class=\"p-field col-4\" *ngIf=\"getselectedPage('ATPBDM')\">\r\n                      <div class=\"g-checkbox\">\r\n                        <input type=\"checkbox\" class=\"packetsub-cls mt-0\" (change)=\"ocrCheck($event)\"\r\n                          [checked]=\"isOCRChecked\" [(ngModel)]=\"isOCRChecked\" />\r\n                        <label for=\"ocr\" class=\"pl-2 mt-0 mb-0\">OCR</label>\r\n                      </div>\r\n\r\n                      <!-- <input type=\"checkbox\" class=\"packetsub-cls mt-0\" (change)=\"ocrCheck($event)\"\r\n                        [checked]=\"isOCRChecked\" [(ngModel)]=\"isOCRChecked\" />\r\n                      <label for=\"ocr\" class=\"pl-2 mt-0 mb-0\">OCR</label> -->\r\n                    </div>\r\n                    <div class=\"p-field col-4\" *ngIf=\"isOCRChecked && getselectedPage('ATPBDM')\">\r\n                      <label for=\"schema\" class=\"referral-form-labels mr-2\">select document type</label>\r\n                      <p-dropdown placeholder=\"select document type\" [options]=\"documentType\"\r\n                        (onChange)=\"selectedDocument($event)\" optionLabel=\"doc_name\" [(ngModel)]=\"selectedDocumentType\"\r\n                        optionValue=\"doc_name\">\r\n                      </p-dropdown>\r\n                    </div>\r\n                    <div class=\"p-field col-4 text-right\" *ngIf=\"getselectedPage('ATPBDM')\">\r\n                      <label for=\"schema\" class=\"referral-form-labels mr-2\">No of Columns </label>\r\n                      <p-dropdown placeholder=\"Select No of Columns\" [options]=\"nColumns\" optionLabel=\"key\"\r\n                        optionValue=\"key\" [(ngModel)]=\"noOfColumns\">\r\n                      </p-dropdown>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"documentaccess pt-0\">\r\n                    <div class=\"header px-2 py-2\">\r\n                      <label class=\"mb-0\">Selected Fields</label>\r\n                    </div>\r\n                    <hr class=\"m-0\" />\r\n                    <form [formGroup]=\"autoFieldMappingForm\">\r\n                      <div class=\"doc-body\" formArrayName=\"autoFieldMappingArray\" cdkDropList\r\n                        (cdkDropListDropped)=\"drop($event)\">\r\n                        <ng-container *ngFor=\"\r\n                            let errorItem of autoFieldMappingForm.controls['autoFieldMappingArray']['controls'];\r\n                            let j = index\r\n                          \" formGroupName=\"{{ j }}\">\r\n                          <div class=\"row userdata border\" cdkDrag>\r\n                            <div class=\"col-md-12 py-1 px-3\">\r\n                              <em class=\"fa-solid fa-grip-dots-vertical\"></em>\r\n                              <svg title=\"\" id=\"img{{ j }}\" width=\"8\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                                viewBox=\"0 0 320 512\">\r\n                                <path\r\n                                  d=\"M88 352C110.1 352 128 369.9 128 392V440C128 462.1 110.1 480 88 480H40C17.91 480 0 462.1 0 440V392C0 369.9 17.91 352 40 352H88zM280 352C302.1 352 320 369.9 320 392V440C320 462.1 302.1 480 280 480H232C209.9 480 192 462.1 192 440V392C192 369.9 209.9 352 232 352H280zM40 320C17.91 320 0 302.1 0 280V232C0 209.9 17.91 192 40 192H88C110.1 192 128 209.9 128 232V280C128 302.1 110.1 320 88 320H40zM280 192C302.1 192 320 209.9 320 232V280C320 302.1 302.1 320 280 320H232C209.9 320 192 302.1 192 280V232C192 209.9 209.9 192 232 192H280zM40 160C17.91 160 0 142.1 0 120V72C0 49.91 17.91 32 40 32H88C110.1 32 128 49.91 128 72V120C128 142.1 110.1 160 88 160H40zM280 32C302.1 32 320 49.91 320 72V120C320 142.1 302.1 160 280 160H232C209.9 160 192 142.1 192 120V72C192 49.91 209.9 32 232 32H280z\" />\r\n                              </svg>\r\n                              <label aria-labelledby=\"img{{ j }}\" class=\"pl-2 mb-0 mr-2\">{{\r\n                                errorItem?.value?.label\r\n                                }}</label>\r\n\r\n                              <div class=\"g-checkbox d-inline mr-1\">\r\n                                <input *ngIf=\"getselectedPage('BGP')\" type=\"checkbox\" formControlName=\"result\"\r\n                                  id=\"result{{ j }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                  [checked]=\"errorItem?.value?.result\" />\r\n                                <label *ngIf=\"getselectedPage('BGP')\" for=\"result{{ j }}\"\r\n                                  aria-labelledby=\"result{{ j }}\" class=\"pl-2 mt-0 mb-0\">Result</label>\r\n                              </div>\r\n                              <div class=\"g-checkbox d-inline mr-1\">\r\n                                <input *ngIf=\"getselectedPage('BGP')\" type=\"checkbox\" formControlName=\"criteria\"\r\n                                  id=\"criteria{{ j }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                  [checked]=\"errorItem?.value?.criteria\" />\r\n                                <label *ngIf=\"getselectedPage('BGP')\" for=\"criteria{{ j }}\"\r\n                                  aria-labelledby=\"criteria{{ j }}\" class=\"pl-2 mt-0 mb-0\">Criteria</label>\r\n                              </div>\r\n                              <p-dropdown *ngIf=\"getselectedPage('ATPBDM')\" styleClass=\"mr-2\" placeholder=\"Data Type\"\r\n                                [options]=\"fieldDatatype\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECTED_FIELDS\"\r\n                                optionLabel=\"desc\" [disabled]=\"this.getDisabledDataType(j)\" formControlName=\"datatype\"\r\n                                optionValue=\"value\">\r\n                              </p-dropdown>\r\n                              <div class=\"g-checkbox d-inline mr-1\">\r\n                                <input type=\"checkbox\" *ngIf=\"getselectedPage('ATPBDM')\"\r\n                                  fieldKey=\"PAG_DES_GRID_FIELDS_REQUIRED_FIELDS\" id=\"required{{ j }}\"\r\n                                  class=\"packetsub-cls mt-0 required_ckbox\" formControlName=\"required\" />\r\n                                <label *ngIf=\"getselectedPage('ATPBDM')\" for=\"required{{ j }}\"\r\n                                  aria-labelledby=\"required{{ j }}\" class=\"pl-2 mt-0 mb-0\">Required</label>\r\n                              </div>\r\n                              <p-dropdown *ngIf=\"getselectedPage('ATPBDM') && isOCRChecked\" styleClass=\"ml-2\"\r\n                                placeholder=\"Field Name\" [options]=\"ocrFields\" optionLabel=\"label\"\r\n                                formControlName=\"ocrkey\" optionValue=\"attr\">\r\n                              </p-dropdown>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-12 formicon\">\r\n                  <div class=\"d-flex justify-content-between\">\r\n                    <button class=\"btn btn-primary btncommon\" (click)=\"clearSelectedColumnFields()\">Clear All</button>\r\n                    <div class=\"text-right\">\r\n                      <button class=\"mr-2 btn btn-cancel\" fieldKey=\"PAG_DES_GRID_FIELDS_CANCEL\" (click)=\"cancel()\">\r\n                        Cancel\r\n                      </button>\r\n                      <button *ngIf=\"!isNewPage\" class=\"btn btn-primary btncommon\" (click)=\"skipToNextPage()\">\r\n                        Skip\r\n                      </button>\r\n                      <button class=\"btn btn-primary btncommon\" fieldKey=\"PAG_DES_GRID_FIELDS_NEXT\"\r\n                        (click)=\"saveTableField()\">\r\n                        Next\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </p-card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [":root{--background-color: #f8f8f8;--navigation: #fff;--primary: #0D3178;--checkbox-border: #D6D5D5;--text-dark: #000;--label-text: #0D3178;--hover-text: #fff;--bg-light: #fff;--forms: #fff;--nav-text: #696969;--light-gray: #696969;--material-icons: #0D3178;--highlight-list: #e3f2fd;--table-header: #f9f9f9;--table-odd: #f7f7f7;--table-border: #ddd;--table-hover: #dbf6ff;--table-odd-color: #f2fcff;--btn: #0D3178;--menu-panel: #032361;--menu-level2: #28447E;--border-trans: transparent;--btn-hover: #1258A7;--btn-dark: #0D3178;--dropdown-list: #fff;--btncancel: #0D3178;--primary-light: #1258A7;--primary-dark: #0D3178;--light-d-light: #fff;--ldl-text: #fff;--light-d-accent: #fff;--header-bg: #f7f7f7;--secondary-color: #0D3178;--menu-link: #1258A7;--menu-highlight: #0084d1;--sumbmenu-selected: #0084D1;--profile-bg: #f3f9f9;--disabled: #7A8EB5;--accordion-header: #F5F5F5;--input-label: #1F1F1F;--input-field: #4C4C4C;--ghost: #A2A2A2;--table-label: #f1f1f1;--error-msg: #DC0404;--menu-hover: #1258A7;--var-icon-font: \"FILL\" 0, \"wght\" 400, \"GRAD\" 0, \"opsz\" 48;--rocket-icon: \"/assets/images/rocket-ship.svg\";--base-font-size: 16px;--font-11: 11px;--font-12: 12px;--font-13: 13px;--font-14: 14px;--font-15: 15px;--font-16: 16px;--font-17: 17px;--font-18: 18px;--font-19: 19px;--font-20: 20px;--font-21: 21px;--font-24: 24px;--font-26: 26px}.item-selected{background:#cecece;color:#fff}.container{height:200px;display:flex;justify-content:space-evenly;align-items:center}.buttons-container{height:30%;display:flex;flex-direction:column;justify-content:space-evenly;margin:80px 0 0}.buttons-container button{padding:0 8px;margin:0 1px;height:32px;width:85px;border:1px solid #cecece}.buttons-container button.active{color:#fff!important;background:#387ee8;border:none}.buttons-container button.active i{color:#fff!important}.buttons-container button:first-child{border:1px solid #65c2ff;color:#65c2ff;position:relative}.buttons-container button:first-child i{color:#65c2ff;top:4px;right:16px;position:absolute}.buttons-container button:last-child{border:1px solid #284f93;color:#284f93;position:relative}.buttons-container button:last-child i{color:#284f93;top:4px;left:6px;position:absolute}.buttons-container .fa{font-size:20px}.listbox{border:1px solid #eee;height:300px!important;max-height:300px!important;overflow-y:auto;overflow-x:hidden;border-radius:2px}.listbox table tr td{padding:10px}.listbox::-webkit-scrollbar{width:4px!important;height:4px!important}.listbox::-webkit-scrollbar-track{background:#f6f6f6!important;border-radius:2px!important}.listbox::-webkit-scrollbar-corner{background:#f6f6f6!important}.listbox::-webkit-scrollbar-thumb{background:#ddd!important;border-radius:2px!important}.listbox::-webkit-scrollbar-thumb:hover{background:#999!important}.search-input-wrp{position:relative}.search-input-wrp .search-input{width:232px;height:24px;line-height:24px;border-bottom:1px solid #cacaca;border-top:0;border-left:0;border-right:0;padding:5px 0 4px 8px;border-radius:2px}.search-input-wrp .search-input-i{position:absolute;top:14px;right:19px}.col-light-blue{color:#65c2ff}.col-dark-blue{color:#284f93}.light-blue{background:#65c2ff;color:#fff;margin:0;padding:10px;text-align:center}.drk-blue{background:#284f93;color:#fff;margin:0;padding:10px;text-align:center}.query-textarea{height:200px}.grid-filed .p-card .p-card-content{padding:0}.grid-filed .documentaccess{border:solid 1px var(--table-border);border-radius:2px;padding:5px 0 0;background:var(--bg-light)}.grid-filed .documentaccess .header{background:var(--header-bg) 0% 0% no-repeat padding-box}.grid-filed .documentaccess .header label{color:var(--label-text);font-weight:600;font-size:var(--font-15)}.grid-filed .documentaccess .doc-body{height:100%}.grid-filed .documentaccess .row.userdata{margin:0 0 5px;padding:5px 0;cursor:pointer}.grid-filed .documentaccess .row.userdata:last-child{margin-bottom:0}.grid-filed .documentaccess .row.userdata .group-data .row.userdata:last-child{border-bottom:none}.grid-filed .documentaccess .row.userdata input{font-size:var(--base-font-size);accent-color:var(--primary)}.grid-filed .documentaccess .row.userdata label{cursor:pointer;display:initial;font-size:var(--font-14);font-weight:400;color:var(--input-label)}.grid-filed .documentaccess .selectAllcolumn label{cursor:pointer;display:initial;font-size:var(--base-font-size);font-weight:500;color:#444;-webkit-user-select:none;user-select:none}.grid-filed .documentaccess .row.userdata svg{opacity:.4;margin-top:-3px;fill:currentColor}.grid-filed .documentaccess.selectcolumn,.grid-filed .documentaccess.selectcolumn .doc-body{height:inherit}:host ::ng-deep .documentaccess .p-dropdown .p-dropdown-label{padding:6px}.required_ckbox{margin-left:5px}.p-input-icon-left .pi-search{position:absolute;left:8px;top:8px;z-index:2;display:block;text-align:center;pointer-events:none;color:var(--text-dark)}.clear-icon{position:absolute;right:10px;top:50%;transform:translateY(-50%);cursor:pointer}.gridSearch::-webkit-search-cancel-button{display:none}.gridSearch::-webkit-search-decoration,.gridSearch::-webkit-search-clear-button{display:none}:host ::ng-deep .p-panel.p-panel-toggleable .p-panel-header{font-weight:600;padding:.2rem 1rem}:host ::ng-deep .p-panel .p-panel-header{background:var(--header-bg);color:var(--label-text);border-color:var(--table-border);font-size:var(--font-15)}:host ::ng-deep .p-panel .p-panel-header .p-panel-header-icon{color:var(--ldl-text)}:host ::ng-deep .p-panel .p-panel-content{background:var(--bg-light);color:var(--text-dark);border-color:var(--table-border)}:host ::ng-deep .grid-filed .p-card .p-card-content{padding:0!important}:host ::ng-deep .grid-filed .datasection .p-fluid:last-child .p-field{margin-bottom:0}:host ::ng-deep .grid-filed .beforeshow .p-card-body,:host ::ng-deep .grid-filed .beforeshow .p-card-content{height:100%}:host ::ng-deep .grid-filed .beforeshow .pi-icon{margin-bottom:10px}:host ::ng-deep .grid-filed .beforeshow .pi-icon em{font-size:30px;font-weight:700;color:#ccc0e1}:host ::ng-deep .grid-filed .beforeshow p{font-size:var(--font-12);font-style:italic}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "directive", type: i5.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "directive", type: i6.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { kind: "directive", type: i7.InputText, selector: "[pInputText]" }, { kind: "component", type: i8.Dropdown, selector: "p-dropdown", inputs: ["id", "scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "dataKey", "filterBy", "filterFields", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "focusOnHover", "selectOnFocus", "autoOptionFocus", "autofocusFilter", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "component", type: i9.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { kind: "component", type: i10.MultiSelect, selector: "p-multiSelect", inputs: ["id", "ariaLabel", "style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize", "selectAll", "focusOnHover", "filterFields", "selectOnFocus", "autoOptionFocus"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove", "onSelectAllChange"] }, { kind: "directive", type: i11.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i11.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i12.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { kind: "component", type: i13.Panel, selector: "p-panel", inputs: ["toggleable", "header", "collapsed", "style", "styleClass", "iconPos", "expandIcon", "collapseIcon", "showHeader", "toggler", "transitionOptions"], outputs: ["collapsedChange", "onBeforeToggle", "onAfterToggle"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: QueryParamsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-query-params', template: "<div class=\"grid-filed\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12 mb-2\">\r\n      <div styleClass=\"rbac-card gridview w-100 h-100\">\r\n        <div class=\"strip_head toggleleft page-designer w-100 bg-white shadow-md d-none\">\r\n          <span class=\"report_head font-weight-bold p-2\">Select Form Fields</span>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-3 col-md-3 col-12 pr-md-1\">\r\n            <p-card styleClass=\"w-100 h-100 datasection\">\r\n              <div class=\"p-fluid p-formgrid row\">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <label for=\"schema\" class=\"referral-form-labels\">Schema\r\n                    <span class=\"requiredfield text-danger\">*</span>\r\n                  </label>\r\n                  <p-dropdown placeholder=\"Select Schema\" [options]=\"schemaList\" optionLabel=\"label\" optionValue=\"name\"\r\n                    [(ngModel)]=\"selectedSchema\" [filter]=\"true\" [resetFilterOnHide]=\"true\"\r\n                    (onHide)=\"resetDropdownList('schema')\" filterBy=\"name\" (keyup)=\"searchSchemaList($event)\"\r\n                    [showClear]=\"true\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_SCHEMA\"\r\n                    (onChange)=\"getTables($event.value)\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-fluid p-formgrid row\">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <label for=\"schema\" class=\"referral-form-labels\">Table List\r\n                    <span class=\"requiredfield text-danger\">*</span>\r\n                  </label>\r\n                  <p-dropdown placeholder=\"Select Table\" [options]=\"tableList\" optionLabel=\"name\" optionValue=\"name\"\r\n                    fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_TABLE\" [(ngModel)]=\"tableSelection\" [filter]=\"true\"\r\n                    [resetFilterOnHide]=\"true\" (onHide)=\"resetDropdownList('table')\" filterBy=\"name\"\r\n                    (keyup)=\"searchTableList($event)\" [showClear]=\"tableList && tableList?.length\"\r\n                    (onChange)=\"getTableFields($event.value,true)\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-fluid p-formgrid row\" *ngIf=\"\r\n                  selectedTable !== '' && (getselectedPage('ATPBDM') || getselectedPage('BGP') || getselectedPage('DR'))\r\n                \">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <label for=\"schema\" class=\"referral-form-labels\">Tables related to {{ this.selectedTable }}</label>\r\n                  <p-multiSelect placeholder=\"Select Related Tables\" [options]=\"relatedTableList\"\r\n                    (onChange)=\"getColumnsOfRelatedTables($event.value)\" [(ngModel)]=\"relatedTableSelection\"\r\n                    [resetFilterOnHide]=\"true\">\r\n                  </p-multiSelect>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-fluid p-formgrid row\" *ngIf=\"\r\n                  selectedTable !== '' && (getselectedPage('ATPBDM') || getselectedPage('BGP') || getselectedPage('DR'))\r\n                \">\r\n                <div class=\"p-field col-md-12 col-12\">\r\n                  <div class=\"documentaccess pt-0\">\r\n                    <div class=\"header px-2 py-2\">\r\n                      <label class=\"mb-0\">Selected Related Tables</label>\r\n                    </div>\r\n                    <hr class=\"m-0\" />\r\n                    <div class=\"doc-body\">\r\n                      <ng-container *ngFor=\"let table of selectedRelatedTableList; let i = index\">\r\n                        <div class=\"row userdata border\">\r\n                          <div class=\"col-md-12 py-1 px-3\">\r\n                            <label aria-labelledby=\"related_table_img\" class=\"pl-2 mb-0 mr-2\">{{\r\n                              table.relatedtable\r\n                              }}</label>\r\n                            <ng-container *ngIf=\"getselectedPage('ATPBDM')\">\r\n                              <!-- <input type=\"checkbox\" id=\"showAsGrid{{ i }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                [(ngModel)]=\"table.showDataGrid\" (change)=\"enableDataGrid($event, i)\" />\r\n                              <label for=\"showAsGrid{{ i }}\" aria-labelledby=\"showAsGrid{{ i }}\"\r\n                                class=\"pl-2 mt-0 mb-0\">Data Grid</label> -->\r\n\r\n                              <div class=\"g-checkbox\">\r\n                                <input type=\"checkbox\" id=\"showAsGrid{{ i }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                  [(ngModel)]=\"table.showDataGrid\" (change)=\"enableDataGrid($event, i)\" />\r\n                                <label for=\"showAsGrid{{ i }}\" aria-labelledby=\"showAsGrid{{ i }}\"\r\n                                  class=\"pl-2 mt-0 mb-0\">Data Grid</label>\r\n                              </div>\r\n                            </ng-container>\r\n                          </div>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </p-card>\r\n          </div>\r\n          <div class=\"col-md-9 col-12 pl-md-1\">\r\n            <p-card styleClass=\"w-100 h-100 beforeshow\" *ngIf=\"tableFieldList?.length < 1\">\r\n              <div class=\"d-flex align-items-center justify-content-center h-100 flex-column\">\r\n                <div class=\"pi-icon\"><em class=\"pi pi-database\"></em></div>\r\n                <p class=\"mb-0 text-muted\">No Schema and Table List selected!</p>\r\n              </div>\r\n            </p-card>\r\n            <p-card styleClass=\"w-100 h-100\" *ngIf=\"tableFieldList?.length > 0\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-4 col-12 pr-md-2 mb-3\">\r\n                  <div class=\"documentaccess pt-0 selectcolumn\">\r\n                    <div class=\"header px-2 py-2\">\r\n                      <label class=\"mb-0\">Select Fields</label>\r\n                    </div>\r\n                    <hr class=\"m-0\" />\r\n                    <div class=\"doc-body\">\r\n                      <ng-container>\r\n                        <div class=\"row userdata mb-0\">\r\n                          <div class=\"col-md-12 group-data py-0 px-2\">\r\n                            <div class=\"my-2\">\r\n                              <div class=\"p-input-icon-left w-100\">\r\n                                <em class=\"pi pi-search\"></em>\r\n                                <input #gridSearchInput type=\"search\" id=\"gridSearch\" class=\"gridSearch form-control\"\r\n                                  pInputText title=\"Search\" (keyup)=\"searchColumnFields($event)\" />\r\n                                <em class=\"pi pi-times clear-icon\" (click)=\"clearSearch(gridSearchInput)\"\r\n                                  pTooltip=\"Clear search\" tooltipPosition=\"bottom\" *ngIf=\"gridSearchInput.value\"></em>\r\n                                <label class=\"sr-only\" for=\"gridSearch\" aria-labelledby=\"gridSearch\"\r\n                                  title=\"Grid Search\"></label>\r\n                              </div>\r\n                              <div class=\"col-md-12 py-0 px-3 d-flex align-items-center selectAllcolumn mt-2\">\r\n                                <div class=\"g-checkbox\">\r\n                                  <input type=\"checkbox\" #selectAllCheckBox id=\"selectAllcolumn\"\r\n                                    (change)=\"checkAllColumnFields($event)\" class=\"packetsub-cls mt-0\">\r\n                                  <label for=\"selectAllcolumn\" class=\"pl-2 mt-0 mb-0\">Select All</label>\r\n                                </div>\r\n                                <!-- <input type=\"checkbox\" #selectAllCheckBox id=\"selectAllcolumn\"\r\n                                  (change)=\"checkAllColumnFields($event)\" class=\"packetsub-cls mt-0\" />\r\n                                <label for=\"selectAllcolumn\" class=\"pl-2 mt-0 mb-0\">Select All</label> -->\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"max-h-selectcolumn\">\r\n                              <p-panel styleClass=\"mb-2\" [toggleable]=\"true\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                  <span>{{ selectedTable }}</span>\r\n                                </ng-template>\r\n                                <ng-container *ngFor=\"let field of filteredtableFieldList; let i = index\">\r\n                                  <div class=\"row userdata border mb-0\"\r\n                                    (change)=\"selectedTableFields(field, field?.active)\">\r\n                                    <div class=\"col-md-12 py-0 px-3 d-flex align-items-center\">\r\n                                      <div class=\"g-checkbox\">\r\n                                        <input type=\"checkbox\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_COLOUMN_FIELDS\"\r\n                                          id=\"packetsub{{ i }}\" [checked]=\"field?.active\" class=\"packetsub-cls mt-0\" />\r\n                                        <label for=\"packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{ field.name }}</label>\r\n                                      </div>\r\n                                      <!-- <input type=\"checkbox\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECT_COLOUMN_FIELDS\"\r\n                                        id=\"packetsub{{ i }}\" [checked]=\"field?.active\" class=\"packetsub-cls mt-0\" />\r\n                                      <label for=\"packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{ field.name }}</label> -->\r\n                                    </div>\r\n                                  </div>\r\n                                </ng-container>\r\n                              </p-panel>\r\n                              <p-panel styleClass=\"mb-2\" *ngFor=\"let tableField of filteredrelatedtableFieldList\"\r\n                                [toggleable]=\"true\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                  <span>{{ tableField.table }}</span>\r\n                                </ng-template>\r\n                                <ng-container *ngFor=\"let field of tableField.columns; let i = index\">\r\n                                  <div class=\"row userdata border mb-0\"\r\n                                    (change)=\"selectedRelatedTableFields(tableField.table, field, field?.active)\">\r\n                                    <div class=\"col-md-12 py-0 px-3 d-flex align-items-center\">\r\n                                      <div class=\"g-checkbox\">\r\n                                        <input type=\"checkbox\" id=\"related-packetsub{{ i }}\" [checked]=\"field?.active\"\r\n                                          class=\"packetsub-cls mt-0\" [disabled]=\"field?.disabled\" />\r\n                                        <label for=\"related-packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{\r\n                                          field.name\r\n                                          }}</label>\r\n                                      </div>\r\n\r\n                                      <!-- <input type=\"checkbox\" id=\"related-packetsub{{ i }}\" [checked]=\"field?.active\"\r\n                                        class=\"packetsub-cls mt-0\" [disabled]=\"field?.disabled\" />\r\n                                      <label for=\"related-packetsub{{ i }}\" class=\"pl-2 mt-0 mb-0\">{{\r\n                                        field.name\r\n                                        }}</label> -->\r\n                                    </div>\r\n                                  </div>\r\n                                </ng-container>\r\n                              </p-panel>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-8 col-12 pl-md-2 mb-3\">\r\n                  <div class=\"row col-12\">\r\n                    <div class=\"p-field col-4\" *ngIf=\"getselectedPage('ATPBDM')\">\r\n                      <div class=\"g-checkbox\">\r\n                        <input type=\"checkbox\" class=\"packetsub-cls mt-0\" (change)=\"ocrCheck($event)\"\r\n                          [checked]=\"isOCRChecked\" [(ngModel)]=\"isOCRChecked\" />\r\n                        <label for=\"ocr\" class=\"pl-2 mt-0 mb-0\">OCR</label>\r\n                      </div>\r\n\r\n                      <!-- <input type=\"checkbox\" class=\"packetsub-cls mt-0\" (change)=\"ocrCheck($event)\"\r\n                        [checked]=\"isOCRChecked\" [(ngModel)]=\"isOCRChecked\" />\r\n                      <label for=\"ocr\" class=\"pl-2 mt-0 mb-0\">OCR</label> -->\r\n                    </div>\r\n                    <div class=\"p-field col-4\" *ngIf=\"isOCRChecked && getselectedPage('ATPBDM')\">\r\n                      <label for=\"schema\" class=\"referral-form-labels mr-2\">select document type</label>\r\n                      <p-dropdown placeholder=\"select document type\" [options]=\"documentType\"\r\n                        (onChange)=\"selectedDocument($event)\" optionLabel=\"doc_name\" [(ngModel)]=\"selectedDocumentType\"\r\n                        optionValue=\"doc_name\">\r\n                      </p-dropdown>\r\n                    </div>\r\n                    <div class=\"p-field col-4 text-right\" *ngIf=\"getselectedPage('ATPBDM')\">\r\n                      <label for=\"schema\" class=\"referral-form-labels mr-2\">No of Columns </label>\r\n                      <p-dropdown placeholder=\"Select No of Columns\" [options]=\"nColumns\" optionLabel=\"key\"\r\n                        optionValue=\"key\" [(ngModel)]=\"noOfColumns\">\r\n                      </p-dropdown>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"documentaccess pt-0\">\r\n                    <div class=\"header px-2 py-2\">\r\n                      <label class=\"mb-0\">Selected Fields</label>\r\n                    </div>\r\n                    <hr class=\"m-0\" />\r\n                    <form [formGroup]=\"autoFieldMappingForm\">\r\n                      <div class=\"doc-body\" formArrayName=\"autoFieldMappingArray\" cdkDropList\r\n                        (cdkDropListDropped)=\"drop($event)\">\r\n                        <ng-container *ngFor=\"\r\n                            let errorItem of autoFieldMappingForm.controls['autoFieldMappingArray']['controls'];\r\n                            let j = index\r\n                          \" formGroupName=\"{{ j }}\">\r\n                          <div class=\"row userdata border\" cdkDrag>\r\n                            <div class=\"col-md-12 py-1 px-3\">\r\n                              <em class=\"fa-solid fa-grip-dots-vertical\"></em>\r\n                              <svg title=\"\" id=\"img{{ j }}\" width=\"8\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                                viewBox=\"0 0 320 512\">\r\n                                <path\r\n                                  d=\"M88 352C110.1 352 128 369.9 128 392V440C128 462.1 110.1 480 88 480H40C17.91 480 0 462.1 0 440V392C0 369.9 17.91 352 40 352H88zM280 352C302.1 352 320 369.9 320 392V440C320 462.1 302.1 480 280 480H232C209.9 480 192 462.1 192 440V392C192 369.9 209.9 352 232 352H280zM40 320C17.91 320 0 302.1 0 280V232C0 209.9 17.91 192 40 192H88C110.1 192 128 209.9 128 232V280C128 302.1 110.1 320 88 320H40zM280 192C302.1 192 320 209.9 320 232V280C320 302.1 302.1 320 280 320H232C209.9 320 192 302.1 192 280V232C192 209.9 209.9 192 232 192H280zM40 160C17.91 160 0 142.1 0 120V72C0 49.91 17.91 32 40 32H88C110.1 32 128 49.91 128 72V120C128 142.1 110.1 160 88 160H40zM280 32C302.1 32 320 49.91 320 72V120C320 142.1 302.1 160 280 160H232C209.9 160 192 142.1 192 120V72C192 49.91 209.9 32 232 32H280z\" />\r\n                              </svg>\r\n                              <label aria-labelledby=\"img{{ j }}\" class=\"pl-2 mb-0 mr-2\">{{\r\n                                errorItem?.value?.label\r\n                                }}</label>\r\n\r\n                              <div class=\"g-checkbox d-inline mr-1\">\r\n                                <input *ngIf=\"getselectedPage('BGP')\" type=\"checkbox\" formControlName=\"result\"\r\n                                  id=\"result{{ j }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                  [checked]=\"errorItem?.value?.result\" />\r\n                                <label *ngIf=\"getselectedPage('BGP')\" for=\"result{{ j }}\"\r\n                                  aria-labelledby=\"result{{ j }}\" class=\"pl-2 mt-0 mb-0\">Result</label>\r\n                              </div>\r\n                              <div class=\"g-checkbox d-inline mr-1\">\r\n                                <input *ngIf=\"getselectedPage('BGP')\" type=\"checkbox\" formControlName=\"criteria\"\r\n                                  id=\"criteria{{ j }}\" class=\"packetsub-cls mt-0 required_ckbox\"\r\n                                  [checked]=\"errorItem?.value?.criteria\" />\r\n                                <label *ngIf=\"getselectedPage('BGP')\" for=\"criteria{{ j }}\"\r\n                                  aria-labelledby=\"criteria{{ j }}\" class=\"pl-2 mt-0 mb-0\">Criteria</label>\r\n                              </div>\r\n                              <p-dropdown *ngIf=\"getselectedPage('ATPBDM')\" styleClass=\"mr-2\" placeholder=\"Data Type\"\r\n                                [options]=\"fieldDatatype\" fieldKey=\"PAG_DES_GRID_FIELDS_SELECTED_FIELDS\"\r\n                                optionLabel=\"desc\" [disabled]=\"this.getDisabledDataType(j)\" formControlName=\"datatype\"\r\n                                optionValue=\"value\">\r\n                              </p-dropdown>\r\n                              <div class=\"g-checkbox d-inline mr-1\">\r\n                                <input type=\"checkbox\" *ngIf=\"getselectedPage('ATPBDM')\"\r\n                                  fieldKey=\"PAG_DES_GRID_FIELDS_REQUIRED_FIELDS\" id=\"required{{ j }}\"\r\n                                  class=\"packetsub-cls mt-0 required_ckbox\" formControlName=\"required\" />\r\n                                <label *ngIf=\"getselectedPage('ATPBDM')\" for=\"required{{ j }}\"\r\n                                  aria-labelledby=\"required{{ j }}\" class=\"pl-2 mt-0 mb-0\">Required</label>\r\n                              </div>\r\n                              <p-dropdown *ngIf=\"getselectedPage('ATPBDM') && isOCRChecked\" styleClass=\"ml-2\"\r\n                                placeholder=\"Field Name\" [options]=\"ocrFields\" optionLabel=\"label\"\r\n                                formControlName=\"ocrkey\" optionValue=\"attr\">\r\n                              </p-dropdown>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-12 formicon\">\r\n                  <div class=\"d-flex justify-content-between\">\r\n                    <button class=\"btn btn-primary btncommon\" (click)=\"clearSelectedColumnFields()\">Clear All</button>\r\n                    <div class=\"text-right\">\r\n                      <button class=\"mr-2 btn btn-cancel\" fieldKey=\"PAG_DES_GRID_FIELDS_CANCEL\" (click)=\"cancel()\">\r\n                        Cancel\r\n                      </button>\r\n                      <button *ngIf=\"!isNewPage\" class=\"btn btn-primary btncommon\" (click)=\"skipToNextPage()\">\r\n                        Skip\r\n                      </button>\r\n                      <button class=\"btn btn-primary btncommon\" fieldKey=\"PAG_DES_GRID_FIELDS_NEXT\"\r\n                        (click)=\"saveTableField()\">\r\n                        Next\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </p-card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [":root{--background-color: #f8f8f8;--navigation: #fff;--primary: #0D3178;--checkbox-border: #D6D5D5;--text-dark: #000;--label-text: #0D3178;--hover-text: #fff;--bg-light: #fff;--forms: #fff;--nav-text: #696969;--light-gray: #696969;--material-icons: #0D3178;--highlight-list: #e3f2fd;--table-header: #f9f9f9;--table-odd: #f7f7f7;--table-border: #ddd;--table-hover: #dbf6ff;--table-odd-color: #f2fcff;--btn: #0D3178;--menu-panel: #032361;--menu-level2: #28447E;--border-trans: transparent;--btn-hover: #1258A7;--btn-dark: #0D3178;--dropdown-list: #fff;--btncancel: #0D3178;--primary-light: #1258A7;--primary-dark: #0D3178;--light-d-light: #fff;--ldl-text: #fff;--light-d-accent: #fff;--header-bg: #f7f7f7;--secondary-color: #0D3178;--menu-link: #1258A7;--menu-highlight: #0084d1;--sumbmenu-selected: #0084D1;--profile-bg: #f3f9f9;--disabled: #7A8EB5;--accordion-header: #F5F5F5;--input-label: #1F1F1F;--input-field: #4C4C4C;--ghost: #A2A2A2;--table-label: #f1f1f1;--error-msg: #DC0404;--menu-hover: #1258A7;--var-icon-font: \"FILL\" 0, \"wght\" 400, \"GRAD\" 0, \"opsz\" 48;--rocket-icon: \"/assets/images/rocket-ship.svg\";--base-font-size: 16px;--font-11: 11px;--font-12: 12px;--font-13: 13px;--font-14: 14px;--font-15: 15px;--font-16: 16px;--font-17: 17px;--font-18: 18px;--font-19: 19px;--font-20: 20px;--font-21: 21px;--font-24: 24px;--font-26: 26px}.item-selected{background:#cecece;color:#fff}.container{height:200px;display:flex;justify-content:space-evenly;align-items:center}.buttons-container{height:30%;display:flex;flex-direction:column;justify-content:space-evenly;margin:80px 0 0}.buttons-container button{padding:0 8px;margin:0 1px;height:32px;width:85px;border:1px solid #cecece}.buttons-container button.active{color:#fff!important;background:#387ee8;border:none}.buttons-container button.active i{color:#fff!important}.buttons-container button:first-child{border:1px solid #65c2ff;color:#65c2ff;position:relative}.buttons-container button:first-child i{color:#65c2ff;top:4px;right:16px;position:absolute}.buttons-container button:last-child{border:1px solid #284f93;color:#284f93;position:relative}.buttons-container button:last-child i{color:#284f93;top:4px;left:6px;position:absolute}.buttons-container .fa{font-size:20px}.listbox{border:1px solid #eee;height:300px!important;max-height:300px!important;overflow-y:auto;overflow-x:hidden;border-radius:2px}.listbox table tr td{padding:10px}.listbox::-webkit-scrollbar{width:4px!important;height:4px!important}.listbox::-webkit-scrollbar-track{background:#f6f6f6!important;border-radius:2px!important}.listbox::-webkit-scrollbar-corner{background:#f6f6f6!important}.listbox::-webkit-scrollbar-thumb{background:#ddd!important;border-radius:2px!important}.listbox::-webkit-scrollbar-thumb:hover{background:#999!important}.search-input-wrp{position:relative}.search-input-wrp .search-input{width:232px;height:24px;line-height:24px;border-bottom:1px solid #cacaca;border-top:0;border-left:0;border-right:0;padding:5px 0 4px 8px;border-radius:2px}.search-input-wrp .search-input-i{position:absolute;top:14px;right:19px}.col-light-blue{color:#65c2ff}.col-dark-blue{color:#284f93}.light-blue{background:#65c2ff;color:#fff;margin:0;padding:10px;text-align:center}.drk-blue{background:#284f93;color:#fff;margin:0;padding:10px;text-align:center}.query-textarea{height:200px}.grid-filed .p-card .p-card-content{padding:0}.grid-filed .documentaccess{border:solid 1px var(--table-border);border-radius:2px;padding:5px 0 0;background:var(--bg-light)}.grid-filed .documentaccess .header{background:var(--header-bg) 0% 0% no-repeat padding-box}.grid-filed .documentaccess .header label{color:var(--label-text);font-weight:600;font-size:var(--font-15)}.grid-filed .documentaccess .doc-body{height:100%}.grid-filed .documentaccess .row.userdata{margin:0 0 5px;padding:5px 0;cursor:pointer}.grid-filed .documentaccess .row.userdata:last-child{margin-bottom:0}.grid-filed .documentaccess .row.userdata .group-data .row.userdata:last-child{border-bottom:none}.grid-filed .documentaccess .row.userdata input{font-size:var(--base-font-size);accent-color:var(--primary)}.grid-filed .documentaccess .row.userdata label{cursor:pointer;display:initial;font-size:var(--font-14);font-weight:400;color:var(--input-label)}.grid-filed .documentaccess .selectAllcolumn label{cursor:pointer;display:initial;font-size:var(--base-font-size);font-weight:500;color:#444;-webkit-user-select:none;user-select:none}.grid-filed .documentaccess .row.userdata svg{opacity:.4;margin-top:-3px;fill:currentColor}.grid-filed .documentaccess.selectcolumn,.grid-filed .documentaccess.selectcolumn .doc-body{height:inherit}:host ::ng-deep .documentaccess .p-dropdown .p-dropdown-label{padding:6px}.required_ckbox{margin-left:5px}.p-input-icon-left .pi-search{position:absolute;left:8px;top:8px;z-index:2;display:block;text-align:center;pointer-events:none;color:var(--text-dark)}.clear-icon{position:absolute;right:10px;top:50%;transform:translateY(-50%);cursor:pointer}.gridSearch::-webkit-search-cancel-button{display:none}.gridSearch::-webkit-search-decoration,.gridSearch::-webkit-search-clear-button{display:none}:host ::ng-deep .p-panel.p-panel-toggleable .p-panel-header{font-weight:600;padding:.2rem 1rem}:host ::ng-deep .p-panel .p-panel-header{background:var(--header-bg);color:var(--label-text);border-color:var(--table-border);font-size:var(--font-15)}:host ::ng-deep .p-panel .p-panel-header .p-panel-header-icon{color:var(--ldl-text)}:host ::ng-deep .p-panel .p-panel-content{background:var(--bg-light);color:var(--text-dark);border-color:var(--table-border)}:host ::ng-deep .grid-filed .p-card .p-card-content{padding:0!important}:host ::ng-deep .grid-filed .datasection .p-fluid:last-child .p-field{margin-bottom:0}:host ::ng-deep .grid-filed .beforeshow .p-card-body,:host ::ng-deep .grid-filed .beforeshow .p-card-content{height:100%}:host ::ng-deep .grid-filed .beforeshow .pi-icon{margin-bottom:10px}:host ::ng-deep .grid-filed .beforeshow .pi-icon em{font-size:30px;font-weight:700;color:#ccc0e1}:host ::ng-deep .grid-filed .beforeshow p{font-size:var(--font-12);font-style:italic}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i2.ActivatedRoute }, { type: i3.DataStoreService }, { type: i2.Router }]; }, propDecorators: { selectAllCheckBox: [{
                type: ViewChildren,
                args: ['selectAllCheckBox']
            }], isDynamicSearchBaseQuery: [{
                type: Input
            }], isGridPage: [{
                type: Input
            }], tableData: [{
                type: Input
            }], formDataChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,