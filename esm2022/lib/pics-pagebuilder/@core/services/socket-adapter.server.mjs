import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./local.service";
export class SocketAdapterService {
    router;
    localstorage;
    socketOption = {
        query: null,
        transports: ['websocket'],
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 5000,
        reconnectionAttempts: 20
        // agent: false,
        // upgrade: false,
        // rejectUnauthorized: false,
        // secure: true,
        // pingTimeout: 60000,
        // autoConnect: true
    };
    // private url = environment.chatServer;
    socket;
    constructor(router, localstorage) {
        this.router = router;
        this.localstorage = localstorage;
        console.log('Constructing Socket IO');
        this.router.events.subscribe(() => {
            const user = this.localstorage.getObj('user');
            if (user && this.socketOption.query == null) {
                this.socketOption = {
                    ...this.socketOption,
                    query: {
                        userId: user?.id
                    }
                };
                // this.socket = io(this.url, this.socketOption);
                console.log(this.socket);
            }
        });
    }
    joinRoom(roomData) {
        console.log('Socket joining room : ', roomData);
        this.socket.emit('joinRoom', roomData);
    }
    leaveRoom(roomData) {
        console.log('Socket leaving room: ', roomData);
        this.socket.emit('leaveRoom', roomData);
    }
    onConnect() {
        console.log('Socket On Connect');
        return new Observable(observer => {
            this.socket.on('connect', () => {
                console.log('Socket new connect...');
                observer.next('connectd');
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    onReConnect() {
        return new Observable(observer => {
            this.socket.on('reconnect', () => {
                observer.next('connectd');
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    receivePageData() {
        return new Observable(observer => {
            this.socket.on('receive_page_data', (data) => {
                observer.next(data);
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    onlineEditPageUsers() {
        return new Observable(observer => {
            this.socket.on('online_edit_page_user', (data) => {
                observer.next(data);
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    sendPageData(payload) {
        console.log('Sending page data');
        console.log(payload);
        this.socket.emit('send_page_data', payload);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SocketAdapterService, deps: [{ token: i1.Router }, { token: i2.LocalService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SocketAdapterService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SocketAdapterService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.LocalService }]; } });
//# sourceMappingURL=data:application/json;base64,