import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, QueryList } from '@angular/core';
import { UntypedFormArray, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { AlertService } from '../../../@core/services/alert.service';
import { AuthService } from '../../../@core/services/auth.service';
import { DataSourceService } from '../../../@core/services/data-source.service';
import { DataStoreService } from '../../../@core/services/data-store.service';
import { PageBuilderAddService } from '../../../@core/services/page-builder-add.service';
import { PageBuilderService } from '../../page-builder-version/@core/page-builder.service';
import { QueryParamsService } from './query-params.service';
import * as i0 from "@angular/core";
export declare class QueryParamsComponent implements OnInit, OnDestroy, AfterViewChecked {
    injector: Injector;
    private formBuilder;
    cdRef: ChangeDetectorRef;
    private route;
    private _storeservice;
    private router;
    selectAllCheckBox: QueryList<ElementRef>;
    schemaList: any;
    tableList: any;
    relatedTableList: [];
    autoFieldMappingForm: UntypedFormGroup;
    autoFieldMappingArray: UntypedFormArray;
    selectedSchema: any;
    selectedFields: Array<any>;
    unselectedFields: Array<any>;
    tableFields: any;
    tempTableFields: any;
    leftTableFields: any[];
    rightTableFields: any[];
    selectedTableList: Array<any>;
    selectedRelatedTableList: Array<any>;
    fieldMapping: any[];
    totalFields: number;
    selectedTable: string;
    allFieldList: {};
    noOfColumns: number;
    form: any;
    fieldDatatype: {
        desc: string;
        value: string;
    }[];
    formData: any;
    tableSchemaConfig: any;
    tableSelection: any;
    relatedTableSelection: Array<any>;
    searchParams: any;
    isDynamicSearchBaseQuery: boolean;
    isGridPage: boolean;
    tableData: any;
    formDataChanged: EventEmitter<any>;
    id: any;
    tablelisturl: string;
    nColumns: {
        key: number;
        value: number;
    }[];
    leftSelectionItem: Array<any>;
    rightSelectionItem: Array<any>;
    queryParamForm: UntypedFormGroup;
    queryParamFormArray: UntypedFormArray;
    dublicateSchemaList: any[];
    dublicateTableList: any[];
    searchParamLength: any;
    assetList: any;
    tableFieldList: any;
    relatedTableFieldList: any;
    selectedTableField: Array<any>;
    relatedSelectedTableField: Array<any>;
    requiredField: Array<any>;
    selectedPage: any;
    basicPageInformation: any;
    showSearchInputFields: boolean;
    pageBuilderAddService: PageBuilderAddService;
    queryParamsService: QueryParamsService;
    private _localstore;
    alert: AlertService;
    pageBuilderService: PageBuilderService;
    filteredtableFieldList: any;
    authService: AuthService;
    orgSubs: Subscription;
    orgId: any;
    gridConfigFormArray: any[];
    gridConfigList: any;
    fieldArr: any[];
    isOCRChecked: boolean;
    selectedDocumentType: any;
    ocrFields: any;
    documentType: Array<any>;
    dataGrid: any;
    isNewPage: boolean;
    isSchemaChanged: boolean;
    isRelatableTableSelected: boolean;
    isSaveGridFields: boolean;
    previousSelectedColumns: any[];
    dataSourceService: DataSourceService;
    dbAliasName: string;
    filteredrelatedtableFieldList: any;
    RBACORG: any;
    constructor(injector: Injector, formBuilder: UntypedFormBuilder, cdRef: ChangeDetectorRef, route: ActivatedRoute, _storeservice: DataStoreService, router: Router);
    ngOnInit(): Promise<void>;
    getOrganizationDbs(): any;
    baseQueryCheck(): void;
    schemaTableCheck(): void;
    ngOnDestroy(): void;
    ngAfterViewChecked(): void;
    getSchemaList(): Promise<void>;
    drop(event: CdkDragDrop<string[]>): void;
    loadForm(): void;
    createQueryParams(): UntypedFormGroup;
    searchColumnFields(event: any): void;
    clearSearch(inputElement: HTMLInputElement): void;
    setQueryParams(): void;
    buildQueryFormArray(x: any): UntypedFormGroup;
    setTableSchemaConfig(): void;
    createAutoFieldMapping(): void;
    setAutoFieldMapping(): void;
    buildAutoFieldMapping(x: any): UntypedFormGroup;
    toggleLeftSelection(value: any, item: number): void;
    resetDropdownList(type: any): void;
    clearSelectedColumnFields(): void;
    checkAllColumnFields(event: any): void;
    selectedRelatedTableFields(table: string, field?: any, status?: string): void;
    selectedTableFields(field?: any, status?: string): void;
    fieldIncludeCheck(status: any, field: any): void;
    toggleRightSelection(value: any, item: any): void;
    getSelectedTableFields(data: any, isRightAdd: any, label: any, index?: number, fields?: any, fieldDetails?: any): void;
    rightAddCheck(isRightAdd: any, index: any, label: any, data: any): void;
    rightAddCheckField(isRightAdd: any, index: any, label: any, data: any): void;
    fieldTablecheck(_field: any): void;
    businessNameCheck(selectedFields: any, autoFields: any, item: any, dataType: any, field: any): void;
    getTables(schema: any): void;
    getRelatedTablesFields(table: string, schema: string): void;
    enableDataGrid(_event: any, table: any): void;
    removeSelectedRelatedTableColumns(tablename: any): void;
    getColumnsOfRelatedTables(relatedTables: Array<any>): void;
    coloumnNameCheck(tableDetails: any, relatedTables: any): void;
    getTableFields(table: any, isSchemaChanged?: boolean): void;
    isCheckCondition(): void;
    checkFields(): void;
    resetTableFields(): void;
    skipToNextPage(): void;
    saveTableField(): void;
    selectedPageTypeCheck(): void;
    baseSearchQueryCheck(tableSchemaConfig: any): void;
    gridConfigListConditions(tableSchemaConfig: any): void;
    gridConfigCheckCondition(gridConfig: any): void;
    isGridConfigListCheck(gridFieldList: any, tempData: any, gridConfig: any): void;
    tempDataItemCheck(gridFieldList: any, tempData: any): void;
    searchParamsCheck(): void;
    isValidationCondition(): void;
    getGridConfigList(defaultSortColumn: any, gridConfig: any, tempData: any): void;
    saveAssetCheck(): void;
    conditionCheckCreate(): void;
    cancel(): void;
    processTemplateJSON(components: any, inputs: any): void;
    generateDesignForm(): Promise<void>;
    tableFieldsCheck(tableFields: any, inputs: any, tableName: any, fieldColumns: any): void;
    addElementValidate(addedElement: any, element: any, fieldColumns: any): void;
    generateDataGrid(fieldColumns: any, tableName: string): any;
    splitFieldColumns(fields: any, columnCount: any): any[];
    saveAsset(): void;
    fieldArrCondition(): void;
    gridArrayData(item: any, getFieldData: any, createPage: any, activeArr: any): void;
    validationPage(): any;
    validationSave(): any;
    getselectedPage(type: any): any;
    getDisabledDataType(index: any): boolean;
    selectedDocument(event: any): void;
    ocrCheck(event: any): void;
    searchSchemaList(event: Event): void;
    searchTableList(event: Event): void;
    checkInputData(): boolean;
    checkRelatedTables(selectedRelatedTableList: any, fieldmapping: any): boolean;
    validateColumnChanged(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QueryParamsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QueryParamsComponent, "app-query-params", never, { "isDynamicSearchBaseQuery": { "alias": "isDynamicSearchBaseQuery"; "required": false; }; "isGridPage": { "alias": "isGridPage"; "required": false; }; "tableData": { "alias": "tableData"; "required": false; }; }, { "formDataChanged": "formDataChanged"; }, never, never, false, never>;
}
