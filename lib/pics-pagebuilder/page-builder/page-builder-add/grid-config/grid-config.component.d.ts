import { AfterViewChecked, ChangeDetectorRef, Injector, OnInit } from '@angular/core';
import { UntypedFormArray, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { AlertService } from '../../../@core/services/alert.service';
import { AuthService } from '../../../@core/services/auth.service';
import { LocalService } from '../../../@core/services/local.service';
import { PageAccessService } from '../../../@core/services/page-access.service';
import { PageBuilderAddService } from '../../../@core/services/page-builder-add.service';
import { PageBuilderService } from '../../page-builder-version/@core/page-builder.service';
import { DataStoreService } from '../../../@core/services/data-store.service';
import * as i0 from "@angular/core";
export declare class GridConfigComponent implements OnInit, AfterViewChecked {
    private formBuilder;
    private route;
    cdRef: ChangeDetectorRef;
    private router;
    private alert;
    private _storeservice;
    gridConfigForm: UntypedFormGroup;
    gridConfigFormArray: UntypedFormArray;
    gridActionFormArray: UntypedFormArray;
    formData: any;
    gridConfig: any;
    id: string;
    gridConfigCount: any;
    manualForm: UntypedFormGroup;
    actionButtonClicked: boolean;
    gridOptions: any[];
    pageData: any[];
    pagesList: any[];
    editType: any[];
    documentReport: boolean;
    sortTypeValues: any;
    iconValues: any;
    pageBuilderAddService: PageBuilderAddService;
    pageAccessService: PageAccessService;
    basicPageInformation: any;
    _localstore: LocalService;
    pageBuilderService: PageBuilderService;
    createDynamicPage: boolean;
    orgSubs: Subscription;
    orgId: any;
    authService: AuthService;
    selectFieldsName: any;
    businessName: any;
    businessRules: any;
    tableSchemaObj: any;
    RBACORG: any;
    constructor(injector: Injector, formBuilder: UntypedFormBuilder, route: ActivatedRoute, cdRef: ChangeDetectorRef, router: Router, alert: AlertService, _storeservice: DataStoreService);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    loadForm(): void;
    createGridConfig(): void;
    changeGridOptions(value: any, i: any, gridConfigFormArray: UntypedFormArray): void;
    get formValidate(): {
        [key: string]: import("@angular/forms").AbstractControl<any, any>;
    };
    createAction(): UntypedFormGroup;
    createGridDownloadRangeQueryArray(): UntypedFormGroup;
    setPagesList(): void;
    setQueryParams(): void;
    goToGridFieldPage(): void;
    setControls(): void;
    patchGridConfig(): void;
    buildGridFormArray(x: any): UntypedFormGroup;
    setIconText(x: any): any;
    setSelected(x: any): any[][];
    setHeader(x: any): any;
    setColumnDef(x: any): any;
    buildActionGridFormArray(x: any): UntypedFormGroup;
    buildGridDownloadRangeQueryArray(x: any): UntypedFormGroup;
    saveGridConfig(publish: boolean): void;
    patchPage(formDetails: any, publish: any): void;
    cancel(): void;
    createPage(formDetails: any, publish: any): void;
    actionButtonEvent(): void;
    delInput(index: any): void;
    validationPage(): any;
    deleteAction(i: any): void;
    getVirtualColumns(): any;
    virtualColumnsButtonEvent(): void;
    viewVirtualColumn(): any;
    createVColumn(): UntypedFormGroup;
    deleteVColumn(index: any): void;
    generateBusinessRules(): {
        colDef: string;
        choices: any;
    };
    static ɵfac: i0.ɵɵFactoryDeclaration<GridConfigComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GridConfigComponent, "app-grid-config", never, {}, {}, never, never, false, never>;
}
