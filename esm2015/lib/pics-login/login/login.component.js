import { Component, EventEmitter, Output, Input, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { LocalService } from '../@core/service/local.service';
import { ProfileService } from '../@core/service/profile.service';
import { AppService } from '../@core/service/app.service';
import { select } from '@ngrx/store';
import { MessageService, PrimeNGConfig } from 'primeng/api';
import { ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';
import { selectAuth } from '../@core/service/auth.selectors';
import { AppConstants } from '../@core/constants/app-constants';
import { filter, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@angular/router";
import * as i3 from "@angular/forms";
import * as i4 from "@ng-bootstrap/ng-bootstrap";
import * as i5 from "../@core/service/alert.service";
import * as i6 from "../@core/service/auth.service";
import * as i7 from "../@shared/alert/alert.component";
import * as i8 from "primeng/checkbox";
import * as i9 from "primeng/button";
import * as i10 from "@angular/common";
export class LoginComponent {
    constructor(injector, store$, _router, fb, modalService, alertService, authService, route) {
        this.store$ = store$;
        this._router = _router;
        this.fb = fb;
        this.modalService = modalService;
        this.alertService = alertService;
        this.authService = authService;
        this.route = route;
        this.passwordExpired = new EventEmitter();
        this.loginSuccessful = new EventEmitter();
        this.cities = [];
        this.destory$ = new Subject();
        this.closeResult = '';
        this.DEFAULT_PASSWORD_RESET = 'TEMP_PASSWORD_RESET';
        this.profileService = injector.get(ProfileService);
        this.localstorage = injector.get(LocalService);
        this.primengConfig = injector.get(PrimeNGConfig);
        this.appService = injector.get(AppService);
        this.submitStatus = 'LOGIN';
        this.disabledLoginPage = false;
    }
    ngOnInit() {
        sessionStorage.clear();
        localStorage.clear();
        this.initializeForm();
        this.getSessionDetails();
        this.primengConfig.ripple = true;
        this.isAuthenticated$ = this.store$.pipe(select(selectAuth));
        this.isAuthenticated$.subscribe((res) => {
            if (res.isAuthenticated) {
                const routeToAdmin = res.pages.some(a => a.name === 'Application Management');
                if ((res === null || res === void 0 ? void 0 : res.action) === this.DEFAULT_PASSWORD_RESET) {
                    const query = {
                        queryParams: {
                            isTempPassword: res.action === this.DEFAULT_PASSWORD_RESET,
                            email: this.loginForm.value.email.trim()
                        }
                    };
                    this._router.navigate(['/auth/change-password', query]);
                }
                else if (routeToAdmin) {
                    this._router.navigate(['/pages/rbac']);
                }
                else {
                    this._router.navigate(['/pages/page-design/list']);
                }
            }
        }, err => {
            var _a, _b, _c, _d;
            console.log(err);
            if (err.error) {
                if (((_b = (_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.code) === 'NotAuthorizedException' || ((_d = (_c = err === null || err === void 0 ? void 0 : err.error) === null || _c === void 0 ? void 0 : _c.errors) === null || _d === void 0 ? void 0 : _d.email) === 'notFound') {
                    this.alertService.error('Invalid Credentials');
                }
                else {
                    this.alertService.error('System Error, Please try after sometime');
                }
            }
            this.submitStatus = 'LOGIN';
            this.submitSecretStatus = 'Submit Secret Code';
        });
        this.route.queryParams.pipe(takeUntil(this.destory$), filter((params) => !!params.email)).subscribe((params) => {
            this.loginForm.patchValue({
                email: params.email,
            });
        });
    }
    ngOnDestroy() {
        this.destory$.next();
        this.destory$.complete();
    }
    initializeForm() {
        this.loginForm = this.fb.group({
            email: ['', [Validators.required, Validators.pattern(AppConstants.regexEmail)]],
            password: ['', Validators.required],
            conditions: ['', Validators.required]
        });
    }
    initializeOtpForm() {
        this.otpForm = this.fb.group({
            otp: ['', Validators.required]
        });
    }
    open(content) {
        this.modalService.open(content, { size: 'lg', backdrop: 'static' }).result.then(result => {
            this.closeResult = `Closed with: ${result}`;
        }, reason => {
            this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
        });
    }
    getDismissReason(reason) {
        if (reason === ModalDismissReasons.ESC) {
            return 'by pressing ESC';
        }
        else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
            return 'by clicking on a backdrop';
        }
        else {
            return `with: ${reason}`;
        }
    }
    login(otp) {
        this.submitStatus = 'Please wait ...';
        this.submitSecretStatus = 'Please wait ...';
        this.errorStatus = '';
        const loginform = this.loginForm.getRawValue();
        this.authService.login(loginform.email, loginform.password, otp).subscribe((res) => {
            var _a, _b;
            if (res) {
                console.log(res);
                if (res === 'MFA_CODE_SEND') {
                    console.log('Request MFA Code...');
                    this.isOtpSent = true;
                    this.initializeOtpForm();
                    this.submitSecretStatus = 'Submit Secret Code';
                    return;
                }
                else if (((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.action) === AppConstants.tempPasswordReset) {
                    const queryParams = {
                        isTempPassword: true,
                    };
                    this._router.navigate(['/change-password'], { queryParams });
                }
                else if (((_b = res === null || res === void 0 ? void 0 : res.data) === null || _b === void 0 ? void 0 : _b.action) === AppConstants.passwordExpired) {
                    this.passwordExpired.emit('change-password');
                    this._router.navigate(['/change-password']);
                }
                else {
                    if (this.LOGININFO.DONT_GET_USERINFO) {
                        this.loginSuccessful.emit(res[0]);
                    }
                    else {
                        this.getUserInfo();
                    }
                }
            }
        }, error => {
            var _a, _b, _c, _d, _e, _f, _g;
            console.log(error);
            if (error.error) {
                if (((_b = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.code) === 'NotAuthorizedException' || ((_d = (_c = error === null || error === void 0 ? void 0 : error.error) === null || _c === void 0 ? void 0 : _c.errors) === null || _d === void 0 ? void 0 : _d.email) === 'Not Found') {
                    this.alertService.error(((_e = error === null || error === void 0 ? void 0 : error.error) === null || _e === void 0 ? void 0 : _e.message) || 'Invalid Email or Password');
                }
                else
                    this.alertService.error(((_f = error === null || error === void 0 ? void 0 : error.error) === null || _f === void 0 ? void 0 : _f.error) || 'Invalid Email or Password');
            }
            else {
                this.alertService.error(((_g = error === null || error === void 0 ? void 0 : error.error) === null || _g === void 0 ? void 0 : _g.error) || 'Invalid Email or Password');
            }
            this.submitStatus = 'LOGIN';
        });
    }
    sendOtp() {
        const otpFormDetails = this.otpForm.getRawValue();
        this.login(otpFormDetails.otp);
    }
    toggleShow() {
        this.show = !this.show;
        if (this.show) {
            this.input.nativeElement.type = 'text';
        }
        else {
            this.input.nativeElement.type = 'password';
        }
    }
    routeToChangePassword() {
        this._router.navigate(['/forgot-password']);
    }
    getUserInfo() {
        this.authService.getAuthMe().subscribe((res) => {
            if (res.data) {
                sessionStorage.setItem('orgid', res.data.organizationid);
                this.authService.getUserRole(res.data.id).subscribe(userInfo => {
                    if (userInfo) {
                        this.profileService.setUserPreference();
                        sessionStorage.setItem('user', JSON.stringify(userInfo.data));
                        const landingPage = userInfo.data.userroles[0].defaultpage;
                        sessionStorage.setItem('currentPage', JSON.stringify(landingPage));
                        this.appService.addValue('currentPage', landingPage);
                        this.routeToDynamicPage(landingPage);
                    }
                });
            }
        }, error => {
            console.log(error);
        });
    }
    routeToDynamicPage(landingPage) {
        const orgid = sessionStorage.getItem('orgid');
        if (landingPage.route.includes('dynamic-search/search')) {
            const pageId = landingPage.route.split('/')[4];
            if (pageId) {
                this.authService.checkDynamicPagePermission(pageId);
            }
            else {
                this.authService.routeToDynamicPage(orgid).subscribe(res => {
                    var _a, _b, _c;
                    if (res && res.data.length) {
                        const authorisedPages = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.filter(a => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.activeVersion) === null || _a === void 0 ? void 0 : _a.gridconfig; });
                        this.localstorage.setItem('selectedDynamicPage', (_c = (_b = authorisedPages[0]) === null || _b === void 0 ? void 0 : _b.activeVersion) === null || _c === void 0 ? void 0 : _c.id);
                        this.conditionAuthorisedPages(authorisedPages);
                    }
                    else {
                        this.alertService.error('You don\'t have permissions to perform the following operations .Please Contact Administrator');
                    }
                });
            }
        }
        else {
            const landingPageRoute = `pages${landingPage === null || landingPage === void 0 ? void 0 : landingPage.route}`;
            this._router.navigate([landingPageRoute]);
            this.localstorage.setItem('dashboardRoute', landingPageRoute);
        }
    }
    conditionAuthorisedPages(authorisedPages) {
        var _a, _b, _c, _d;
        if (authorisedPages && authorisedPages.length && ((_b = (_a = authorisedPages[0]) === null || _a === void 0 ? void 0 : _a.activeVersion) === null || _b === void 0 ? void 0 : _b.gridconfig)) {
            const gridPageRoute = `pages/dynamic-search/search/${(_d = (_c = authorisedPages[0]) === null || _c === void 0 ? void 0 : _c.activeVersion) === null || _d === void 0 ? void 0 : _d.id}`;
            this._router.navigate([gridPageRoute]);
            this.localstorage.setItem('dashboardRoute', gridPageRoute);
        }
    }
    gotoRegistrationPage(userType) {
        this._router.navigate(['./registration/', userType]);
    }
    getSessionDetails() {
        let getToken = window.location.hash;
        if (getToken.includes('#state=')) {
            const currentUrl = new URL(window.location.href.replace(/#/g, "?"));
            const stateKey = currentUrl.searchParams.get("state");
            const authCode = currentUrl.searchParams.get("code");
            const token = currentUrl.searchParams.get("id_token");
            let requestObject = {
                key: stateKey,
                code: authCode
            };
            this.authService.validateToken(token, requestObject).subscribe((res) => {
                if (res) {
                    this.getUserInfo();
                }
            }, error => {
                var _a, _b, _c, _d, _e;
                if (error.error) {
                    if (((_b = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.code) === 'NotAuthorizedException' || ((_d = (_c = error === null || error === void 0 ? void 0 : error.error) === null || _c === void 0 ? void 0 : _c.errors) === null || _d === void 0 ? void 0 : _d.email) === 'notFound') {
                        this.alertService.error(AppConstants.regexEmail);
                    }
                    else
                        this.alertService.error(((_e = error === null || error === void 0 ? void 0 : error.error) === null || _e === void 0 ? void 0 : _e.error) || AppConstants.errorMessage);
                }
                this.submitStatus = 'LOGIN';
            });
        }
    }
    generateLoginUrl() {
        this.authService.generateLoginUrl().subscribe((res) => {
            window.open(res === null || res === void 0 ? void 0 : res.data, '_self');
        });
    }
}
LoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: LoginComponent, deps: [{ token: i0.Injector }, { token: i1.Store }, { token: i2.Router }, { token: i3.FormBuilder }, { token: i4.NgbModal }, { token: i5.AlertService }, { token: i6.AuthService }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
LoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LoginComponent, selector: "lib-login", inputs: { LOGININFO: "LOGININFO", RBACORG: "RBACORG" }, outputs: { passwordExpired: "passwordExpired", loginSuccessful: "loginSuccessful" }, providers: [MessageService], viewQueries: [{ propertyName: "input", first: true, predicate: ["showhideinput"], descendants: true }], ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"row login\" id=\"back\">\r\n  <div\r\n    class=\"d-none d-lg-flex flex-column col-lg-8 align-i p-0 banner-sec justify-content-center container-image\"\r\n    [style.background-image]=\"'url(' + (LOGININFO['BACKGROUND_IMAGE'] ? LOGININFO['BACKGROUND_IMAGE'] :'assets/images/login_bg.jpg') + ')'\">\r\n  </div>\r\n  <div class=\"d-flex col-lg-4 shadow align-items-center p-4 mx-auto rightLoginSet\">\r\n    <div class=\"col-12 col-sm-8 col-md-6 col-lg-12 px-xl-2 mx-auto\">\r\n      <div class=\"col-md-12 text-left logo-group lg-mb-50\">\r\n        <div class=\"form-group mb-4\">\r\n          <div class=\"d-flex logo-group justify-content-center text-center\">\r\n            <span class=\"logo-img\">\r\n              <img [attr.src]=\"LOGININFO['BANNER'] ? LOGININFO['BANNER'] :'assets/images/cardinality-logo_text.svg'\" class=\"cfaLogoTop logo-img\" width=\"300\" alt=\"Oregon Provider Logo\" />\r\n              <h5 class=\"mt-3 font-weight-bold\">{{ LOGININFO['TITLE'] ? LOGININFO['TITLE'] : 'Integrated Eligibility System'}}</h5>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12 loginBottomSet clearfix\">\r\n        <div class=\"login-content\">\r\n          <form (ngSubmit)=\"login()\" novalidate [formGroup]=\"loginForm\">\r\n            <div class=\"clearfix\">\r\n              <div class=\"form-group\">\r\n                <label aria-labelledby=\"username\" for=\"username\" class=\"intake-form-labels\">User Name </label>\r\n                <input\r\n                  class=\"Inputs\"\r\n                  autofocus\r\n                  type=\"mail\"\r\n                  formControlName=\"email\"\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  id=\"username\"\r\n                  tabindex=\"0\"\r\n                  required />\r\n              </div>\r\n              <div class=\"form-group no-mar\">\r\n                <label aria-labelledby=\"password\" for=\"password\" class=\"intake-form-labels w-100\">Password</label>\r\n                <input\r\n                  class=\"Inputs password\"\r\n                  #showhideinput\r\n                  formControlName=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  tabindex=\"0\"\r\n                  required />\r\n                  <em\r\n                  class=\"pi\"\r\n                  [ngClass]=\"{ 'pi-eye': show, 'pi-eye-slash': !show }\"\r\n                  aria-hidden=\"true\"\r\n                  (click)=\"toggleShow()\"></em>\r\n                <!-- <i class=\"fa fa-eye\" aria-hidden=\"true\" (click)=\"toggleShow()\"></i> -->\r\n                <div class=\"text-right\">\r\n                  <a href=\"javascript:void(0)\" (click)=\"routeToChangePassword()\" class=\"btn-link forget\">\r\n                    Forgot Password?</a\r\n                  >\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group clearfix mb-30 clsMin-23 pt-10\">\r\n                <div class=\"checkbox\">\r\n                  <p-checkbox\r\n                    class=\"checklabelbox\"\r\n                    name=\"conditions\"\r\n                    formControlName=\"conditions\"\r\n                    value=\"yes\"\r\n                    inputId=\"ch\"\r\n                    aria-checked=\"false\">\r\n                  </p-checkbox>\r\n                  <label class=\"checklabel\" for=\"ch\"\r\n                    >I accept the <a href=\"javascript:void(0)\" (click)=\"open(content)\">terms &amp; conditions</a></label\r\n                  >\r\n                </div>\r\n              </div>\r\n              <div class=\"clearfix text-center col-md-12 col-12 mt-4\">\r\n                <p-button\r\n                  role=\"button\"\r\n                  type=\"submit\"\r\n                  title=\"Login\"\r\n                  [disabled]=\"!loginForm.valid\"\r\n                  styleClass=\"w-100 align-items-center justify-content-center d-block mb-2\"\r\n                  class=\"loginbutton w-100\"\r\n                  tabindex=\"0\"\r\n                  >{{ submitStatus }}</p-button\r\n                >\r\n                <a href=\"javascript:void(0);\" class=\"text-primary\" *ngIf=\"LOGININFO['REGISTRATION_ENABLE'] ? LOGININFO['REGISTRATION_ENABLE'] : false\" style=\"text-decoration: none;\" (click)=\"gotoRegistrationPage('provider')\">Provider Register</a><br>\r\n                <a href=\"javascript:void(0);\" class=\"text-primary\" *ngIf=\"LOGININFO['REGISTRATION_ENABLE'] ? LOGININFO['REGISTRATION_ENABLE'] : false\" style=\"text-decoration: none;\" (click)=\"gotoRegistrationPage('familyUser')\">Family User Register</a>\r\n              </div>\r\n              <div class=\"mar-btm-20 picslogin\" *ngIf=\"LOGININFO['LOGINWITH_AZURE'] ? LOGININFO['LOGINWITH_AZURE'] : false\"><span>Or</span></div>\r\n              <div class=\"clearfix text-center col-md-12 col-12 mt-2\" *ngIf=\"LOGININFO['LOGINWITH_AZURE'] ? LOGININFO['LOGINWITH_AZURE'] : false\">\r\n              <p-button\r\n              role=\"button\"\r\n              type=\"button\"\r\n              title=\"Login with Azure\"\r\n              class=\"loginbutton\"\r\n              tabindex=\"0\"\r\n              (click)=\"generateLoginUrl()\"\r\n              >Login with Azure</p-button>\r\n            </div>\r\n            </div>\r\n            <br />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"powered\">\r\n      <p class=\"clsInfo-text mt-0 text-center\">\r\n        <span style=\"font-size: 13px\"> Powered by </span>\r\n        <a href=\"https://www.cardinality.ai/\" rel=\"noopener\" role=\"link\" target=\"_blank\" tabindex=\"0\">\r\n          <img alt=\"cardinality\" class=\"Cardinality_logo\" src=\"assets/images/cardinality-logo_text.svg\" width=\"120\" />\r\n        </a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #content let-modal>\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n      Personalized Integrated Citizen Services (PICS) Terms &amp; conditions\r\n    </h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body termscondition\">\r\n    <p class=\"mb-2\">\r\n      These Terms and Conditions constitute a legally binding agreement (\u201CAgreement\u201D) made between you, whether\r\n      personally as a professional, or on behalf of an entity you represent (\u201CYou\u201D or \u201CCustomer\u201D) and Cardinality.AI\r\n      whose principal place of business is MD, U.S.A, (\u201CCardinality\u201D, \u201Cwe,\u201D \u201Cus\u201D or \u201Cour\u201D), concerning your access to\r\n      and contracting a PICS offering (\u201CProduct\u201D).\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You agree that by contracting our Product, you have read, understood, and agree to be bound by these Terms and\r\n      Conditions, which may be executed via electronic signature, electronic online communications, or via emailed\r\n      PDF-format document.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You confirm that you are fully able and entitled to accept these Terms and Conditions governing the purchase of\r\n      the Product and are authorized to do so on behalf of the Customer. This service is only available for\r\n      professionals and companies, and you represent that you are not a consumer or a minor.\r\n    </p>\r\n    <p class=\"mt-4 mb-2\">\r\n      <strong>CONFIDENTIALITY AGREEMENT</strong>\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You agree that you shall maintain strictly confidential, and shall not reveal nor by any means transfer to a third\r\n      party, or use any and all information related to the Services, products, materials, and prototypes, and any\r\n      technical documentation that forms part of the Know-how of Product, or that it has received from third parties, or\r\n      any other information to which you have access by virtue of accepting these terms.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You may not use our products for any illegal or unauthorized purpose nor may you, in the use of the Service,\r\n      violate any laws in your jurisdiction (including but not limited to copyright laws).\r\n    </p>\r\n    <p class=\"mt-4 mb-2\">\r\n      <strong>DISCLAIMER OF WARRANTIES; LIMITATION OF LIABILITY</strong>\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      We do not guarantee, represent or warrant that your use of our service will be uninterrupted, timely, secure or\r\n      error-free.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      We do not warrant that the results that may be obtained from the use of the service will be accurate or reliable.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You agree that from time to time we may remove the service for indefinite periods of time or cancel the service at\r\n      any time, without notice to you.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You expressly agree that your use of, or inability to use, the service is at your sole risk. The service and all\r\n      products and services delivered to you through the service are (except as expressly stated by us) provided \u2018as is\u2019\r\n      and \u2018as available\u2019 for your use, without any representation, warranties or conditions of any kind, either express\r\n      or implied, including all implied warranties or conditions of merchantability, merchantable quality, fitness for a\r\n      particular purpose, durability, title, and non-infringement.\r\n    </p>\r\n    <p class=\"mt-4 mb-2\">\r\n      <strong>INDEMNIFICATION</strong>\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      You agree to indemnify, defend and hold harmless Cardinality.AI and our parent, subsidiaries, affiliates,\r\n      partners, officers, directors, agents, contractors, licensors, service providers, subcontractors, suppliers,\r\n      interns and employees, harmless from any claim or demand, including reasonable attorneys\u2019 fees, made by any\r\n      third-party due to or arising out of your breach of these Terms of Service or the documents they incorporate by\r\n      reference or your violation of any law or the rights of a third-party.\r\n    </p>\r\n    <p class=\"mt-4 mb-2\">\r\n      <strong>SEVERABILITY</strong>\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      If any provision of these Terms of Service is determined to be unlawful, void, or unenforceable, such provision\r\n      shall nonetheless be enforceable to the fullest extent permitted by applicable law, and the unenforceable portion\r\n      shall be deemed to be severed from these Terms of Service, such determination shall not affect the validity and\r\n      enforceability of any other remaining provisions.\r\n    </p>\r\n    <p class=\"mt-4 mb-2\"><strong>GOVERNING LAW</strong></p>\r\n    <p class=\"mb-2\">\r\n      These Terms shall be governed and construed in accordance with the laws of Maryland, United States, without regard\r\n      to its conflict of law provisions.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      Our failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If\r\n      any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these\r\n      Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and\r\n      supersede and replace any prior agreements we might have had between us regarding the Service.\r\n    </p>\r\n    <p class=\"mt-4 mb-2\"><strong>CHANGES</strong></p>\r\n    <p class=\"mb-2\">\r\n      We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is\r\n      material we will provide at least 30 days notice prior to any new terms taking effect. What constitutes a material\r\n      change will be determined at our sole discretion.\r\n    </p>\r\n    <p class=\"mb-2\">\r\n      By continuing to access or use our Service after any revisions become effective, you agree to be bound by the\r\n      revised terms. If you do not agree to the new terms, you are no longer authorized to use the Service.\r\n    </p>\r\n\r\n    <p class=\"mt-4 mb-2\"><strong>CONTACT US</strong></p>\r\n    <p class=\"mb-2\">If you have any questions about these Terms, please contact us.</p>\r\n  </div>\r\n</ng-template>\r\n", styles: ["@charset \"UTF-8\";body{height:100%;overflow:hidden;width:100%!important;box-sizing:border-box;position:relative}.login#back{margin:auto;width:100%;position:relative;overflow:hidden;height:calc(1vh * 100)}.login .h2,.login h2{font-size:20px;color:var(--text-dark);font-family:\"Roboto\",sans-serif!important;font-weight:700;padding-top:8px}.login .login-content h2,.login .login-content h4{font-weight:700;color:#333!important;font-size:26px;margin:10px 0 30px}.login .login-content .btn-login{background-color:var(--btn);padding:10px;border:0}.login .mar-btm-40{margin-bottom:40px}.login .mar-btm-20{margin-bottom:20px}.login .form-group{position:relative;padding:0 18px}.login .form-group .fa-eye{position:absolute;right:25px;top:13px;color:var(--primary);font-size:15px;cursor:pointer}.login .form-group input[type=text]+.fa-eye:before{content:\"\\f070\"}.login .form-group .leftIcon{position:absolute;top:12px;left:12px;font-size:15px;color:#666}.login .form-group input{padding:0 10px;color:var(--text-dark)!important;background:var(--bg-light)!important;border:1px solid var(--table-border)!important;border-radius:5px}.login .form-group input:focus{border:1px solid var(--table-border)!important}.login .form-group .password{padding-right:40px}.login .form-control,.login input:focus,.login input:hover{border:1px solid var(--table-border)!important;box-shadow:none}.login .login-content input.form-control{padding:8px 12px 8px 0;background:transparent}.login .topWarmingContent{width:100%;padding-top:10px}.login .warmingIMg{width:75px;display:block}.login .warningContentP{width:100%;padding-top:10px;padding-right:20px}.login .warningContentP p{font-size:14px;padding:10px 0 0;color:var(--text-dark);line-height:1.6;margin:0}.login .loginBottomSet{padding-top:0}.login .login-content{width:100%;margin:0 auto}.login .btn-link{font-size:var(--font-13);font-weight:500;color:var(--text-dark);text-decoration:none;margin-top:3px;padding:0}.login .LogIn{margin-top:5px}.login .login-content h4{margin-bottom:10px}.login .Inputs{outline:none;padding:5px 10px;background-color:var(--bg-light);width:100%;height:36px;margin-bottom:8px;box-shadow:none;border:none}.login .btn-secondary{background-color:var(--btncancel);border:1px solid var(--primary);color:var(--primary);padding:8px 25px}.login .logo-group .logo-title{color:var(--text-dark);font-size:15px}.login .logo-group .logo-subtitle{color:var(--text-dark);font-size:13px;font-weight:400;letter-spacing:1.7px}.login .cfaLogoTop{display:block}.login .cfaLogoLeft{width:100%}.login .checkbox{float:left}.login .checkbox label{color:var(--text-dark);cursor:pointer}.login .clsPowered{position:absolute;bottom:40px;left:0px;right:0px;margin:0 auto;text-align:center}.login label{font-size:var(--font-13);font-weight:500!important}.login .clsMin-23{min-height:23px}.login .clsTopLogo{position:absolute;top:30px;left:0px;right:0px;margin:0 auto;text-align:center}.login .clsTopLogo h2{font-weight:700;color:#333!important;font-size:26px;margin:20px 0}.login .hero-gallery-inner{display:flex;flex-wrap:wrap}.login .fa-eye:before{content:\"\\f06e\";color:var(--primary);position:absolute;margin-top:27px;margin-left:-24px}.login .forget{font-size:var(--font-13);color:var(--text-dark);text-decoration:none}.login .checklabel{padding-left:10px;font-size:var(--font-13);margin-bottom:0}.login .Cardinality_logo{margin-top:-5px}.login h4#modal-basic-title{font-size:15px}.login .rightLoginSet{background:var(--bg-light)}.login .rightLoginSet .intake-form-labels{color:var(--text-dark)}.powered{position:absolute;bottom:0;left:0;right:0}.powered p,.powered span{color:var(--text-dark)}@media screen and (min-width: 991px) and (max-width: 1024px){.login .rightLoginSet{padding:0!important}}@media screen and (max-width: 1281px){.carousel-item{max-width:65%!important}}.banner-sec{background:#3E397E;background-position:center;background-repeat:no-repeat;background-size:cover;border-radius:0;height:100%}.logo-img h5{font-size:var(--font-16)}.login-content .registration-group::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}.login-content .registration-group::-webkit-scrollbar{width:10px;background-color:#f5f5f5}.login-content .registration-group::-webkit-scrollbar-thumb{background-color:#146a5d;background-image:-webkit-gradient(linear,0 0,0 100%,color-stop(.5,rgba(255,255,255,.2)),color-stop(.5,transparent),to(transparent))}.goto-register{border-bottom:1px solid #146A5D}.picslogin{border-bottom:solid 1px #ccc;margin-top:25px}.picslogin span{position:absolute;text-align:center;margin-top:-13px;left:43%;background:#fff;padding:0 10px;font-size:14px}.pi{position:absolute;right:30px;top:50%;transform:translateY(-50%);cursor:pointer;font-size:15px}input[type=password]::-ms-reveal,input[type=password]::-ms-clear{display:none}\n"], components: [{ type: i7.AlertComponent, selector: "app-alert" }, { type: i8.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }, { type: i9.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }], directives: [{ type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: LoginComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-login',
                    templateUrl: './login.component.html',
                    styleUrls: ['./login.component.scss'],
                    providers: [MessageService]
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Store }, { type: i2.Router }, { type: i3.FormBuilder }, { type: i4.NgbModal }, { type: i5.AlertService }, { type: i6.AuthService }, { type: i2.ActivatedRoute }]; }, propDecorators: { input: [{
                type: ViewChild,
                args: ['showhideinput']
            }], LOGININFO: [{
                type: Input
            }], RBACORG: [{
                type: Input
            }], passwordExpired: [{
                type: Output
            }], loginSuccessful: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,