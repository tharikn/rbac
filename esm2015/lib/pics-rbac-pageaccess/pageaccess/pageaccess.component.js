import { Component, ViewChild } from '@angular/core';
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { AppConstants } from '../@core/constants/app-constants';
import { AuthService } from '../@core/service/auth.service';
import { ManageAccessRadioComponent } from '../@shared/common-components/manage-access-radio/manage-access-radio.component';
import { PageAccessService } from '../@core/urls/page-access.service';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../@core/service/data-store.service";
import * as i3 from "@angular/router";
import * as i4 from "../@core/service/alert.service";
import * as i5 from "../@shared/alert/alert.component";
import * as i6 from "@angular/material/card";
import * as i7 from "../@shared/common-components/manage-access-radio/manage-access-radio.component";
import * as i8 from "angular2-multiselect-dropdown";
import * as i9 from "@angular/material/radio";
import * as i10 from "primeng/dropdown";
import * as i11 from "@angular/common";
import * as i12 from "../@core/directives/permission.directive";
import * as i13 from "primeng/inputtext";
export class PageaccessComponent {
    constructor(injector, formBuilder, cdRef, _storeservice, router, alert) {
        this.formBuilder = formBuilder;
        this.cdRef = cdRef;
        this._storeservice = _storeservice;
        this.router = router;
        this.alert = alert;
        this.userList = [];
        this.policyGroupData = [];
        this.roleAddedData = [];
        this.pageLevelAccess = false;
        this.multiPageAccess = false;
        this.fieldLevelAccess = false;
        this.moduleList = [];
        this.subModuleList = [];
        this.pageData = [];
        this.pagesList = [];
        this.selectedPageData = [];
        this.fData = [];
        this.moduleDropdownSettings = {};
        this.submoduleDropdownSettings = {};
        this.pageDropdownSettings = {};
        this.pageAccessDropdownSettings = {};
        this.fieldAccessDropdownSettings = {};
        this.fieldLevelClick = false;
        this.editPage = false;
        this.selectedFieldData = [];
        this.selectedPageAccessChanges = [];
        this.isRunCond = true;
        this.policyGroupPages = [];
        this.selectedRole = '';
        this.conditions = [];
        this.permissions = [];
        this.RBACORG = new RBACINFO();
        this.pageAccessService = injector.get(PageAccessService);
        this.authService = injector.get(AuthService);
        this.updatePage = false;
        this.showFieldValidity = false;
        this.conditions = [
            {
                name: 'Days',
                key: 'days'
            },
            {
                name: 'Always',
                key: 'always'
            }
        ];
        this.permissions = [
            {
                name: 'R',
                key: 'r'
            },
            {
                name: 'RW',
                key: 'rw'
            },
            {
                name: 'None',
                key: 'n'
            }
        ];
        this.pageDropdownSettings = {
            singleSelection: false,
            text: 'Select Pages',
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            enableSearchFilter: true,
            classes: 'myclass custom-class',
            labelKey: 'pagename',
            searchBy: ['pagename']
        };
        this.pageAccessDropdownSettings = {
            singleSelection: false,
            text: 'Select Pages',
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            enableSearchFilter: true,
            labelKey: 'pagename',
            searchBy: ['pagename']
        };
        this.fieldAccessDropdownSettings = {
            singleSelection: true,
            text: 'Select Page',
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            enableSearchFilter: true,
            labelKey: 'pagename',
            searchBy: ['pagename']
        };
        // this.orgSubs = this.authService.orgInfo.subscribe(org => {
        //   this.orgId = org;
        //   if (this.orgId) {
        //     this.getOrganizationPage();
        //   }
        // });
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                console.log(this.RBACORG, 'RBACORG Event Scheduler');
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                this.httpService = res['HTTPSERVICE'];
                if (this.environment) {
                    this.getOrganizationPage();
                    this.loadRbacForm();
                }
            }
        });
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    loadRbacForm() {
        this.rbacForm = this.formBuilder.group({
            id: new FormControl(null),
            accessBy: new FormControl(null),
            userid: new FormControl(''),
            policyid: new FormControl(null),
            roleid: new FormControl(null),
            provideAccess: new FormControl(null),
            pageAccess: new FormControl('2'),
            validity: new FormControl(null),
            module: new FormControl(null),
            submodule: new FormControl(null),
            pageList: new FormControl(null),
            ppages: new FormControl(null),
            fpages: new FormControl(null),
            fieldLevelData: new FormArray([]),
            pageLevelData: new FormArray([])
        });
    }
    accessBy(evt) {
        this.rbacForm.get('accessBy').setValue(evt);
        this.resetForm(evt);
    }
    userDropdown(evt) {
        this.userList = evt;
    }
    roleDropdown(evt) {
        this.roleAddedData = evt;
    }
    policyDropdown(evt) {
        this.policyGroupData = evt;
    }
    dropDownSelectedValues(evt) {
        this.selectedRole = '';
        this.updatePage = false;
        this.selectedAccess = evt.from;
        this.rbacForm.get('userid').setValue(evt.userid);
        this.rbacForm.get('roleid').setValue(evt.roleid);
        this.rbacForm.get('policyid').setValue(evt.policyid);
        if (this.pagesList.length === 0) {
            this.getOrganizationPage();
        }
        this.getSelectedPages();
        if (evt.from === 'role') {
            this.selectedRole = evt.roleid;
        }
    }
    getOrganizationPage() {
        if (this.orgId) {
            this.pageAccessService.getOrganizationPage(this.orgId).subscribe(res => {
                const data = res['data'];
                if (data && (data === null || data === void 0 ? void 0 : data.length)) {
                    this.pageData = data === null || data === void 0 ? void 0 : data.filter(a => a.activeVersion);
                    this.pagesList = this.pageData.map(x => {
                        return {
                            id: x.activeVersion.pageid,
                            pagename: x.activeVersion.pagename,
                            activeVersion: x.activeVersion
                        };
                    });
                }
            });
        }
    }
    getFallbackPermission(fAccess) {
        var _a, _b;
        if (((_a = fAccess === null || fAccess === void 0 ? void 0 : fAccess.value) === null || _a === void 0 ? void 0 : _a.pageAccess) === '2' || ((_b = fAccess === null || fAccess === void 0 ? void 0 : fAccess.value) === null || _b === void 0 ? void 0 : _b.access) === '2') {
            return this.permissions.filter(a => a.key !== 'rw');
        }
        else {
            return this.permissions;
        }
    }
    getSelectedPages(_selectedPages, _pageConfig, _assetconfig) {
        this.updatePage = false;
        this.policyGroupPages = [];
        if (this.selectedAccess === 'user') {
            this.selectedId = this.rbacForm.getRawValue().userid;
        }
        else if (this.selectedAccess === 'role') {
            const role = this.rbacForm.getRawValue().roleid;
            this.selectedId = role;
            if (role.rolePolicygroups && role.rolePolicygroups.length) {
                role.rolePolicygroups.forEach(policyGroup => {
                    this.pageAccessService.getPolicyGroupPage(policyGroup.policygroupid).subscribe(({ data }) => {
                        this.policyGroupCondition(data, policyGroup);
                    });
                });
            }
        }
        else {
            this.selectedId = this.rbacForm.getRawValue().policyid;
            this.selectedAccess = 'policygroup';
        }
        this.getConfiguredAssetData(this.selectedAccess, this.selectedId);
        this.pageAccessService.getDynamicPage(this.selectedAccess, this.selectedId).subscribe(res => {
            this.loadPages([], null, [], [], this.assetList);
            if (res && res['data'].length) {
                this.updatePage = true;
                const pageData = res['data'].map(a => a.page);
                pageData.forEach(x => { var _a; return (x.pagename = (_a = x === null || x === void 0 ? void 0 : x.activeVersion) === null || _a === void 0 ? void 0 : _a.pagename); });
                const uniquePageData = [...new Map(pageData.map(item => [item['id'], item])).values()];
                const pageIDs = uniquePageData.map(a => a['id']);
                const pageConfigData = res['data'].map(a => {
                    return {
                        id: a.id,
                        isfull: a.full,
                        ishide: a.hide,
                        isread: a.read,
                        isreadwrite: a.readwrite,
                        conditions: a.conditions
                    };
                });
                this.loadPages(uniquePageData, null, pageIDs, pageConfigData, this.assetList);
            }
        });
    }
    policyGroupCondition(data, policyGroup) {
        var _a, _b;
        const policyGroupPages = (data === null || data === void 0 ? void 0 : data.data) && (data === null || data === void 0 ? void 0 : data.data.length) ? data === null || data === void 0 ? void 0 : data.data : [];
        const uniquePolicyGroupPages = [...new Map(policyGroupPages.map(item => [item['page']['id'], item])).values()];
        this.policyGroupData = (this.policyGroupData.length && this.policyGroupData) || uniquePolicyGroupPages;
        this.policyGroupPages.push({
            name: (_b = (_a = this.policyGroupData.find(pgd => pgd.policygroup.id === policyGroup.policygroupid)) === null || _a === void 0 ? void 0 : _a.policygroup) === null || _b === void 0 ? void 0 : _b.policygroupname,
            data: uniquePolicyGroupPages
        });
    }
    getConfiguredAssetData(selectedAccess, selectedId) {
        this.pageAccessService.getAssetById(selectedAccess, selectedId).subscribe((res) => {
            this.assetList = res['data'].map(a => {
                return {
                    _id: a === null || a === void 0 ? void 0 : a.id,
                    id: a === null || a === void 0 ? void 0 : a.assetid,
                    isfull: a.full,
                    ishide: a.hide,
                    isread: a.read,
                    isreadwrite: a.readwrite,
                    conditions: a.conditions
                };
            });
        });
    }
    loadPages(tempPageData, action, pageids, pageConfig, fieldConfig) {
        this.pageData = tempPageData || [];
        this.pageData.forEach(a => { var _a, _b; return (a.pagename = tempPageData.length && ((_b = (_a = tempPageData.filter(b => b.id === a.id)[0]) === null || _a === void 0 ? void 0 : _a.activeVersion) === null || _b === void 0 ? void 0 : _b.pagename)); });
        const pl = this.rbacForm.get('pageList').value;
        if (pageids !== null) {
            const newPages = pl && (pl === null || pl === void 0 ? void 0 : pl.length) ? pl.map(key => key.id) : [];
            const pId = (newPages === null || newPages === void 0 ? void 0 : newPages.length) ? [...new Set(newPages.concat(pageids))] : pageids;
            const pList = this.pageData.filter(key => pId.includes(key.id));
            const pagesList = pList.map(x => {
                return {
                    id: x.id,
                    pagename: x.pagename,
                    activeVersion: x.activeVersion
                };
            });
            this.rbacForm.get('pageList').setValue(pagesList);
        }
        this.populatePage(action, pageConfig, fieldConfig, pageids);
    }
    populatePage(action = null, pageConfig = null, fieldConfig = null, pageids = null) {
        const pageIds = this.rbacForm.get('pageList').value;
        const id = pageIds.map(key => key.id);
        let provideAccess = this.rbacForm.get('provideAccess').value;
        if (id === null || id === void 0 ? void 0 : id.length) {
            if (!provideAccess) {
                this.rbacForm.get('provideAccess').setValue('1');
                this.pageLevelAccess = this.multiPageAccess = true;
                this.fieldLevelAccess = false;
                provideAccess = '1';
            }
            // Pageids from api
            this.selectedPageData = pageIds;
            if (provideAccess === '1') {
                this.rbacForm.get('ppages').setValue(pageIds);
                if (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.length) {
                    this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.map(ele => {
                        return {
                            fieldName: ele === null || ele === void 0 ? void 0 : ele.description,
                            access: this.checkAccessType(ele),
                            assetid: ele === null || ele === void 0 ? void 0 : ele.assetid,
                            pageId: ele === null || ele === void 0 ? void 0 : ele.id
                        };
                    }), this.selectedFieldData);
                }
                this.getPageLevelList(action, pageConfig);
            }
            else if (provideAccess === '2') {
                if (fieldConfig !== null) {
                    const pList = this.pageData.filter(key => key.id === pageids[0]);
                    this.rbacForm.get('fpages').setValue(pList);
                    this.getFieldLevelList(action, fieldConfig);
                }
                else {
                    const pId = this.selectedPageData.filter(ele => { var _a; return ele.id === ((_a = pageIds[0]) === null || _a === void 0 ? void 0 : _a.id); });
                    this.rbacForm.get('fpages').setValue(pId);
                    this.getFieldLevelList(action, fieldConfig);
                }
            }
        }
        else {
            this.removeAllPopulatePage();
        }
    }
    removeAllPopulatePage() {
        this.selectedPageData = [];
        this.pageLevelAccess = false;
        this.fieldLevelAccess = false;
        const f = this.rbacForm.controls['fieldLevelData'];
        f.controls = [];
        const p = this.rbacForm.controls['pageLevelData'];
        p.controls = [];
        this.rbacForm.get('ppages').setValue(null);
        this.rbacForm.get('fpages').setValue(null);
        this.rbacForm.get('provideAccess').setValue(null);
        this.rbacForm.get('pageLevelData').setValue([]);
        this.rbacForm.get('fieldLevelData').setValue([]);
    }
    showLevelAccess(id) {
        var _a;
        const f = this.rbacForm.controls['fieldLevelData'];
        if ((_a = f.getRawValue()) === null || _a === void 0 ? void 0 : _a.length) {
            this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(f.getRawValue(), this.selectedFieldData);
        }
        f.controls = [];
        const pageIds = this.rbacForm.get('pageList').value;
        if (id === '1') {
            this.pageLevelAccess = true;
            this.multiPageAccess = true;
            this.fieldLevelAccess = false;
            if (pageIds === null || pageIds === void 0 ? void 0 : pageIds.length) {
                setTimeout(() => {
                    if (!this.rbacForm.get('ppages').value) {
                        this.rbacForm.get('ppages').patchValue(pageIds);
                    }
                    this.getPageLevelList('click');
                    if (this.isRunCond) {
                        this.isRunCond = false;
                    }
                }, 200);
            }
        }
        else {
            this.pageLevelAccess = false;
            this.multiPageAccess = false;
            this.fieldLevelAccess = true;
            const fpages = this.rbacForm.get('fpages').value;
            this.fPagesCheckLength(fpages, pageIds);
            this.selectedPageLevelData = this.rbacForm.get('pageLevelData').value;
            this.getFieldLevelList('click');
        }
    }
    fPagesCheckLength(fpages, pageIds) {
        if (!fpages || !(fpages === null || fpages === void 0 ? void 0 : fpages.length)) {
            if (pageIds === null || pageIds === void 0 ? void 0 : pageIds.length) {
                const p = [pageIds[0]];
                this.rbacForm.get('fpages').setValue(p);
            }
        }
    }
    getPageLevelList(action = null, pageConfig = null) {
        const accessArray = this.rbacForm.get('pageLevelData');
        const formValue = this.rbacForm.getRawValue();
        const pAccessId = this.rbacForm.get('ppages').value;
        const pId = pAccessId.map(key => key.pageid || key.id);
        // first check exist page config
        if (pageConfig !== null) {
            // check selected value length
            let existSelectedPageId = [];
            if (formValue.pageLevelData.length) {
                existSelectedPageId = formValue.pageLevelData.map(id => id.id);
            }
            for (let i = 0; i < pId.length; i++) {
                let setAccess = '';
                setAccess = this.pageAccessService.getAccess(pageConfig[i]);
                const pageName = this.pageData.filter(key => key.id === pId[i]);
                if (existSelectedPageId.length) {
                    this.getVersionAccessArray(existSelectedPageId, pId, i, accessArray, pageName, setAccess, pageConfig);
                }
                else {
                    this.getPageAccessArray(pId, i, accessArray, pageName, setAccess, pageConfig);
                }
            }
        }
        this.forActionClick(action, pId, accessArray);
    }
    getVersionAccessArray(existSelectedPageId, pId, i, accessArray, pageName, setAccess, pageConfig) {
        const checkPid = existSelectedPageId.includes(pId[i]);
        if (!checkPid) {
            accessArray.push(new FormGroup({
                pageName: new FormControl(pageName[0]['activeVersion']['pagename']),
                pageid: new FormControl(pId[i]),
                pageAccess: new FormControl(setAccess),
                validity: new FormControl((pageConfig[i].conditions && pageConfig[i].conditions.value) || '1'),
                condition: new FormControl(pageConfig[i].conditions ? 'days' : 'always'),
                fallbackTo: new FormControl((pageConfig[i].conditions && pageConfig[i].conditions.fallbackTo) || 'n')
            }));
        }
    }
    getPageAccessArray(pId, i, accessArray, pageName, setAccess, pageConfig) {
        console.log('FORMCONTROL', pageName);
        accessArray.push(new FormGroup({
            pageName: new FormControl(pageName[0]['pagename']),
            pageid: new FormControl(pId[i]),
            pageAccess: new FormControl(setAccess),
            validity: new FormControl((pageConfig[i].conditions && pageConfig[i].conditions.value) || '1'),
            condition: new FormControl(pageConfig[i].conditions ? 'days' : 'always'),
            fallbackTo: new FormControl((pageConfig[i].conditions && pageConfig[i].conditions.fallbackTo) || 'n')
        }));
    }
    forActionClick(action, pId, accessArray) {
        var _a;
        if (action === 'click') {
            const existingValue = ((_a = this.selectedPageLevelData) === null || _a === void 0 ? void 0 : _a.length) ? this.selectedPageLevelData : accessArray.getRawValue();
            let pagesFromField = Array.from(new Set([...this.selectedFieldData].map(ele => ele.pageId))).filter(ele => ele);
            if (pId === null || pId === void 0 ? void 0 : pId.length) {
                pagesFromField = pId;
            }
            if (pagesFromField === null || pagesFromField === void 0 ? void 0 : pagesFromField.length) {
                accessArray.controls = [];
                accessArray.controls = this.pageAccessService.getAccessArrayOnClick(pagesFromField, this.pagesList, this.selectedFieldData, this.savedPageAccessPatching, existingValue);
                this.savedPageAccessPatching = false;
            }
        }
    }
    checkAccessType(data) {
        if (data === null || data === void 0 ? void 0 : data.isfull) {
            return '2';
        }
        else if (data === null || data === void 0 ? void 0 : data.ishide) {
            return '4';
        }
        else if (data === null || data === void 0 ? void 0 : data.isread) {
            return '3';
        }
        else if (data === null || data === void 0 ? void 0 : data.isreadwrite) {
            return '2';
        }
    }
    getFieldLevelList(action = null, fieldConfig = null) {
        const accessArray = this.rbacForm.get('fieldLevelData');
        const formValue = this.rbacForm.getRawValue();
        const pAccessId = this.rbacForm.get('fpages').value;
        const pageIds = this.rbacForm.get('pageList').value;
        const fieldLevel = pageIds.filter(x => x.id === pAccessId);
        this.checkFieldLevelCondition(fieldLevel, pAccessId);
        this.fieldConfigCheck(fieldConfig, accessArray);
        if (action === 'click') {
            accessArray.controls = [];
            this.pageAccessService.getAssetByPageId(this.pId).subscribe(res => {
                const data = res['data'];
                this.getAccessArrayCheck(data, formValue, accessArray);
            });
        }
    }
    checkFieldLevelCondition(fieldLevel, pAccessId) {
        if (fieldLevel.length > 0) {
            this.showFieldValidity = fieldLevel[0].templatejson ? true : false;
            this.fieldVersionCheck(fieldLevel, pAccessId);
        }
        else {
            this.showFieldValidity = pAccessId[0].templatejson ? true : false;
            if (pAccessId[0]['version']) {
                this.pId = pAccessId[0].pageid;
            }
            else {
                this.pId = pAccessId && (pAccessId === null || pAccessId === void 0 ? void 0 : pAccessId.length) ? pAccessId[0]['id'] : null;
            }
        }
    }
    fieldVersionCheck(fieldLevel, pAccessId) {
        if (fieldLevel[0]['version']) {
            this.pId = fieldLevel[0].pageid;
        }
        else {
            if (Array.isArray(pAccessId)) {
                this.pId = pAccessId && (pAccessId === null || pAccessId === void 0 ? void 0 : pAccessId.length) ? pAccessId[0]['id'] : null;
            }
            else {
                this.pId = pAccessId;
            }
        }
    }
    fieldConfigCheck(fieldConfig, accessArray) {
        if (fieldConfig !== null) {
            accessArray.controls = [];
            this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.map(ele => {
                return {
                    fieldName: ele === null || ele === void 0 ? void 0 : ele.description,
                    access: this.checkAccessType(ele),
                    assetid: ele.assetid,
                    pageId: ele.id
                };
            }), this.selectedFieldData);
            this.existingSelectedFieldData = [...this.selectedFieldData];
            this.pageAccessService.getAssetByPageId(this.pId).subscribe(res => {
                const data = res['data'];
                this.mergedAsset = this.mergeAsset(data, this.assetList);
                if (this.mergedAsset.includes(undefined)) {
                    this.mergedAsset = data;
                    if (this.mergedAsset.length !== (data === null || data === void 0 ? void 0 : data.length)) {
                        this.mergedAsset = data;
                    }
                }
                this.fData = data;
                this.getMergedAsset(accessArray);
            });
        }
    }
    getMergedAsset(accessArray) {
        for (let i = 0; i < this.mergedAsset.length; i++) {
            const access = this.pageAccessService.getAccess(this.mergedAsset[i]);
            accessArray.push(new FormGroup({
                fieldName: new FormControl(access[i]['displayname']),
                access: new FormControl('2'),
                assetid: new FormControl(access[i]['id']),
                pageId: new FormControl(this.pId),
                validity: new FormControl(this.mergedAsset[i].conditions ? this.mergedAsset[i].conditions.value : '1'),
                condition: new FormControl(this.mergedAsset[i].conditions ? 'days' : 'always'),
                fallbackTo: new FormControl(this.mergedAsset[i].conditions ? this.mergedAsset[i].conditions.fallbackTo : '')
            }));
        }
    }
    getAccessArrayCheck(data, formValue, accessArray) {
        var _a, _b, _c, _d, _e;
        if (data === null || data === void 0 ? void 0 : data.length) {
            this.mergedAsset = this.assetList ? this.mergeAsset(data, this.assetList) : data;
            this.checkMergedAsset(data);
            if (formValue.fieldLevelData.length) {
                this.selectedFieldData = this.pageAccessService.setSelectedFieldPage(formValue.fieldLevelData, this.selectedFieldData);
            }
            let access = null;
            if ((_a = this.savedFieldPagesPatching) === null || _a === void 0 ? void 0 : _a.length) {
                access = (_b = this.savedFieldPagesPatching.find(ele => ele.pageid === this.pId)) === null || _b === void 0 ? void 0 : _b.access;
                this.savedFieldPagesPatching = this.savedFieldPagesPatching.filter(ele => ele.pageid !== this.pId);
            }
            this.fData = data;
            const existingFieldDataMap = {};
            if (!access && ((_c = this.selectedFieldData) === null || _c === void 0 ? void 0 : _c.length)) {
                (_e = (_d = this.assetList) === null || _d === void 0 ? void 0 : _d.filter(ele => ele.pageId === this.pId)) === null || _e === void 0 ? void 0 : _e.forEach(ele => {
                    existingFieldDataMap[ele.assetid] = ele.access;
                });
            }
            this.getAccessByAsset(accessArray);
        }
        else {
            accessArray.controls = [];
        }
    }
    checkMergedAsset(data) {
        if (this.mergedAsset.includes(undefined)) {
            this.mergedAsset = data;
            if (this.mergedAsset.length !== data.length) {
                this.mergedAsset = data;
            }
        }
    }
    getAccessByAsset(accessArray) {
        for (const asset of this.mergedAsset) {
            const assetAccess = this.pageAccessService.getAccess(asset);
            accessArray.push(new FormGroup({
                fieldName: new FormControl(asset['displayname']),
                access: new FormControl(assetAccess ? assetAccess : '2'),
                assetid: new FormControl(asset['id']),
                pageId: new FormControl(this.pId),
                validity: new FormControl(asset.conditions ? asset.conditions.value : '1'),
                condition: new FormControl(asset.conditions ? 'days' : 'always'),
                fallbackTo: new FormControl(asset.conditions ? asset.conditions.fallbackTo : '')
            }));
        }
    }
    mergeAsset(arr1, arr2) {
        return arr1.map((item, _i) => {
            for (const value of arr2) {
                if (item.id === value.id) {
                    return Object.assign({}, item, value);
                }
            }
        });
    }
    submitAlert() {
        event.stopPropagation();
        const pageLevelAccessFormControl = this.rbacForm.get('pageLevelData');
        if (!this.fieldLevelAccess || !(pageLevelAccessFormControl === null || pageLevelAccessFormControl === void 0 ? void 0 : pageLevelAccessFormControl.touched)) {
            $('#submitAlert').modal('show');
        }
        else {
            this.saveRbac();
        }
    }
    saveRbac() {
        const access = this.rbacForm.getRawValue();
        const pageAccessFormControl = this.rbacForm.get('pageLevelData');
        const _url = '';
        const userid = this.rbacForm.get('userid').value;
        const roleId = this.rbacForm.get('roleid').value;
        const policyId = this.rbacForm.get('policyid').value;
        const pageLevelData = access.pageLevelData;
        const fieldLevelData = access.fieldLevelData;
        if (this.fieldLevelAccess === false) {
            this.getPageLevelByArray(pageAccessFormControl);
        }
        else {
            this.getFieldLevelByAsset(fieldLevelData);
        }
        if (this.fieldLevelAccess) {
            let selectedId;
            if (this.selectedAccess === 'user') {
                selectedId = this.rbacForm.getRawValue().userid;
            }
            else if (this.selectedAccess === 'role') {
                selectedId = this.rbacForm.getRawValue().roleid;
            }
            else {
                selectedId = this.rbacForm.getRawValue().policyid;
                this.selectedAccess = 'policygroup';
            }
            this.pageAccessService.createAsset(this.selectedAccess, selectedId, this.fullArray).subscribe(_res => {
                this.getConfiguredAssetData(this.selectedAccess, selectedId);
                this.alert.success('Field Access Updated Successfully');
            });
        }
        else {
            if (this.updatePage) {
                if (this.selectedAccess === 'policy') {
                    this.selectedAccess = 'policygroup';
                }
                this.pageAccessService.updateDynamicPage(this.selectedAccess, this.selectedId, this.fullArray).subscribe(_res => {
                    this.alert.success('Access Updated Successfully');
                }, _err => this.alert.error(AppConstants.errorMessage));
            }
            else {
                this.pageAccessService
                    .createAccess(this.fieldLevelAccess, access.accessBy, this.fullArray, userid, roleId, policyId)
                    .subscribe(_result => {
                    this.alert.success('Access Saved Successfully');
                }, _error => this.alert.error(AppConstants.errorMessage));
            }
        }
    }
    getPageLevelByArray(pageLevelData) {
        var _a;
        this.fullArray = (_a = pageLevelData === null || pageLevelData === void 0 ? void 0 : pageLevelData.controls) === null || _a === void 0 ? void 0 : _a.map(x => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            return {
                page: (_a = x === null || x === void 0 ? void 0 : x.value) === null || _a === void 0 ? void 0 : _a.pageid,
                readwrite: ((_b = x === null || x === void 0 ? void 0 : x.value) === null || _b === void 0 ? void 0 : _b.pageAccess) === '2' ? true : false,
                read: ((_c = x === null || x === void 0 ? void 0 : x.value) === null || _c === void 0 ? void 0 : _c.pageAccess) === '3' ? true : false,
                none: ((_d = x === null || x === void 0 ? void 0 : x.value) === null || _d === void 0 ? void 0 : _d.pageAccess) === '4' ? true : false,
                full: ((_e = x === null || x === void 0 ? void 0 : x.value) === null || _e === void 0 ? void 0 : _e.pageAccess) === '5' ? true : false,
                touched: x === null || x === void 0 ? void 0 : x.touched,
                conditions: ((_f = x === null || x === void 0 ? void 0 : x.value) === null || _f === void 0 ? void 0 : _f.condition) !== 'always'
                    ? {
                        attribute: 'created',
                        condition: 'lte',
                        value: (_g = x === null || x === void 0 ? void 0 : x.value) === null || _g === void 0 ? void 0 : _g.validity,
                        value_type: 'variable',
                        fallbackTo: (_h = x === null || x === void 0 ? void 0 : x.value) === null || _h === void 0 ? void 0 : _h.fallbackTo,
                        type: 'timestamp'
                    }
                    : null
            };
        });
    }
    getFieldLevelByAsset(fieldLevelData) {
        this.fullArray = fieldLevelData.map(x => {
            var _a, _b;
            const assetData = (_a = this.assetList) === null || _a === void 0 ? void 0 : _a.filter(a => a.id === x.assetid && a);
            return {
                id: assetData ? (_b = assetData[0]) === null || _b === void 0 ? void 0 : _b._id : null,
                asset: x.assetid,
                readwrite: (x === null || x === void 0 ? void 0 : x.access) === '2' ? true : false,
                read: (x === null || x === void 0 ? void 0 : x.access) === '3' ? true : false,
                none: (x === null || x === void 0 ? void 0 : x.access) === '4' ? true : false,
                full: (x === null || x === void 0 ? void 0 : x.access) === '5' ? true : false,
                conditions: x.condition !== 'always'
                    ? {
                        attribute: 'created',
                        condition: 'lte',
                        value: x.validity,
                        value_type: 'variable',
                        fallbackTo: x.fallbackTo,
                        type: 'timestamp'
                    }
                    : null
            };
        });
    }
    // edit functionalites based on policy group
    setPolicyLevelPagePatching(pageConfig, assetconfig) {
        const pageIds = pageConfig.map(key => key.pageid);
        const selectedModules = [];
        const uniquePage = [...new Set(pageIds)];
        const selectedPages = uniquePage;
        this.rbacForm.get('provideAccess').setValue('1');
        this.pageLevelAccess = this.multiPageAccess = true;
        this.fieldLevelAccess = false;
        const m = this.rbacForm.get('module').value;
        if (m !== '' && m !== null) {
            const newModule = m.concat(selectedModules);
            const uniqueNewModule = [...new Set(newModule)];
            this.rbacForm.get('module').setValue(uniqueNewModule);
        }
        else {
            this.rbacForm.get('module').setValue(selectedModules);
        }
        this.getSelectedPages(selectedPages, pageConfig, assetconfig);
    }
    setPolicyLevelFieldPatching(pageConfig, assetconfig, from = null) {
        const mKey = assetconfig.filter(key => key.modulekey !== null && key.modulekey !== '' && key.isactive !== '' && key.isactive !== null);
        const mmkey = mKey.map(key => key.modulekey);
        const modules = this.moduleList.filter(key => mmkey.includes(key.refKey));
        const pageId = assetconfig.filter(key => key.pageid !== null);
        const pageIds = pageId.map(key => key.pageid);
        let selectedModules;
        selectedModules = [...new Set(modules)];
        const uniquePage = [...new Set(pageIds)];
        const selectedPages = uniquePage;
        this.rbacForm.get('provideAccess').setValue('2');
        this.pageLevelAccess = this.multiPageAccess = false;
        this.fieldLevelAccess = true;
        if (from === 'field') {
            const m = this.rbacForm.get('module').value;
            if (m !== '') {
                const mk = selectedModules.concat(m);
                selectedModules = mk;
                this.rbacForm.get('module').setValue(selectedModules);
            }
            const sm = this.rbacForm.get('submodule').value;
            if (sm !== '') {
                this.rbacForm.get('module').setValue(selectedModules);
            }
        }
        else {
            this.rbacForm.get('module').setValue(selectedModules);
        }
        this.getSelectedPages(selectedPages, pageConfig, assetconfig);
    }
    getDataBasedOnPolicy(from = null) {
        const policyids = this.rbacForm.get('policyid').value.map(a => a.id);
        if (policyids.length) {
            this.editPage = true;
            this.pageLevelAccess = false;
            this.fieldLevelAccess = false;
            const f = this.rbacForm.controls['fieldLevelData'];
            f.controls = [];
            const p = this.rbacForm.controls['pageLevelData'];
            p.controls = [];
            for (let j = 0; j < policyids.length; j++) {
                const pageConfig = this.policyGroupData.filter(key => key.id === policyids[j]);
                if (from === 'field') {
                    this.editPage = false;
                    if (pageConfig[0].assetConfigs.length) {
                        this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs, from);
                    }
                    else if (policyids.length === j + 1) {
                        this.showLevelAccess('2');
                    }
                }
                else {
                    this.getCheckPageConfig(pageConfig);
                }
            }
        }
        else {
            this.resetForm('3');
            this.rbacForm.get('accessBy').setValue('3');
        }
    }
    getCheckPageConfig(pageConfig) {
        if (pageConfig[0].pageConfigs.length) {
            this.fieldLevelClick = true;
            this.setPolicyLevelPagePatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
        }
        else if (pageConfig[0].assetConfigs.length) {
            const pAccess = this.rbacForm.get('provideAccess').value;
            if (pAccess !== '1') {
                this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
            }
        }
    }
    getDataBasedOnRole(from = null) {
        const roleIds = this.rbacForm.get('roleid').value.map(a => a.id);
        if (roleIds.length) {
            this.editPage = true;
            this.pageLevelAccess = false;
            this.fieldLevelAccess = false;
            const f = this.rbacForm.controls['fieldLevelData'];
            f.controls = [];
            const p = this.rbacForm.controls['pageLevelData'];
            p.controls = [];
            // loop the role ids
            for (let j = 0; j < roleIds.length; j++) {
                const pageConfig = this.roleAddedData.filter(key => key.id === roleIds[j]);
                this.getOrgId(pageConfig);
                if (from === 'field') {
                    this.editPage = false;
                    if (pageConfig[0].assetConfigs.length) {
                        this.setPolicyLevelFieldPatching(pageConfig[0].rolePolicyGroupConfigs, pageConfig[0].assetConfigs, from);
                    }
                    else if (roleIds.length === j + 1) {
                        this.showLevelAccess('2');
                    }
                }
                else {
                    this.getCheckRolePolicyGroup(pageConfig);
                }
            }
        }
        else {
            this.resetForm('2');
            this.rbacForm.get('accessBy').setValue('2');
        }
    }
    getOrgId(pageConfig) {
        var _a;
        if (pageConfig === null || pageConfig === void 0 ? void 0 : pageConfig.length) {
            this.organisationid = (_a = pageConfig[0]) === null || _a === void 0 ? void 0 : _a.organizationid;
        }
    }
    getCheckRolePolicyGroup(pageConfig) {
        if (pageConfig[0].rolePolicyGroupConfigs.length) {
            this.setPolicyLevelPagePatching(pageConfig[0].rolePolicyGroupConfigs, pageConfig[0].assetConfigs);
        }
        else if (pageConfig[0].assetConfigs.length) {
            const pAccess = this.rbacForm.get('provideAccess').value;
            if (pAccess !== '1') {
                this.setPolicyLevelFieldPatching(pageConfig[0].rolePolicyGroupConfigs, pageConfig[0].assetConfigs);
            }
        }
    }
    getRoleAndPolicyData(from = null) {
        const userIds = this.rbacForm.get('userid').value.map(a => a.id);
        if (userIds.length) {
            this.editPage = true;
            this.pageLevelAccess = false;
            this.fieldLevelAccess = false;
            const f = this.rbacForm.controls['fieldLevelData'];
            f.controls = [];
            const p = this.rbacForm.controls['pageLevelData'];
            p.controls = [];
            // loop the role ids
            for (let j = 0; j < userIds.length; j++) {
                const pageConfig = this.userList.filter(key => key.id === userIds[j]);
                if (from === 'field') {
                    this.editPage = false;
                    if (pageConfig[0].assetConfigs.length) {
                        this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs, from);
                    }
                    else if (userIds.length === j + 1) {
                        this.showLevelAccess('2');
                    }
                }
                else {
                    this.getCheckPolicyLevelField(pageConfig);
                }
            }
        }
        else {
            this.resetForm('1');
            this.rbacForm.get('accessBy').setValue('1');
        }
    }
    getCheckPolicyLevelField(pageConfig) {
        if (pageConfig[0].pageConfigs.length) {
            this.setPolicyLevelPagePatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
        }
        else if (pageConfig[0].assetConfigs.length) {
            const pAccess = this.rbacForm.get('provideAccess').value;
            if (pAccess !== '1') {
                this.setPolicyLevelFieldPatching(pageConfig[0].pageConfigs, pageConfig[0].assetConfigs);
            }
        }
    }
    resetForm(id = null, clear = null) {
        this.subModuleList = this.pageData = this.selectedPageData = [];
        this.pageLevelAccess = this.fieldLevelAccess = false;
        const f = this.rbacForm.controls['fieldLevelData'];
        f.controls = [];
        const p = this.rbacForm.controls['pageLevelData'];
        p.controls = [];
        this.rbacForm.reset();
        if (id !== null) {
            this.rbacForm.get('accessBy').setValue(id);
        }
        else if (clear !== null) {
            this.AddComponent.resetForm();
        }
    }
    redirectList() {
        this.router.navigateByUrl('/pages/rbac/page-access/page-access-list');
    }
    saveAccessPatching() {
        var _a;
        this.savedFieldPagesPatching = [];
        this.savedPageAccessPatching = false;
        if (((_a = this.rbacForm.get('provideAccess')) === null || _a === void 0 ? void 0 : _a.value) === '2') {
            this.savedPageAccessPatching = true;
        }
        else {
            const ppId = this.rbacForm.get('pageLevelData').value;
            this.savedFieldPagesPatching = [];
            if (ppId === null || ppId === void 0 ? void 0 : ppId.length) {
                ppId.forEach(element => {
                    const selectedObj = { pageid: element === null || element === void 0 ? void 0 : element.pageid, access: element === null || element === void 0 ? void 0 : element.pageAccess };
                    this.savedFieldPagesPatching.push(selectedObj);
                });
            }
        }
        this.alert.success('Temporarily saved Data for changes');
    }
    changeFieldAccess(_index) {
        const accessArray = this.rbacForm.get('pageLevelData');
        const fieldValue = this.rbacForm.get('fieldLevelData').value.map(el => el.access);
        let maxOcc = { element: null, occured: 0 };
        fieldValue.reduce((acc, el) => {
            acc[el] = acc[el] ? acc[el] + 1 : 1;
            if (acc[el] > maxOcc.occured) {
                maxOcc = { element: el, occured: acc[el] };
            }
            return acc;
        }, {});
        const pageIndex = this.rbacForm
            .get('pageLevelData')
            .value.findIndex(el => el.pageid === this.rbacForm.get('fieldLevelData').value[0].pageId);
        if (pageIndex > -1) {
            accessArray.push(new FormGroup({
                pageName: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].pageName),
                pageid: new FormControl(this.rbacForm.get('pageLevelData').value[pageIndex].pageid),
                pageAccess: new FormControl(maxOcc.element ? maxOcc.element : '2')
            }));
            accessArray.removeAt(pageIndex);
            const isExist = this.selectedPageAccessChanges.findIndex(el => el.pageid === this.rbacForm.get('pageLevelData').value[pageIndex].pageid);
            if (isExist > -1) {
                this.selectedPageAccessChanges.splice(isExist, 1);
            }
        }
    }
    changePageAccess(index) {
        var _a;
        const selectedValue = this.rbacForm.get('pageLevelData').value[index];
        const isExist = (_a = this.selectedPageAccessChanges) === null || _a === void 0 ? void 0 : _a.findIndex(el => (el === null || el === void 0 ? void 0 : el.pageid) === selectedValue.pageid);
        if (isExist > -1) {
            this.selectedPageAccessChanges[isExist].pageAccess = selectedValue.pageAccess;
        }
        else {
            this.selectedPageAccessChanges.push(selectedValue);
        }
    }
}
PageaccessComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageaccessComponent, deps: [{ token: i0.Injector }, { token: i1.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: i2.DataStoreService }, { token: i3.Router }, { token: i4.AlertService }], target: i0.ɵɵFactoryTarget.Component });
PageaccessComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageaccessComponent, selector: "lib-pageaccess", viewQueries: [{ propertyName: "AddComponent", first: true, predicate: ManageAccessRadioComponent, descendants: true }], ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"row rbac-card\">\r\n  <div class=\"col-12\">\r\n    <mat-card class=\"mat-card\">\r\n      <mat-card-content class=\"p-2\">\r\n        <form [formGroup]=\"rbacForm\">\r\n          <app-manage-access-radio (accessBy)=\"accessBy($event)\" (userDropdown)=\"userDropdown($event)\"\r\n            (roleDropdown)=\"roleDropdown($event)\" (policyDropdown)=\"policyDropdown($event)\"\r\n            (dropDownSelectedValues)=\"dropDownSelectedValues($event)\"></app-manage-access-radio>\r\n\r\n          <h3 class=\"radio-title mb-2\">Page Access Management</h3>\r\n          <mat-card class=\"mat-card\">\r\n            <mat-card-content class=\"p-2\">\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"false\">\r\n                  <label class=\"radio-title\">Modules</label>\r\n                  <angular2-multiselect [data]=\"moduleList\" [settings]=\"moduleDropdownSettings\"\r\n                    onSelect=\"loadSubModule('click')\" onDeSelect=\"removeSubModule($event)\"\r\n                    onSelectAll=\"loadSubModule('click')\" onDeSelectAll=\"removeAllSubModule()\"\r\n                    formControlName=\"module\"></angular2-multiselect>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"false\">\r\n                  <label class=\"radio-title\">Sub Modules</label>\r\n                  <angular2-multiselect [data]=\"subModuleList\" [settings]=\"submoduleDropdownSettings\"\r\n                    onSelect=\"loadSubModulePage('click')\" onDeSelect=\"removeSubModulePage($event, 'submodule')\"\r\n                    onSelectAll=\"loadSubModulePage('click')\" onDeSelectAll=\"removeAllSubModulePage()\"\r\n                    formControlName=\"submodule\">\r\n                  </angular2-multiselect>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n                  <label class=\"radio-title\">Pages</label>\r\n                  <angular2-multiselect [data]=\"pagesList\" [settings]=\"pageDropdownSettings\"\r\n                    (onSelect)=\"populatePage('click')\" fieldKey=\"SETTINGS_PAG_ACC_PAGE\"\r\n                    (onDeSelect)=\"populatePage('click')\" (onSelectAll)=\"populatePage('click')\"\r\n                    (onDeSelectAll)=\"removeAllPopulatePage()\" formControlName=\"pageList\"></angular2-multiselect>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n                  <label class=\"radio-title d-block required\">Provide Access by </label>\r\n                  <mat-radio-group formControlName=\"provideAccess\">\r\n                    <mat-radio-button value=\"1\" (click)=\"showLevelAccess('1')\"\r\n                      fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL\">Page Level&nbsp;&nbsp;\r\n                    </mat-radio-button>\r\n                    <mat-radio-button value=\"2\" (click)=\"showLevelAccess('2')\"\r\n                      fieldKey=\"SETTINGS_PAG_ACC_PAG_FIELD_LEVEL\">Field Level\r\n                    </mat-radio-button>\r\n                  </mat-radio-group>\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-md-6 col-12 mb-3\" *ngIf=\"fieldLevelAccess\">\r\n                  <label class=\"radio-title\">Select Page</label>\r\n                  <br />\r\n                  <p-dropdown id=\"selectpage\" ariaLabelledBy=\"selectpage\" [options]=\"selectedPageData\"\r\n                    fieldKey=\"SETTINGS_PAG_ACC_PAGE\" (onChange)=\"getFieldLevelList('click')\" formControlName=\"fpages\"\r\n                    optionLabel=\"pagename\" optionValue=\"id\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n\r\n              <div *ngIf=\"pageLevelAccess\" class=\"row\">\r\n                <div class=\"col-12 mt-3 pageLevelAccessTable\">\r\n                  <table aria-describedby=\"pageLevelAccessTable\" class=\"table table-bordered\">\r\n                    <col />\r\n                    <col style=\"width: 120px\" />\r\n                    <col style=\"width: 120px\" />\r\n                    <col style=\"width: 120px\" />\r\n                    <thead>\r\n                      <th class=\"text-left\">Page Name</th>\r\n                      <th class=\"text-center\">R</th>\r\n                      <th class=\"text-center\">RW</th>\r\n                      <th class=\"text-center\">RWD</th>\r\n                      <th class=\"text-center\">None</th>\r\n                      <th class=\"text-center\">Validity</th>\r\n                    </thead>\r\n                    <tbody>\r\n                      <ng-container formArrayName=\"pageLevelData\"\r\n                        *ngFor=\"let fAccess of rbacForm.get('pageLevelData')['controls']; let i = index\">\r\n                        <tr [formGroup]=\"rbacForm.get('pageLevelData')['controls'][i]\">\r\n                          <td class=\"text-left\">\r\n                            <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                              formControlName=\"pageName\" placeholder=\"pageleveldata\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\" type=\"radio\" value=\"3\"\r\n                              title=\"pageradio{{ i }}\" fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE\" type=\"radio\" value=\"2\"\r\n                              title=\"pageradio{{ i }}\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_READ_WRITE_DELETE\" type=\"radio\" value=\"5\"\r\n                              title=\"pageradio{{ i }}\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <input (change)=\"changePageAccess(i)\" formControlName=\"pageAccess\"\r\n                              fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_NONE\" type=\"radio\" value=\"4\"\r\n                              title=\"pageradio{{ i }}\" />\r\n                          </td>\r\n                          <td class=\"text-center\">\r\n                            <ng-container *ngIf=\"\r\n                                  rbacForm.get('pageList')?.value[i]?.activeVersion?.gridconfig ||\r\n                                  rbacForm.get('pageList')?.value[i]?.gridconfig\r\n                                \">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" [disabled]=\"fAccess?.value?.pageAccess === '4'\"\r\n                                optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <input type=\"number\" class=\"validity\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [readonly]=\"fAccess?.value?.pageAccess === '4'\" [min]=\"1\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAGE_PAGE_LEVEL_VALIDITY\" formControlName=\"validity\"\r\n                                style=\"width: 50px; margin-left: 15px\" pInputText />\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.pageAccess === '3' || fAccess?.value?.pageAccess === '4'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </ng-container>\r\n                          </td>\r\n                        </tr>\r\n                      </ng-container>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\" *ngIf=\"fieldLevelAccess\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"table-responsive\">\r\n                    <table aria-describedby=\"fieldLevelAccessTable\" class=\"table table-bordered\">\r\n                      <col />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <thead>\r\n                        <th class=\"text-left\">Field Name</th>\r\n                        <th class=\"text-center\">Read</th>\r\n                        <th class=\"text-center\">Write</th>\r\n                        <th class=\"text-center\">None</th>\r\n                        <th class=\"text-center\" *ngIf=\"showFieldValidity\">Validity</th>\r\n                      </thead>\r\n                      <tbody>\r\n                        <ng-container formArrayName=\"fieldLevelData\"\r\n                          *ngFor=\"let fAccess of rbacForm.get('fieldLevelData')['controls']; let i = index\">\r\n                          <tr [formGroupName]=\"i\">\r\n                            <td class=\"text-left\">\r\n                              {{ fData[i]['displayname'] }}\r\n\r\n                              <input type=\"hidden\" formControlName=\"assetid\" value=\"{{ fData[i]['id'] }}\" />\r\n                              <input type=\"hidden\" formControlName=\"pageId\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"3\" title=\"accessRadio{{ i }}\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"2\" title=\"accessRadio{{ i }}\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <input formControlName=\"access\" (change)=\"changeFieldAccess($event)\" type=\"radio\"\r\n                                value=\"4\" title=\"accessRadio{{ i }}\" />\r\n                            </td>\r\n                            <td class=\"text-center\" *ngIf=\"showFieldValidity\">\r\n                              <p-dropdown [options]=\"conditions\" styleClass=\"condition\"\r\n                                [disabled]=\"fAccess?.value?.access === '4'\" formControlName=\"condition\"\r\n                                placeholder=\"Select a condition\" optionLabel=\"name\" optionValue=\"key\">\r\n                              </p-dropdown>\r\n                              <input type=\"number\" class=\"validity\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                [min]=\"1\" formControlName=\"validity\" [readonly]=\"fAccess?.value?.access === '4'\"\r\n                                style=\"width: 50px; margin-left: 15px\" pInputText />\r\n                              <p-dropdown [options]=\"getFallbackPermission(fAccess)\" styleClass=\"condition\"\r\n                                formControlName=\"fallbackTo\" *ngIf=\"fAccess?.value?.condition !== 'always'\"\r\n                                placeholder=\"Select a permission\"\r\n                                [disabled]=\"fAccess?.value?.access === '4' || fAccess?.value?.access === '3'\"\r\n                                optionLabel=\"name\" optionValue=\"key\" [style]=\"{ 'margin-left': '15px' }\">\r\n                              </p-dropdown>\r\n                            </td>\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </form>\r\n        <div class=\"mt-3\" *ngIf=\"!fieldLevelAccess && selectedAccess === 'role'\">\r\n          <h3 class=\"radio-title mb-2\">Policy Groups associated with {{ selectedRole }}</h3>\r\n          <mat-card class=\"mt-2\">\r\n            <mat-card-content>\r\n              <div class=\"row\">\r\n                <div class=\"col-12 mt-1\" *ngFor=\"let policyGroupPage of policyGroupPages\">\r\n                  <div class=\"radio-title mb-2\">Policy Group: {{ policyGroupPage.name }}</div>\r\n                  <div class=\"table-responsive\">\r\n                    <table id=\"policyGroupTable\" aria-describedby=\"policyGroupTable\" class=\"table table-bordered\">\r\n                      <col />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <col style=\"width: 120px\" />\r\n                      <thead>\r\n                        <tr>\r\n                          <th scope=\"col\" class=\"text-left\">Page Name</th>\r\n                          <th scope=\"col\" class=\"text-center\">Read</th>\r\n                          <th scope=\"col\" class=\"text-center\">Write</th>\r\n                          <th scope=\"col\" class=\"text-center\">None</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <ng-container *ngFor=\"let page of policyGroupPage?.data\">\r\n                          <tr>\r\n                            <td class=\"text-left\">\r\n                              <input style=\"border: none; pointer-events: none; width: 360px\" type=\"text\"\r\n                                title=\"page?.page?.activeVersion?.pagename\"\r\n                                [value]=\"page?.page?.activeVersion?.pagename\" />\r\n                            </td>\r\n\r\n                            <td class=\"text-center\">\r\n                              <input disabled [checked]=\"page?.read\" type=\"radio\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAG_FIELD_LEVEL_READ\" />\r\n                            </td>\r\n                            <td class=\"text-center\">\r\n                              <input disabled [checked]=\"page?.readwrite\" type=\"radio\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAG_FIELD_LEVEL_WRITE\" />\r\n                            </td>\r\n\r\n                            <td class=\"text-center\">\r\n                              <input disabled [checked]=\"page?.hide\" type=\"radio\"\r\n                                fieldKey=\"SETTINGS_PAG_ACC_PAG_FIELD_LEVEL_NONE\" />\r\n                            </td>\r\n                          </tr>\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"policyGroupPage?.data?.length === 0\">\r\n                          <tr>\r\n                            <td class=\"text-center\" colspan=\"4\">No pages associated with Policy Group.</td>\r\n                          </tr>\r\n                        </ng-container>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n        <div class=\"text-right mt-3\">\r\n          <!-- <button class=\"btn btn-primary mr-2\" fieldKey=\"SETTINGS_PAG_ACC_BACK\" (click)=\"redirectList()\">Back</button> -->\r\n          <!-- <button class=\"btn btn-cancel mr-2\" fieldKey=\"SETTINGS_PAG_ACC_CLEAR\" (click)=\"resetForm()\">Clear</button> -->\r\n          <button class=\"btn btn-primary\" fieldKey=\"SETTINGS_PAG_ACC_SAVE\" (click)=\"submitAlert()\">Save</button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal\" id=\"submitAlert\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Page Access - Warning</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        Field Level Access is already present for this Page. Modifying the Page Level Access will remove all Field Level Access. Do you want to proceed?\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"saveRbac()\">\r\n            Save\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">Cancel</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".mat-card-content .mat-radio-group .mat-radio-button{padding-right:10px;font-family:\"Roboto\",sans-serif!important}.toggleleft{font-size:var(--font-14);font-weight:600;display:block;padding-bottom:13px}:host ::ng-deep .p-dropdown.nobg{background-color:transparent;border:none}:host ::ng-deep .p-dropdown.nobg:hover,:host ::ng-deep .p-dropdown.nobg:focus{background-color:transparent!important;border:none!important}.pageLevelAccessTable table thead tr th,.pageLevelAccessTable table tbody tr td{vertical-align:middle;color:var(--text-dark)}.pageLevelAccessTable table thead tr th input,.pageLevelAccessTable table tbody tr td input{background:var(--bg-light);color:var(--text-dark)}.pageLevelAccessTable table thead tr th a:hover,.pageLevelAccessTable table tbody tr td a:hover{text-decoration:none}:host ::ng-deep .p-inputtext.validity{height:30px;line-height:13px}:host ::ng-deep .p-dropdown.condition{height:30px;line-height:13px}@media screen and (max-width: 990px){:host ::ng-deep .selected-list .c-list{width:calc(100% - 35px)!important}.pageLevelAccessTable{width:100%;overflow:auto}.pageLevelAccessTable .table{margin-bottom:60px}}\n"], components: [{ type: i5.AlertComponent, selector: "app-alert" }, { type: i6.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i7.ManageAccessRadioComponent, selector: "app-manage-access-radio", inputs: ["reloadForm"], outputs: ["accessBy", "policyDropdown", "roleDropdown", "userDropdown", "dropDownSelectedValues"] }, { type: i8.AngularMultiSelect, selector: "angular2-multiselect", inputs: ["settings", "data", "loading"], outputs: ["onSelect", "onDeSelect", "onSelectAll", "onDeSelectAll", "onOpen", "onClose", "onScrollToEnd", "onFilterSelectAll", "onFilterDeSelectAll", "onAddFilterNewItem", "onGroupSelect", "onGroupDeSelect"] }, { type: i9.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i10.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "virtualScroll", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "disabled", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear"] }], directives: [{ type: i6.MatCardContent, selector: "mat-card-content, [mat-card-content], [matCardContent]" }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i12.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i9.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i1.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { type: i13.InputText, selector: "[pInputText]" }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageaccessComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-pageaccess',
                    templateUrl: './pageaccess.component.html',
                    styleUrls: ['./pageaccess.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: i2.DataStoreService }, { type: i3.Router }, { type: i4.AlertService }]; }, propDecorators: { AddComponent: [{
                type: ViewChild,
                args: [ManageAccessRadioComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,