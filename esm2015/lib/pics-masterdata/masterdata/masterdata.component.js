import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { PrimeIcons } from 'primeng/api';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import * as i0 from "@angular/core";
import * as i1 from "../@core/service/rbac.service";
import * as i2 from "@angular/forms";
import * as i3 from "../@core/service/alert.service";
import * as i4 from "primeng/api";
import * as i5 from "../@core/permissions/permission.store";
import * as i6 from "../@core/service/data-store.service";
import * as i7 from "../@shared/alert/alert.component";
import * as i8 from "primeng/tree";
import * as i9 from "primeng/contextmenu";
import * as i10 from "primeng/confirmpopup";
import * as i11 from "primeng/card";
import * as i12 from "primeng/checkbox";
import * as i13 from "primeng/table";
import * as i14 from "primeng/multiselect";
import * as i15 from "primeng/treeselect";
import * as i16 from "primeng/dropdown";
import * as i17 from "../@core/directives/permission.directive";
import * as i18 from "primeng/inputtext";
import * as i19 from "@angular/common";
export class MasterdataComponent {
    constructor(mastersService, formBuilder, alertService, confirmationService, permissionStore, _storeservice) {
        this.mastersService = mastersService;
        this.formBuilder = formBuilder;
        this.alertService = alertService;
        this.confirmationService = confirmationService;
        this.permissionStore = permissionStore;
        this._storeservice = _storeservice;
        this.menuItems = [];
        this.filterMasterList = [];
        this.selectedItem = {};
        this.dataControlActions = [
            { value: '', name: 'Select' },
            { value: 'HIDE', name: 'Hide' },
            { value: 'DISABLE', name: 'Disable' },
            { value: 'MASK', name: 'Mask' }
        ];
        this.RBACORG = new RBACINFO();
        this.nodeType = 'category';
        this.saveMode = 'INSERT';
        this.isGlobalLookup = true;
        this.initializeCategoryForm();
        this.initializeLookupForm();
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                console.log(this.RBACORG, 'RBACORG Permisson');
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                if (this.environment) {
                    this.loadTree();
                    this.loadContextMenu();
                    this.mastersService.getAllUserRole().subscribe((items) => {
                        this.roles = items.data;
                    });
                    this.mastersService.getPermissionsTree(this.environment.applicationid).subscribe((items) => {
                        this.permissions = items.data;
                    });
                }
            }
        });
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    initializeCategoryForm() {
        this.categoryForm = this.formBuilder.group({
            id: [0],
            applicationid: [this.environment ? this.environment['applicationid'] : ''],
            name: ['', Validators.required],
            description: [''],
            readonly: [false],
            isenabled: [true]
        });
    }
    initializeLookupForm() {
        this.lookupForm = this.formBuilder.group({
            id: [0],
            lookupcategoryid: [0],
            parentid: [null],
            key: ['', Validators.required],
            value: ['', Validators.required],
            optionaldata: this.formBuilder.group({
                rules: this.formBuilder.array([])
            }),
            access: this.formBuilder.group({
                assign: ['', [this.requiredIfValidator(() => !this.isGlobalLookup)]],
                view: ['', [this.requiredIfValidator(() => !this.isGlobalLookup)]]
            }),
            order: [0],
            readonly: [false],
            global: [true],
            isenabled: [true]
        });
    }
    get datarules() {
        return this.lookupForm.get('optionaldata.rules');
    }
    addRule() {
        return this.formBuilder.group({
            roles: ['', Validators.required],
            permission: ['', Validators.required],
            action: ['', Validators.required]
        });
    }
    onAddRule() {
        this.datarules.push(this.addRule());
    }
    onDeleteRule(rowIndex) {
        this.datarules.removeAt(rowIndex);
    }
    searchMaster(event) {
        const value = event.target.value.toUpperCase();
        this.filterMasterList = this.categories.filter((a) => { var _a; return (_a = a['name']) === null || _a === void 0 ? void 0 : _a.toUpperCase().startsWith(value); });
    }
    onNodeContextMenuSelect(event) {
        if (event.node.type === 'category') {
            const permission = this.permissionStore.state;
            this.menuItems = [
                {
                    label: 'Create Category',
                    icon: PrimeIcons.ARROW_UP_LEFT,
                    visible: permission.SETTINGS_MAS_CREATE_CATOGORY,
                    badge: 'SETTINGS_MAS_CREATE_CATOGORY',
                    command: (createEvent) => {
                        this.saveMode = 'INSERT';
                        this.nodeType = 'category';
                        this.clearForm();
                        console.log(createEvent);
                    }
                },
                {
                    label: 'Create Lookup',
                    icon: PrimeIcons.ARROW_DOWN_RIGHT,
                    visible: permission.SETTINGS_MAS_CREATE_LOOKUP,
                    badge: 'SETTINGS_MAS_CREATE_LOOKUP',
                    command: _event => {
                        this.setInsertEvent();
                    }
                },
                {
                    label: 'Delete',
                    icon: PrimeIcons.TRASH,
                    visible: permission.SETTINGS_MAS_DELETE,
                    badge: 'SETTINGS_MAS_DELETE',
                    command: deleteEvent => {
                        this.saveMode = 'DELETE';
                        this.nodeType = this.selectedItem.type;
                        console.log(deleteEvent);
                        this.confirmationService.confirm({
                            target: deleteEvent.target,
                            message: 'Are you sure that you want to delete?',
                            icon: 'pi pi-exclamation-triangle',
                            accept: () => {
                                this.deleteItem();
                            },
                            reject: () => {
                                //not to be empty
                            }
                        });
                    }
                }
            ];
        }
        else if (event.node.type === 'lookup') {
            this.menuItems = [
                {
                    label: 'Create Lookup',
                    icon: PrimeIcons.ARROW_DOWN_RIGHT,
                    command: _eventErase => {
                        this.setInsertEvent();
                    }
                },
                {
                    label: 'Delete',
                    icon: PrimeIcons.TRASH,
                    command: RemoveEvent => {
                        this.saveMode = 'DELETE';
                        this.nodeType = this.selectedItem.type;
                        console.log(RemoveEvent);
                        this.confirmationService.confirm({
                            target: RemoveEvent.target,
                            message: 'Are you sure that you want to delete?',
                            icon: 'pi pi-exclamation-triangle',
                            accept: () => {
                                this.deleteItem();
                            },
                            reject: () => {
                                //not to be empty
                            }
                        });
                    }
                }
            ];
        }
    }
    setInsertEvent() {
        this.saveMode = 'INSERT';
        this.nodeType = this.selectedItem.type;
        this.createLookupForm();
        this.clearRules();
    }
    nodeSelect(event) {
        this.saveMode = 'UPDATE';
        this.nodeType = event.node.type;
        if (event.node.type === 'lookup') {
            this.mastersService.getLookup(event.node.id).subscribe((item) => {
                const lookup = item['data'];
                this.lookupForm.reset();
                this.setGlobal(lookup.global);
                this.clearRules();
                this.lookupForm.patchValue(lookup);
                if (lookup.optionaldata && lookup.optionaldata.rules) {
                    for (const rule of lookup.optionaldata.rules) {
                        const ruleControl = this.addRule();
                        ruleControl.patchValue(rule);
                        this.datarules.push(ruleControl);
                    }
                }
            });
        }
        else {
            this.categoryForm.reset();
            this.categoryForm.patchValue(event.node);
        }
        console.log(event.node);
    }
    clearRules() {
        for (let index = 0; index < this.datarules.length; index++) {
            this.datarules.removeAt(index);
        }
    }
    nodeExpand(event) {
        if (event.node && event.node.data && event.node.type !== 'lookup') {
            this.mastersService.getLookupTree(event.node.data).subscribe((nodes) => {
                event.node.children = nodes.data;
            });
        }
    }
    saveCategory() {
        const category = this.categoryForm.value;
        category.applicationid = this.environment.applicationid;
        console.log(category);
        category.order = category.order ? Number(category.order) : 1;
        if (this.categoryForm.valid) {
            if (this.saveMode === 'INSERT') {
                this.mastersService.createCategory(category).subscribe(() => {
                    this.alertService.success('Category created successfully.');
                    this.loadTree();
                });
            }
            else {
                this.mastersService.updateCategory(category).subscribe(() => {
                    this.alertService.success('Category updated successfully.');
                    this.loadTree();
                });
            }
        }
        else {
            this.alertService.error('Please Fill All Required Fields');
        }
    }
    saveLookup() {
        const lookup = this.lookupForm.value;
        console.log(lookup);
        if (this.lookupForm.valid) {
            delete lookup.readonly;
            lookup.order = lookup.order ? Number(lookup.order) : 1;
            if (lookup.optionaldata && lookup.optionaldata.rules) {
                lookup.optionaldata.rules = lookup.optionaldata.rules.map((rule) => {
                    rule.permission.parent = null;
                    return rule;
                });
            }
            if (this.saveMode === 'INSERT') {
                this.mastersService.createLookup(lookup).subscribe(() => {
                    this.alertService.success('Lookup created successfully.');
                    this.loadTree();
                });
            }
            else {
                this.mastersService.updateLookup(lookup).subscribe(() => {
                    this.alertService.success('Lookup updated successfully.');
                    this.loadTree();
                });
            }
        }
        else {
            this.alertService.error('Invalid lookup data.');
        }
    }
    clearForm() {
        if (this.nodeType === 'lookup') {
            this.initializeLookupForm();
        }
        else {
            this.initializeCategoryForm();
        }
    }
    createLookupForm() {
        this.initializeLookupForm();
        this.setGlobal(true);
        if (this.nodeType === 'category') {
            this.nodeType = 'lookup';
            this.lookupForm.patchValue({
                lookupcategoryid: this.selectedItem.id
            });
        }
        else {
            this.lookupForm.patchValue({
                lookupcategoryid: this.selectedItem.lookupcategoryid,
                parentid: this.selectedItem.id
            });
        }
    }
    setGlobal(checked) {
        var _a;
        this.isGlobalLookup = checked;
        (_a = this.lookupForm.get('access')) === null || _a === void 0 ? void 0 : _a.patchValue({
            view: [],
            assign: []
        });
    }
    loadContextMenu() {
        this.menuItems = [
            {
                label: 'Create Category',
                icon: PrimeIcons.ARROW_UP_LEFT,
                command: (event) => {
                    this.saveMode = 'INSERT';
                    this.nodeType = 'category';
                    this.clearForm();
                    console.log(event);
                }
            },
            {
                label: 'Create Lookup',
                icon: PrimeIcons.ARROW_DOWN_RIGHT,
                command: _eventNode => {
                    this.setInsertEvent();
                }
            },
            {
                label: 'Delete',
                icon: PrimeIcons.TRASH,
                command: event => {
                    this.saveMode = 'DELETE';
                    this.nodeType = this.selectedItem.type;
                    console.log(event);
                    this.confirmationService.confirm({
                        target: event.target,
                        message: 'Are you sure that you want to delete?',
                        icon: 'pi pi-exclamation-triangle',
                        accept: () => {
                            //confirm action
                            this.deleteItem();
                        },
                        reject: () => {
                            // This is intentional
                        }
                    });
                }
            }
        ];
    }
    loadTree() {
        this.mastersService.getAllCategoryTree(this.environment.applicationid).subscribe((items) => {
            this.categories = items;
            if (this.categories.length) {
                this.selectedItem = this.categories[0];
                this.filterMasterList = this.categories;
            }
        });
    }
    deleteItem() {
        this.saveMode = 'UPDATE';
        if (this.selectedItem.type === 'lookup') {
            this.mastersService.deleteLookup(this.selectedItem.id).subscribe((_item) => {
                this.alertService.warn('Lookup deleted successfully.');
                this.loadTree();
            });
        }
        else {
            this.mastersService.deleteCategory(this.selectedItem.id).subscribe((_item) => {
                this.alertService.warn('Category deleted successfully.');
                this.loadTree();
            });
        }
    }
    requiredIfValidator(predicate) {
        return (formControl) => {
            if (!formControl.parent) {
                return null;
            }
            if (predicate()) {
                return Validators.required(formControl);
            }
            return null;
        };
    }
}
MasterdataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MasterdataComponent, deps: [{ token: i1.RbacService }, { token: i2.FormBuilder }, { token: i3.AlertService }, { token: i4.ConfirmationService }, { token: i5.PermissionStore }, { token: i6.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
MasterdataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MasterdataComponent, selector: "lib-masterdata", ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"permission\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2\">\r\n        <div class=\"tab-pane fade show active\">\r\n          <div class=\"form-group bgiconsearch\">\r\n            <input\r\n              class=\"form-control\"\r\n              placeholder=\"Search by Category name\"\r\n              type=\"text\"\r\n              (keyup)=\"searchMaster($event)\"\r\n              fieldKey=\"SETTINGS_MAS_SEARCH_BY_NAME\"\r\n              pInputText />\r\n          </div>\r\n          <div class=\"clearfix\"></div>\r\n\r\n          <div class=\"masteracess\">\r\n            <p-tree\r\n              [value]=\"filterMasterList\"\r\n              selectionMode=\"single\"\r\n              [(selection)]=\"selectedItem\"\r\n              (onNodeSelect)=\"nodeSelect($event)\"\r\n              (onNodeContextMenuSelect)=\"onNodeContextMenuSelect($event)\"\r\n              (onNodeExpand)=\"nodeExpand($event)\"\r\n              [contextMenu]=\"treeContextMenu\"></p-tree>\r\n            <p-contextMenu #treeContextMenu [model]=\"menuItems\"></p-contextMenu>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-8 col-md-6 col-12 master-right mt-2\">\r\n      <p-confirmPopup></p-confirmPopup>\r\n      <p-card\r\n        *ngIf=\"nodeType === 'category'\"\r\n        id=\"categoryForm\"\r\n        class=\"rbac-card\"\r\n        [formGroup]=\"categoryForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Masters/Category</span>\r\n        </div>\r\n        <input id=\"cid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"capplicationid\" type=\"hidden\" formControlName=\"applicationid\" />\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"mName\" class=\"referral-form-labels\"\r\n              >Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input\r\n              id=\"mName\"\r\n              type=\"text\"\r\n              formControlName=\"name\"\r\n              fieldKey=\"SETTINGS_MAS_NAME\"\r\n              placeholder=\"Enter Name\"\r\n              aria-describedby=\"mName\"\r\n              pInputText />\r\n            <div\r\n              *ngIf=\"\r\n                categoryForm.controls['name'].invalid &&\r\n                (categoryForm.controls['name'].dirty || categoryForm.controls['name'].touched)\r\n              \">\r\n              <small *ngIf=\"categoryForm.controls['name'].invalid\" class=\"p-error block\">Name is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"cdescription\" class=\"referral-form-labels\">Description </label>\r\n            <input\r\n              id=\"cdescription\"\r\n              type=\"text\"\r\n              formControlName=\"description\"\r\n              fieldKey=\"SETTINGS_MAS_DESCRYPTION\"\r\n              placeholder=\"Enter Description\"\r\n              aria-describedby=\"cdescription\"\r\n              pInputText />\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels d-none d-lg-inline-block\">&#160;</label>\r\n            <div>\r\n              <p-checkbox\r\n                st\r\n                inputId=\"readOnly\"\r\n                [binary]=\"true\"\r\n                formControlName=\"readonly\"\r\n                fieldKey=\"SETTINGS_MAS_READ_ONLY\"\r\n                label=\"Readonly\">\r\n              </p-checkbox>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels d-none d-lg-inline-block\">&#160;</label>\r\n            <div>\r\n              <p-checkbox\r\n                st\r\n                inputId=\"active\"\r\n                [binary]=\"true\"\r\n                formControlName=\"isenabled\"\r\n                fieldKey=\"SETTINGS_MAS_ACTIVE\"\r\n                label=\"Active\"></p-checkbox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2\">\r\n          <button\r\n            class=\"pull-right mb-2 btn btn-primary btncommon\"\r\n            fieldKey=\"SETTINGS_MAS_ADD_CATOGORY\"\r\n            (click)=\"saveCategory()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Category' : 'Add Category' }}\r\n          </button>\r\n          <button\r\n            class=\"pull-right mb-2 mr-2 btn bg-white text-primary border border-primary btncancel\"\r\n            fieldKey=\"SETTINGS_MAS_CANCEL\"\r\n            (click)=\"clearForm()\">\r\n            Cancel\r\n          </button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card>\r\n\r\n      <p-card\r\n        *ngIf=\"nodeType === 'lookup'\"\r\n        id=\"lookupForm\"\r\n        class=\"rbac-card\"\r\n        [formGroup]=\"lookupForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Masters/Lookup</span>\r\n        </div>\r\n        <input id=\"lid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"llookupcategoryid\" type=\"hidden\" formControlName=\"lookupcategoryid\" />\r\n        <input id=\"lparentid\" type=\"hidden\" formControlName=\"parentid\" />\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lkey\" class=\"referral-form-labels\"\r\n              >Key\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input\r\n              id=\"lkey\"\r\n              type=\"text\"\r\n              placeholder=\"Enter Key\"\r\n              formControlName=\"key\"\r\n              aria-describedby=\"lkey\"\r\n              pInputText />\r\n            <div *ngIf=\"lookupForm.controls['key'].errors\">\r\n              <small *ngIf=\"lookupForm.controls['key'].invalid\" class=\"p-error block\">Key is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lvalue\" class=\"referral-form-labels\">Value </label>\r\n            <input\r\n              id=\"lvalue\"\r\n              type=\"text\"\r\n              placeholder=\"Enter Value\"\r\n              formControlName=\"value\"\r\n              aria-describedby=\"lvalue\"\r\n              pInputText />\r\n            <div *ngIf=\"lookupForm.controls['value'].errors\">\r\n              <small *ngIf=\"lookupForm.controls['value'].invalid\" class=\"p-error block\">Value is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lorder\" class=\"referral-form-labels\">Order</label>\r\n            <input id=\"lorder\" type=\"text\" formControlName=\"order\" placeholder=\"Enter Order\" pInputText />\r\n          </div>\r\n        </div>\r\n        <ng-container formGroupName=\"optionaldata\">\r\n          <p-table [value]=\"datarules.controls\" width=\"100%\" [responsive]=\"true\" formArrayName=\"rules\">\r\n            <ng-template pTemplate=\"caption\">\r\n              <div class=\"flex align-items-center justify-content-between\">\r\n                Control Flow\r\n                <button class=\"pull-right mb-2 btn btn-primary btncommon\" (click)=\"onAddRule()\">+</button>\r\n              </div>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th id=\"datarules-roles\" style=\"width: 35%\">Roles</th>\r\n                <th id=\"datarules-permissions\" style=\"width: 35%\">Permissions</th>\r\n                <th id=\"datarules-action\" style=\"width: 20%\">Action</th>\r\n                <th id=\"datarules-empty\" style=\"width: 10%\"></th>\r\n              </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowData let-rowIndex=\"rowIndex\">\r\n              <ng-container>\r\n                <tr [formGroupName]=\"rowIndex\">\r\n                  <td>\r\n                    <p-multiSelect\r\n                      [options]=\"roles\"\r\n                      formControlName=\"roles\"\r\n                      defaultLabel=\"Select Roles\"\r\n                      optionLabel=\"name\"\r\n                      optionValue=\"id\"\r\n                      ariaFilterLabel=\"null\"\r\n                      ariaLabelledBy=\"selectRoles{{ rowIndex }}\"\r\n                      id=\"selectRoles{{ rowIndex }}\"\r\n                      display=\"chip\">\r\n                    </p-multiSelect>\r\n                    <div\r\n                      class=\"text-danger\"\r\n                      *ngIf=\"\r\n                        rowData.get('roles').errors && (rowData.get('roles').dirty || rowData.get('roles').touched)\r\n                      \">\r\n                      <div *ngIf=\"rowData.get('roles').errors?.required\">Role is Required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <p-treeSelect\r\n                      formControlName=\"permission\"\r\n                      [options]=\"permissions\"\r\n                      optionLabel=\"label\"\r\n                      optionValue=\"data\"\r\n                      placeholder=\"Select Permissions\"\r\n                      id=\"selectPermit{{ rowIndex }}\"\r\n                      ariaLabelledBy=\"selectPermit{{ rowIndex }}\"\r\n                      class=\"permission-tree\"></p-treeSelect>\r\n                    <div\r\n                      class=\"text-danger\"\r\n                      *ngIf=\"\r\n                        rowData.get('permission').errors &&\r\n                        (rowData.get('permission').dirty || rowData.get('permission').touched)\r\n                      \">\r\n                      <div *ngIf=\"rowData.get('permission').errors?.required\">Permission is Required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <p-dropdown\r\n                      optionLabel=\"name\"\r\n                      optionValue=\"value\"\r\n                      [options]=\"dataControlActions\"\r\n                      id=\"selectValue{{ rowIndex }}\"\r\n                      ariaLabelledBy=\"selectValue{{ rowIndex }}\"\r\n                      formControlName=\"action\">\r\n                    </p-dropdown>\r\n                    <div\r\n                      class=\"text-danger\"\r\n                      *ngIf=\"\r\n                        rowData.get('action').errors && (rowData.get('action').dirty || rowData.get('action').touched)\r\n                      \">\r\n                      <div *ngIf=\"rowData.get('action').errors?.required\">Action is Required</div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <button type=\"button\" class=\"btn btn-default\" title=\"delete\" (click)=\"onDeleteRule(rowIndex)\">\r\n                      <i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </ng-container>\r\n            </ng-template>\r\n          </p-table>\r\n        </ng-container>\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"p-field p-col\" style=\"padding: 25px 0px 0px 10px\">\r\n            <p-checkbox\r\n              inputId=\"binaryGlobal\"\r\n              [binary]=\"true\"\r\n              formControlName=\"global\"\r\n              (onChange)=\"setGlobal($event.checked)\"\r\n              label=\"Global\"></p-checkbox>\r\n          </div>\r\n          <div class=\"p-field p-col\" style=\"padding: 25px 0px 0px 10px\">\r\n            <p-checkbox inputId=\"binaryActive\" [binary]=\"true\" formControlName=\"isenabled\" label=\"Active\"></p-checkbox>\r\n          </div>\r\n          <div class=\"p-field p-col\"></div>\r\n          <div class=\"p-field p-col\"></div>\r\n        </div>\r\n        <ng-container *ngIf=\"!isGlobalLookup\">\r\n          <div class=\"p-fluid p-formgrid p-grid\" formGroupName=\"access\">\r\n            <div class=\"p-field p-col\">\r\n              <label for=\"pname\" class=\"referral-form-labels\">View Access </label>\r\n              <p-multiSelect\r\n                [options]=\"roles\"\r\n                formControlName=\"view\"\r\n                defaultLabel=\"Select Roles\"\r\n                optionLabel=\"name\"\r\n                optionValue=\"id\"\r\n                display=\"chip\">\r\n              </p-multiSelect>\r\n              <div *ngIf=\"lookupForm.get('access.view')?.errors\">\r\n                <small *ngIf=\"lookupForm.get('access.view')?.invalid\" class=\"p-error block\">Role is required </small>\r\n              </div>\r\n            </div>\r\n            <div class=\"p-field p-col\">\r\n              <label for=\"pname\" class=\"referral-form-labels\">Assign Access </label>\r\n              <p-multiSelect\r\n                [options]=\"roles\"\r\n                formControlName=\"assign\"\r\n                defaultLabel=\"Select Roles\"\r\n                optionLabel=\"name\"\r\n                optionValue=\"id\"\r\n                display=\"chip\">\r\n              </p-multiSelect>\r\n              <div *ngIf=\"lookupForm.get('access.assign')?.errors\">\r\n                <small *ngIf=\"lookupForm.get('access.assign')?.invalid\" class=\"p-error block\">Role is required </small>\r\n              </div>\r\n            </div>\r\n            <div class=\"p-field p-col\"></div>\r\n          </div>\r\n        </ng-container>\r\n\r\n        <div class=\"mt-2\">\r\n          <button type=\"submit\" class=\"pull-right mb-2 btn btn-primary btncommon\" (click)=\"saveLookup()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Lookup' : 'Add Lookup' }}\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" (click)=\"clearForm()\">Cancel</button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:var(--base-font-size)}.masteracess{border:solid 1px var(--table-border);border-radius:2px;padding:5px 0;overflow-y:auto;background:var(--bg-light);max-height:calc(100vh - 243px);min-height:calc(100vh - 237px)}.masterempty{max-width:none;border-radius:50%;height:40px;width:40px}.row.masterdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}span.namemaster{font-size:var(--base-font-size);color:#000}.masterid,span.emailmaster{font-size:var(--base-font-size);color:#9b9b9b}span.deletemaster{position:absolute;top:0px;right:15px;z-index:9;width:20px;float:right;cursor:pointer}span.deletemaster img{width:12px}.activate{position:absolute;margin-top:-46px;margin-left:44rem}.toggleleft{font-size:13px;font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.report_button{margin-left:12px}:host ::ng-deep .ui-tree.permission-tree{width:100%}:host ::ng-deep .p-datatable .p-datatable-header{background:var(--background-color);color:var(--text-dark);border-color:var(--table-border)}:host ::ng-deep .p-datatable .p-datatable-thead tr th{background:var(--background-color);color:var(--text-dark);border-color:var(--table-border)}\n"], components: [{ type: i7.AlertComponent, selector: "app-alert" }, { type: i8.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "virtualScroll", "virtualNodeHeight", "minBufferPx", "maxBufferPx", "indentation", "trackBy"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onFilter"] }, { type: i9.ContextMenu, selector: "p-contextMenu", inputs: ["model", "global", "target", "style", "styleClass", "appendTo", "autoZIndex", "baseZIndex", "triggerEvent"], outputs: ["onShow", "onHide"] }, { type: i10.ConfirmPopup, selector: "p-confirmPopup", inputs: ["key", "defaultFocus", "showTransitionOptions", "hideTransitionOptions", "autoZIndex", "baseZIndex", "style", "styleClass", "visible"] }, { type: i11.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { type: i12.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }, { type: i13.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollDelay", "virtualRowHeight", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "minBufferPx", "maxBufferPx", "responsiveLayout", "breakpoint", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll"], outputs: ["selectAllChange", "selectionChange", "contextMenuSelectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { type: i14.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "autoZIndex", "baseZIndex", "filterBy", "virtualScroll", "itemSize", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "scrollHeight", "defaultLabel", "placeholder", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide"] }, { type: i15.TreeSelect, selector: "p-treeSelect", inputs: ["type", "inputId", "scrollHeight", "disabled", "metaKeySelection", "display", "selectionMode", "tabindex", "ariaLabelledBy", "placeholder", "panelClass", "emptyMessage", "appendTo", "filter", "filterBy", "filterMode", "filterPlaceholder", "filterLocale", "filterInputAutoFocus", "propagateSelectionDown", "propagateSelectionUp", "showClear", "resetFilterOnHide", "options", "showTransitionOptions", "hideTransitionOptions"], outputs: ["onNodeExpand", "onNodeCollapse", "onShow", "onHide", "onClear", "onFilter", "onNodeUnselect", "onNodeSelect"] }, { type: i16.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "virtualScroll", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "disabled", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear"] }], directives: [{ type: i17.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i18.InputText, selector: "[pInputText]" }, { type: i19.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i4.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MasterdataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-masterdata',
                    templateUrl: './masterdata.component.html',
                    styleUrls: ['./masterdata.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.RbacService }, { type: i2.FormBuilder }, { type: i3.AlertService }, { type: i4.ConfirmationService }, { type: i5.PermissionStore }, { type: i6.DataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,